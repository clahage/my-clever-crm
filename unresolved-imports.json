[{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\AIReceptionistPrompt.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'sendIntroTextToLaurie' is defined but never used. Allowed unused vars must match /^_/u.","line":51,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI Receptionist Prompt – Speedy Credit Repair\r\n//\r\n// Use this prompt as the main instruction for your AI receptionist system.\r\n// Update the CRM and call log features to support name recognition, call history, and proper date/time recording.\r\n// Ensure the texting system uses the provided phone number for sending links and follow-ups.\r\n\r\nimport { AI_RECEPTIONIST_PHONE } from \"@/config/appConfig\";\r\n\r\nexport const AI_RECEPTIONIST_PROMPT = `\r\nYou are Taylor, the virtual receptionist for Speedy Credit Repair. Your mission is to provide a warm, professional, and efficient experience for every caller.\r\n\r\nCore Responsibilities:\r\n- Greet every caller politely and introduce yourself as Taylor, the Speedy Credit Repair assistant.\r\n- Early in the conversation, ask for the caller’s full name in a friendly, non-intrusive way. If they decline, respect their wishes.\r\n- Immediately after connecting, inform the caller that you will send them a link to claim their free credit report and review offer via text.\r\n- Address callers by their first name throughout the conversation.\r\n- If the caller is recognized by their phone number, greet them by name and reference their last interaction or topic.\r\n- If the caller is new, warmly introduce yourself and collect their information.\r\n- If the caller is unsure or silent, offer helpful suggestions or questions to keep the conversation moving.\r\n- Answer all questions thoroughly and honestly. If you don’t know the answer, offer to connect them with a Speedy Credit Repair expert.\r\n- If the caller prefers a live agent, ensure you have their name and a clear understanding of their needs before transferring.\r\n- If you do not understand a response, politely ask them to repeat. If still unclear, offer to receive their answer by text.\r\n- Avoid repeating the caller’s responses unless clarification is needed.\r\n- Focus only on the caller’s voice; ignore background noise.\r\n- If the caller speaks another language, ask if they’d like to continue in that language and accommodate if possible. Translate all call logs to English.\r\n- If a caller mentions an issue with your Google Business listing, disconnect immediately and add their number to the blocked list.\r\n- If the caller is a solicitor, respond with “No, thank you,” and disconnect.\r\n- When sending contacts to the CRM, always record the actual date and time in the “Status History” field.\r\n\r\nResponse Templates:\r\n\r\nFor Returning Callers:\r\n“Hello [Name]! Welcome back to Speedy Credit Repair. This is Taylor. Last time, we discussed [topic/time]. How can I assist you today?”\r\n\r\nFor Free Credit Report Requests:\r\n“Absolutely, I’ll make sure you get that. You’ll receive a text message with the link to your free credit report right after this call.”\r\n`;\r\n\r\n// --- AI Receptionist Name ---\r\nexport const AI_RECEPTIONIST_NAME = 'Taylor';\r\n\r\n// --- Speedy Credit Repair Team Contacts ---\r\nexport const LAURIE_PHONE = '+16573329833';\r\nexport const CHRIS_PHONE = '+16574062019';\r\nexport const LAURIE_EMAIL = 'Laurie@speedycreditrepair.com';\r\nexport const CHRIS_EMAIL = 'Chris@speedycreditrepair.com';\r\nexport const CHRIS_PERSONAL_PHONE = '+17144936666';\r\n\r\n// --- Taylor's Intro Text Function ---\r\n// Example usage: sendIntroTextToLaurie();\r\nfunction sendIntroTextToLaurie() {\r\n  const laurieNumber = LAURIE_PHONE;\r\n  const message = `Hello Laurie! This is Taylor, your new virtual receptionist at Speedy Credit Repair. I’m here to help you and your clients with anything you need. If you have questions or want to try out my features, just reply to this text!`;\r\n  // Example: Replace with your real SMS API call\r\n  fetch('/api/send-sms', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ to: laurieNumber, from: AI_RECEPTIONIST_PHONE, message })\r\n  })\r\n    .then(res => res.ok ? alert('Intro text sent to Laurie!') : alert('Failed to send text.'))\r\n    .catch(() => alert('Failed to send text.'));\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\AllOutBrandShowcase.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\App.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\Home.jsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":29,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1488,1559],"text":"Welcome back! Here&apos;s what's happening with your credit repair business."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1488,1559],"text":"Welcome back! Here&lsquo;s what's happening with your credit repair business."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1488,1559],"text":"Welcome back! Here&#39;s what's happening with your credit repair business."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1488,1559],"text":"Welcome back! Here&rsquo;s what's happening with your credit repair business."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":29,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1488,1559],"text":"Welcome back! Here's what&apos;s happening with your credit repair business."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1488,1559],"text":"Welcome back! Here's what&lsquo;s happening with your credit repair business."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1488,1559],"text":"Welcome back! Here's what&#39;s happening with your credit repair business."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1488,1559],"text":"Welcome back! Here's what&rsquo;s happening with your credit repair business."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":118,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6740,6784],"text":"This space is optimized for your 49&quot; screen!"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6740,6784],"text":"This space is optimized for your 49&ldquo; screen!"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6740,6784],"text":"This space is optimized for your 49&#34; screen!"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6740,6784],"text":"This space is optimized for your 49&rdquo; screen!"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState } from 'react';\r\nimport FirebaseCheck from './components/FirebaseCheck';\r\nimport {\r\n  Users, UserPlus, FileText, BarChart3, DollarSign, TrendingUp, Mail, Bell\r\n} from 'lucide-react';\r\n\r\nconst stats = [\r\n  { label: 'Total Contacts', value: '2,543', change: '+12%', trend: 'up', icon: Users },\r\n  { label: 'Active Clients', value: '1,823', change: '+5%', trend: 'up', icon: UserPlus },\r\n  { label: 'This Month Revenue', value: '$45,230', change: '+18%', trend: 'up', icon: DollarSign },\r\n  { label: 'Conversion Rate', value: '68%', change: '+3%', trend: 'up', icon: TrendingUp },\r\n  // Ultra-wide extra cards\r\n  { label: 'Pending Disputes', value: '312', change: '-2%', trend: 'down', icon: FileText },\r\n  { label: 'Letters Sent', value: '1,204', change: '+8%', trend: 'up', icon: FileText },\r\n  { label: 'Payments Received', value: '$12,400', change: '+6%', trend: 'up', icon: DollarSign },\r\n  { label: 'New Leads', value: '97', change: '+11%', trend: 'up', icon: Users }\r\n];\r\n\r\nexport default function Home() {\r\n  const [showFirebaseStatus, setShowFirebaseStatus] = useState(false);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 w-full overflow-x-auto\">\r\n      {/* Main Header */}\r\n      <header className=\"bg-white shadow-sm border-b border-gray-200 p-4 xl:p-6 2xl:p-8 flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl xl:text-3xl font-bold text-gray-900\">Dashboard</h1>\r\n          <p className=\"text-gray-600\">Welcome back! Here's what's happening with your credit repair business.</p>\r\n        </div>\r\n        <div className=\"flex items-center gap-4\">\r\n          <Bell className=\"h-5 w-5 text-gray-600\" />\r\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700\">\r\n            Quick Action\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Firebase Status Toggle */}\r\n      <div className=\"w-full px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16 pt-6\">\r\n        <button\r\n          onClick={() => setShowFirebaseStatus(!showFirebaseStatus)}\r\n          className=\"w-full flex items-center justify-between text-sm text-gray-600 hover:text-gray-800 bg-white border border-gray-200 rounded-lg p-3 mb-6\"\r\n        >\r\n          <span className=\"flex items-center gap-2\">\r\n            <FileText className=\"h-4 w-4\" />\r\n            System Status\r\n          </span>\r\n          <span>{showFirebaseStatus ? 'Hide' : 'Show'}</span>\r\n        </button>\r\n        {showFirebaseStatus && <FirebaseCheck />}\r\n      </div>\r\n\r\n      {/* Stats Cards - More columns on ultra-wide screens */}\r\n      <div className=\"w-full px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16 py-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 2xl:grid-cols-8 gap-4 xl:gap-6 mb-8\">\r\n        {stats.map((stat, index) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <div key={index} className=\"bg-white p-4 xl:p-6 rounded-lg shadow-sm border border-gray-200 flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">{stat.label}</p>\r\n                <p className=\"text-xl xl:text-2xl font-bold text-gray-900\">{stat.value}</p>\r\n                <span className={`text-sm font-medium ${stat.trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>{stat.change}</span>\r\n              </div>\r\n              <Icon className=\"h-6 w-6 xl:h-8 xl:w-8 text-blue-600\" />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Quick Actions & Recent Activity - Better layout for wide screens */}\r\n      <div className=\"w-full px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16 pb-10 grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-6\">\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h3>\r\n          <div className=\"grid grid-cols-2 gap-3\">\r\n            <button className=\"p-3 bg-blue-50 hover:bg-blue-100 rounded-lg text-center transition-colors\">\r\n              <UserPlus className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\r\n              <span className=\"text-sm font-medium text-blue-800\">Add Contact</span>\r\n            </button>\r\n            <button className=\"p-3 bg-green-50 hover:bg-green-100 rounded-lg text-center transition-colors\">\r\n              <FileText className=\"h-6 w-6 text-green-600 mx-auto mb-2\" />\r\n              <span className=\"text-sm font-medium text-green-800\">New Dispute</span>\r\n            </button>\r\n            <button className=\"p-3 bg-purple-50 hover:bg-purple-100 rounded-lg text-center transition-colors\">\r\n              <Mail className=\"h-6 w-6 text-purple-600 mx-auto mb-2\" />\r\n              <span className=\"text-sm font-medium text-purple-800\">Send Letter</span>\r\n            </button>\r\n            <button className=\"p-3 bg-orange-50 hover:bg-orange-100 rounded-lg text-center transition-colors\">\r\n              <BarChart3 className=\"h-6 w-6 text-orange-600 mx-auto mb-2\" />\r\n              <span className=\"text-sm font-medium text-orange-800\">View Reports</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Activity</h3>\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex items-center justify-between py-2\">\r\n              <span className=\"text-sm text-gray-600\">New contact added: John Doe</span>\r\n              <span className=\"text-xs text-gray-400\">2 min ago</span>\r\n            </div>\r\n            <div className=\"flex items-center justify-between py-2\">\r\n              <span className=\"text-sm text-gray-600\">Dispute letter sent for Client #12345</span>\r\n              <span className=\"text-xs text-gray-400\">15 min ago</span>\r\n            </div>\r\n            <div className=\"flex items-center justify-between py-2\">\r\n              <span className=\"text-sm text-gray-600\">Payment received: $199</span>\r\n              <span className=\"text-xs text-gray-400\">1 hour ago</span>\r\n            </div>\r\n            <div className=\"flex items-center justify-between py-2\">\r\n              <span className=\"text-sm text-gray-600\">Credit report updated: Jane Smith</span>\r\n              <span className=\"text-xs text-gray-400\">2 hours ago</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Additional cards for ultra-wide screens */}\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200 hidden 2xl:block\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Ultra-Wide Card</h3>\r\n          <div className=\"text-gray-600\">This space is optimized for your 49\" screen!</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\Preview.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'CreditCard' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'Phone' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'Building' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n  Users, UserPlus, FileText, CreditCard, BarChart3, Settings, \r\n  Shield, Database, Upload, Download,\r\n  Calendar, Mail, Phone, MessageSquare, Bell, Search,\r\n  ChevronDown, ChevronUp, Menu, X, Home, Building,\r\n  DollarSign, TrendingUp, FileCheck, UserCheck\r\n} from 'lucide-react';\r\n\r\nconst CRMLayout = () => {\r\n  const [sidebarOpen, setSidebarOpen] = useState(true);\r\n  const [showFirebaseStatus, setShowFirebaseStatus] = useState(false);\r\n  const [activeSection, setActiveSection] = useState('dashboard');\r\n\r\n  // Core CRM Navigation Items\r\n  const navigationItems = [\r\n    {\r\n      section: 'Dashboard',\r\n      items: [\r\n        { id: 'dashboard', label: 'Dashboard Overview', icon: Home, path: '/' },\r\n        { id: 'analytics', label: 'Analytics', icon: BarChart3, path: '/analytics' }\r\n      ]\r\n    },\r\n    {\r\n      section: 'Contact Management',\r\n      items: [\r\n        { id: 'contacts', label: 'All Contacts', icon: Users, path: '/contacts' },\r\n        { id: 'leads', label: 'Leads', icon: UserPlus, path: '/leads' },\r\n        { id: 'clients', label: 'Active Clients', icon: UserCheck, path: '/clients' },\r\n        { id: 'prospects', label: 'Prospects', icon: Search, path: '/prospects' }\r\n      ]\r\n    },\r\n    {\r\n      section: 'Credit Repair',\r\n      items: [\r\n        { id: 'disputes', label: 'Dispute Center', icon: FileText, path: '/disputes' },\r\n        { id: 'letters', label: 'Letter Templates', icon: Mail, path: '/letters' },\r\n        { id: 'reports', label: 'Credit Reports', icon: FileCheck, path: '/reports' },\r\n        { id: 'progress', label: 'Progress Tracking', icon: TrendingUp, path: '/progress' },\r\n        { id: 'idiq', label: 'IDIQ Integration', icon: Shield, path: '/idiq' }\r\n      ]\r\n    },\r\n    {\r\n      section: 'Business Operations',\r\n      items: [\r\n        { id: 'billing', label: 'Billing & Invoices', icon: DollarSign, path: '/billing' },\r\n        { id: 'contracts', label: 'E-Contracts', icon: FileText, path: '/contracts' },\r\n        { id: 'calendar', label: 'Calendar', icon: Calendar, path: '/calendar' },\r\n        { id: 'communications', label: 'Communications', icon: MessageSquare, path: '/communications' }\r\n      ]\r\n    },\r\n    {\r\n      section: 'Tools & Utilities',\r\n      items: [\r\n        { id: 'import', label: 'Import Data', icon: Upload, path: '/import' },\r\n        { id: 'export', label: 'Export Data', icon: Download, path: '/export' },\r\n        { id: 'bulk-actions', label: 'Bulk Actions', icon: Database, path: '/bulk' },\r\n        { id: 'automation', label: 'Automation Rules', icon: Settings, path: '/automation' }\r\n      ]\r\n    },\r\n    {\r\n      section: 'Administration',\r\n      items: [\r\n        { id: 'admin-panel', label: 'Admin Panel', icon: Settings, path: '/admin' },\r\n        { id: 'user-management', label: 'User Management', icon: Users, path: '/admin/users' },\r\n        { id: 'roles', label: 'Roles & Permissions', icon: Shield, path: '/admin/roles' },\r\n        { id: 'settings', label: 'System Settings', icon: Settings, path: '/settings' }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  // Mock Firebase Check Component\r\n  const FirebaseStatus = () => (\r\n    <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 mb-4\">\r\n      <div className=\"flex items-center justify-between mb-2\">\r\n        <h4 className=\"text-sm font-semibold text-green-800\">🔥 Firebase Status</h4>\r\n      </div>\r\n      <div className=\"grid grid-cols-3 gap-2 text-xs\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-green-600\">✅</div>\r\n          <div>Auth</div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className=\"text-green-600\">✅</div>\r\n          <div>Firestore</div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className=\"text-green-600\">✅</div>\r\n          <div>Storage</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"text-center text-xs text-green-700 mt-2 font-medium\">\r\n        All Systems Connected\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Stats for dashboard\r\n  const stats = [\r\n    { label: 'Total Contacts', value: '2,543', change: '+12%', trend: 'up', icon: Users },\r\n    { label: 'Active Clients', value: '1,823', change: '+5%', trend: 'up', icon: UserCheck },\r\n    { label: 'This Month Revenue', value: '$45,230', change: '+18%', trend: 'up', icon: DollarSign },\r\n    { label: 'Conversion Rate', value: '68%', change: '+3%', trend: 'up', icon: TrendingUp }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"flex h-screen bg-gray-100\">\r\n      {/* Sidebar */}\r\n      <div className={`${sidebarOpen ? 'w-64' : 'w-16'} bg-white shadow-lg transition-all duration-300 flex flex-col`}>\r\n        {/* Sidebar Header */}\r\n        <div className=\"p-4 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            {sidebarOpen && (\r\n              <h2 className=\"text-lg font-bold text-gray-800\">Credit Repair CRM</h2>\r\n            )}\r\n            <button\r\n              onClick={() => setSidebarOpen(!sidebarOpen)}\r\n              className=\"p-1 rounded-md hover:bg-gray-100\"\r\n            >\r\n              {sidebarOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Firebase Status Toggle */}\r\n        {sidebarOpen && (\r\n          <div className=\"p-4 border-b border-gray-200\">\r\n            <button\r\n              onClick={() => setShowFirebaseStatus(!showFirebaseStatus)}\r\n              className=\"w-full flex items-center justify-between text-sm text-gray-600 hover:text-gray-800\"\r\n            >\r\n              <span className=\"flex items-center gap-2\">\r\n                <Database className=\"h-4 w-4\" />\r\n                System Status\r\n              </span>\r\n              {showFirebaseStatus ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\r\n            </button>\r\n            {showFirebaseStatus && <FirebaseStatus />}\r\n          </div>\r\n        )}\r\n\r\n        {/* Navigation */}\r\n        <div className=\"flex-1 overflow-y-auto\">\r\n          {navigationItems.map((section, sectionIndex) => (\r\n            <div key={sectionIndex} className=\"py-2\">\r\n              {sidebarOpen && (\r\n                <h3 className=\"px-4 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider\">\r\n                  {section.section}\r\n                </h3>\r\n              )}\r\n              {section.items.map((item) => {\r\n                const Icon = item.icon;\r\n                return (\r\n                  <button\r\n                    key={item.id}\r\n                    onClick={() => setActiveSection(item.id)}\r\n                    className={`w-full flex items-center px-4 py-2 text-sm transition-colors ${\r\n                      activeSection === item.id\r\n                        ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700'\r\n                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\r\n                    }`}\r\n                  >\r\n                    <Icon className=\"h-5 w-5 flex-shrink-0\" />\r\n                    {sidebarOpen && <span className=\"ml-3\">{item.label}</span>}\r\n                  </button>\r\n                );\r\n              })}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* User Info */}\r\n        {sidebarOpen && (\r\n          <div className=\"p-4 border-t border-gray-200\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\r\n                <span className=\"text-white text-sm font-medium\">CA</span>\r\n              </div>\r\n              <div className=\"ml-3\">\r\n                <p className=\"text-sm font-medium text-gray-700\">Chris Admin</p>\r\n                <p className=\"text-xs text-gray-500\">Master Admin</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\r\n        {/* Top Header */}\r\n        <header className=\"bg-white shadow-sm border-b border-gray-200 p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-2xl font-bold text-gray-900\">\r\n                {activeSection === 'dashboard' ? 'Dashboard' : \r\n                 navigationItems.flatMap(s => s.items).find(i => i.id === activeSection)?.label || 'Dashboard'}\r\n              </h1>\r\n              <p className=\"text-gray-600\">\r\n                {activeSection === 'dashboard' \r\n                  ? \"Welcome back! Here's what's happening with your credit repair business.\"\r\n                  : \"Manage your credit repair operations efficiently\"\r\n                }\r\n              </p>\r\n            </div>\r\n            <div className=\"flex items-center gap-4\">\r\n              <Bell className=\"h-5 w-5 text-gray-600\" />\r\n              <button className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700\">\r\n                Quick Action\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </header>\r\n\r\n        {/* Main Content Area */}\r\n        <main className=\"flex-1 overflow-y-auto p-6\">\r\n          {activeSection === 'dashboard' ? (\r\n            <>\r\n              {/* Stats Cards */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n                {stats.map((stat, index) => {\r\n                  const Icon = stat.icon;\r\n                  return (\r\n                    <div key={index} className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"text-sm font-medium text-gray-600\">{stat.label}</p>\r\n                          <p className=\"text-2xl font-bold text-gray-900\">{stat.value}</p>\r\n                        </div>\r\n                        <div className=\"flex flex-col items-end\">\r\n                          <Icon className=\"h-8 w-8 text-blue-600 mb-2\" />\r\n                          <span className={`text-sm font-medium ${\r\n                            stat.trend === 'up' ? 'text-green-600' : 'text-red-600'\r\n                          }`}>\r\n                            {stat.change}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n              {/* Quick Actions */}\r\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h3>\r\n                  <div className=\"grid grid-cols-2 gap-3\">\r\n                    <button className=\"p-3 bg-blue-50 hover:bg-blue-100 rounded-lg text-center transition-colors\">\r\n                      <UserPlus className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\r\n                      <span className=\"text-sm font-medium text-blue-800\">Add Contact</span>\r\n                    </button>\r\n                    <button className=\"p-3 bg-green-50 hover:bg-green-100 rounded-lg text-center transition-colors\">\r\n                      <FileText className=\"h-6 w-6 text-green-600 mx-auto mb-2\" />\r\n                      <span className=\"text-sm font-medium text-green-800\">New Dispute</span>\r\n                    </button>\r\n                    <button className=\"p-3 bg-purple-50 hover:bg-purple-100 rounded-lg text-center transition-colors\">\r\n                      <Mail className=\"h-6 w-6 text-purple-600 mx-auto mb-2\" />\r\n                      <span className=\"text-sm font-medium text-purple-800\">Send Letter</span>\r\n                    </button>\r\n                    <button className=\"p-3 bg-orange-50 hover:bg-orange-100 rounded-lg text-center transition-colors\">\r\n                      <BarChart3 className=\"h-6 w-6 text-orange-600 mx-auto mb-2\" />\r\n                      <span className=\"text-sm font-medium text-orange-800\">View Reports</span>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Activity</h3>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center justify-between py-2\">\r\n                      <span className=\"text-sm text-gray-600\">New contact added: John Doe</span>\r\n                      <span className=\"text-xs text-gray-400\">2 min ago</span>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between py-2\">\r\n                      <span className=\"text-sm text-gray-600\">Dispute letter sent for Client #12345</span>\r\n                      <span className=\"text-xs text-gray-400\">15 min ago</span>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between py-2\">\r\n                      <span className=\"text-sm text-gray-600\">Payment received: $199</span>\r\n                      <span className=\"text-xs text-gray-400\">1 hour ago</span>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between py-2\">\r\n                      <span className=\"text-sm text-gray-600\">Credit report updated: Jane Smith</span>\r\n                      <span className=\"text-xs text-gray-400\">2 hours ago</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            // Placeholder for other sections\r\n            <div className=\"bg-white p-8 rounded-lg shadow-sm border border-gray-200 text-center\">\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\r\n                {navigationItems.flatMap(s => s.items).find(i => i.id === activeSection)?.label}\r\n              </h2>\r\n              <p className=\"text-gray-600 mb-6\">This feature is coming soon...</p>\r\n              <div className=\"flex justify-center\">\r\n                {navigationItems.flatMap(s => s.items).find(i => i.id === activeSection)?.icon && \r\n                  React.createElement(navigationItems.flatMap(s => s.items).find(i => i.id === activeSection).icon, \r\n                  { className: \"h-16 w-16 text-gray-400\" })\r\n                }\r\n              </div>\r\n            </div>\r\n          )}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CRMLayout;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\api\\webhooks\\myaifrontdesk.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\authContext.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\auth\\AuthProvider.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'handleGoogleRedirectOnce' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":34},{"ruleId":"no-unused-vars","severity":1,"message":"'mounted' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":21,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'c' is defined but never used. Allowed unused args must match /^_/u.","line":36,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useMemo, useState, useRef } from \"react\";\r\nimport { onAuthStateChanged, getRedirectResult, signInWithRedirect, signOut as firebaseSignOut } from \"firebase/auth\";\r\nimport { auth, googleProvider } from \"@/lib/firebase\";\r\nimport { handleGoogleRedirectOnce } from \"@/auth/google\";\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  loading: true,\r\n  claims: {},\r\n  signInWithGoogleRedirect: async () => {},\r\n  signOut: async () => {},\r\n});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [bootstrapped, setBootstrapped] = useState(false);\r\n  const [claims, setClaims] = useState({});\r\n  const handledRedirectRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    // One-time: handle Google redirect result so we don't bounce back to /login\r\n    if (!handledRedirectRef.current) {\r\n      handledRedirectRef.current = true;\r\n      getRedirectResult(auth).catch((e) => {\r\n        // swallow expected \"no redirect\" errors\r\n        console.debug(\"[Auth] getRedirectResult:\", e?.code || e?.message || e);\r\n      });\r\n    }\r\n    // Now watch the auth state and only then finish initializing.\r\n    const unsub = onAuthStateChanged(auth, async (u) => {\r\n      setUser(u ?? null);\r\n      if (u) {\r\n        try {\r\n          const tokenResult = await u.getIdTokenResult(true);\r\n          setClaims((c) => ({ ...tokenResult.claims }));\r\n        } catch (err) {\r\n          console.error(\"[Auth] token/claims error:\", err);\r\n          setClaims({});\r\n        }\r\n      } else {\r\n        setClaims({});\r\n      }\r\n      setBootstrapped(true);\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  const signInWithGoogleRedirect = async () => {\r\n    await signInWithRedirect(auth, googleProvider);\r\n  };\r\n\r\n  const signOut = async () => {\r\n    await firebaseSignOut(auth);\r\n  };\r\n\r\n  const value = useMemo(\r\n    () => ({ user, loading: !bootstrapped, claims, signInWithGoogleRedirect, signOut }),\r\n    [user, bootstrapped, claims]\r\n  );\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\auth\\firebase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\auth\\google.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\branding\\brand-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\branding\\theme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\branding\\theme.jsx","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":70,"column":59,"nodeType":"BlockStatement","messageId":"unexpected","endLine":70,"endColumn":61,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1883,1883],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useMemo, useState } from \"react\";\r\n\r\nexport const BRAND_THEMES = {\r\n  speedy: {\r\n    id: \"speedy\",\r\n    name: \"Speedy Credit Repair\",\r\n    logo: \"/logo-transparent-1200.png\",\r\n    colors: {\r\n      primary: \"#1C9A3E\",\r\n      primaryDark: \"#157A31\",\r\n      secondary: \"#003C71\",\r\n      bg: \"#0C1116\",\r\n      panel: \"rgba(255,255,255,0.05)\",\r\n      text: \"#EAF7EF\",\r\n      kpiUp: \"#22c55e\",\r\n      kpiDown: \"#ef4444\",\r\n      accent: \"linear-gradient(135deg, #1C9A3E 0%, #003C71 100%)\"\r\n    },\r\n  },\r\n  generic: {\r\n    id: \"generic\",\r\n    name: \"Generic\",\r\n    logo: \"/generic/logo.svg\",\r\n    colors: {\r\n      primary: \"#4f46e5\",\r\n      primaryDark: \"#4338ca\",\r\n      secondary: \"#10b981\",\r\n      bg: \"#0B0F14\",\r\n      panel: \"rgba(255,255,255,0.06)\",\r\n      text: \"#E6F0FF\",\r\n      kpiUp: \"#22c55e\",\r\n      kpiDown: \"#ef4444\",\r\n      accent: \"linear-gradient(135deg, #4f46e5 0%, #10b981 100%)\"\r\n    },\r\n  },\r\n  legacy: {\r\n    id: \"legacy\",\r\n    name: \"Legacy\",\r\n    logo: null,\r\n    colors: null,\r\n  }\r\n};\r\n\r\nconst THEME_KEY = \"mcc_ui_theme\";\r\n\r\nfunction readQueryTheme() {\r\n  if (typeof window === \"undefined\") return null;\r\n  const p = new URLSearchParams(window.location.search);\r\n  const t = p.get(\"theme\");\r\n  return t && BRAND_THEMES[t] ? t : null;\r\n}\r\nfunction readStoredTheme() {\r\n  if (typeof window === \"undefined\") return null;\r\n  try { return localStorage.getItem(THEME_KEY); } catch { return null; }\r\n}\r\nexport function getInitialTheme() {\r\n  return readQueryTheme() || readStoredTheme() || \"speedy\";\r\n}\r\n\r\nconst BrandingContext = createContext({\r\n  theme: \"speedy\",\r\n  setTheme: () => {},\r\n  brand: BRAND_THEMES.speedy,\r\n});\r\n\r\nexport function BrandingProvider({ children }) {\r\n  const [theme, setTheme] = useState(getInitialTheme());\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem(THEME_KEY, theme); } catch {}\r\n  }, [theme]);\r\n\r\n  const brand = useMemo(() => BRAND_THEMES[theme] || BRAND_THEMES.speedy, [theme]);\r\n\r\n  useEffect(() => {\r\n    if (brand.colors) {\r\n      document.documentElement.style.setProperty(\"--brand-primary\", brand.colors.primary);\r\n      document.documentElement.style.setProperty(\"--brand-panel\", brand.colors.panel);\r\n      document.documentElement.style.setProperty(\"--brand-text\", brand.colors.text);\r\n      document.documentElement.style.setProperty(\"--brand-bg\", brand.colors.bg);\r\n    }\r\n  }, [brand]);\r\n\r\n  return (\r\n    <BrandingContext.Provider value={{ theme, setTheme, brand }}>\r\n      {children}\r\n    </BrandingContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useBranding() {\r\n  return useContext(BrandingContext);\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\client\\ClientLayout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\client\\auth\\ClientLogin.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\client\\auth\\InviteAccept.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\client\\pages\\Messages.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\client\\pages\\Profile.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\client\\router\\ClientProtectedRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\client\\router\\clientRoutes.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AIActivityFeed.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused args must match /^_/u.","line":47,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, query, orderBy, limit, onSnapshot } from 'firebase/firestore';\r\n\r\nfunction getScoreColor(score) {\r\n  if (score >= 8) return 'border-green-500 bg-green-50';\r\n  if (score >= 5) return 'border-blue-500 bg-blue-50';\r\n  return 'border-gray-400 bg-gray-50';\r\n}\r\n\r\nfunction getActivityIcons(call) {\r\n  const icons = [];\r\n  icons.push(<span key=\"phone\" title=\"Call\" className=\"mr-1\">📞</span>);\r\n  if (call.leadScore >= 8) icons.push(<span key=\"star\" title=\"High Score\" className=\"mr-1\">⭐</span>);\r\n  if (call.texts_sent && call.texts_sent.length > 0) icons.push(<span key=\"msg\" title=\"Texts Sent\" className=\"mr-1\">💬</span>);\r\n  return icons;\r\n}\r\n\r\nfunction timeSince(dateStr) {\r\n  const date = new Date(dateStr);\r\n  const now = new Date();\r\n  const diff = Math.floor((now - date) / 1000);\r\n  if (diff < 60) return 'just now';\r\n  if (diff < 3600) return `${Math.floor(diff/60)}m ago`;\r\n  if (diff < 86400) return `${Math.floor(diff/3600)}h ago`;\r\n  return `${Math.floor(diff/86400)}d ago`;\r\n}\r\n\r\nexport default function AIActivityFeed() {\r\n  const [calls, setCalls] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [selected, setSelected] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError('');\r\n    const callsRef = collection(db, 'aiReceptionistCalls');\r\n    const q = query(callsRef, orderBy('processedAt', 'desc'), limit(10));\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      const arr = [];\r\n      snapshot.forEach(doc => {\r\n        arr.push({ id: doc.id, ...doc.data() });\r\n      });\r\n      setCalls(arr);\r\n      setLoading(false);\r\n    }, (err) => {\r\n      setError('Error loading activity feed');\r\n      setLoading(false);\r\n    });\r\n    // Live timestamp update\r\n    const interval = setInterval(() => setCalls(calls => [...calls]), 60000);\r\n    return () => { unsubscribe(); clearInterval(interval); };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6 border border-gray-300 max-h-[500px] overflow-y-auto\">\r\n      <h2 className=\"text-2xl font-bold text-blue-700 mb-4\">🤖 AI Receptionist Activity</h2>\r\n      {loading && (\r\n        <div className=\"flex items-center justify-center py-8\">\r\n          <svg className=\"animate-spin h-8 w-8 text-blue-500\" viewBox=\"0 0 24 24\"><circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\" /></svg>\r\n        </div>\r\n      )}\r\n      {error && <div className=\"text-red-600 font-semibold mb-2\">{error}</div>}\r\n      {!loading && calls.length === 0 && (\r\n        <div className=\"text-gray-500 text-center py-8\">No recent AI activity.</div>\r\n      )}\r\n      <ul className=\"space-y-4 flex flex-col-reverse\">\r\n        {calls.map(call => (\r\n          <li key={call.id} className={`border-l-4 p-4 flex flex-col md:flex-row md:items-center justify-between cursor-pointer ${getScoreColor(call.leadScore)}`}\r\n              onClick={() => setSelected(call)}>\r\n            <div className=\"flex-1\">\r\n              <div className=\"flex items-center mb-1\">{getActivityIcons(call)}<span className=\"font-semibold text-lg\">{call.username || call.firstName || 'Unknown'} <span className=\"text-gray-500\">({call.phone})</span></span></div>\r\n              <div className=\"text-sm text-gray-700\">Score: <span className=\"font-bold\">{call.leadScore}</span> | Duration: {call.duration}s</div>\r\n              <div className=\"text-sm text-gray-700\">Summary: {call.summary || 'No summary'}</div>\r\n              <div className=\"text-xs text-gray-500\">{timeSince(call.processedAt || call.timestamp)}</div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {selected && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40\" onClick={() => setSelected(null)}>\r\n          <div className=\"bg-white rounded-lg shadow-lg p-6 w-full max-w-lg mx-auto relative\">\r\n            <button className=\"absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-2xl font-bold\" onClick={() => setSelected(null)}>&times;</button>\r\n            <h3 className=\"text-xl font-bold mb-2\">Full Transcript</h3>\r\n            <div className=\"mb-2 text-sm text-gray-700\"><span className=\"font-semibold\">Caller:</span> {selected.username || selected.firstName || 'Unknown'} ({selected.phone})</div>\r\n            <div className=\"mb-2 text-sm text-gray-700\"><span className=\"font-semibold\">Duration:</span> {selected.duration}s</div>\r\n            <div className=\"mb-2 text-sm text-gray-700\"><span className=\"font-semibold\">Score:</span> {selected.leadScore}</div>\r\n            <div className=\"mb-2 text-sm text-gray-700\"><span className=\"font-semibold\">Summary:</span> {selected.summary || 'No summary'}</div>\r\n            <div className=\"mb-2 text-sm text-gray-700\"><span className=\"font-semibold\">Pain Points:</span> {selected.painPoints && selected.painPoints.length > 0 ? selected.painPoints.join(', ') : 'None'}</div>\r\n            <div className=\"mb-2 text-sm text-gray-700\"><span className=\"font-semibold\">Transcript:</span></div>\r\n            <div className=\"bg-gray-100 rounded p-2 text-xs whitespace-pre-line max-h-64 overflow-y-auto\">{selected.transcript || 'No transcript available.'}</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AIActivityWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'getApiKey' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'logActivity' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { getApiKey } from '../openaiConfig';\r\nimport { logActivity } from '../utils/activityLogger';\r\n\r\n// Demo: Replace with real API calls and activity sources\r\nfunction useAIActivity() {\r\n  const [activity, setActivity] = useState([]);\r\n  useEffect(() => {\r\n    // Simulate polling for activity\r\n    const interval = setInterval(() => {\r\n      setActivity(prev => [\r\n        ...prev,\r\n        {\r\n          type: 'OpenAI',\r\n          action: 'Lead Scored',\r\n          status: 'success',\r\n          cost: Math.random() * 0.02,\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n        {\r\n          type: 'MyAIReceptionist',\r\n          action: 'Webhook Lead Received',\r\n          status: 'success',\r\n          cost: 0,\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      ].slice(-10));\r\n    }, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  return activity;\r\n}\r\n\r\nexport default function AIActivityWidget() {\r\n  const activity = useAIActivity();\r\n  const totalCost = activity.filter(a => a.type === 'OpenAI').reduce((sum, a) => sum + a.cost, 0);\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.7 }}\r\n      className=\"bg-gradient-to-r from-blue-100 via-green-100 to-purple-100 rounded-2xl p-6 shadow-xl glassmorphism mb-6\"\r\n      style={{ backdropFilter: 'blur(12px)', border: '1px solid #e0e7ff' }}\r\n    >\r\n      <h2 className=\"text-xl font-bold mb-2 text-gray-800 dark:text-white\">AI Activity Monitor</h2>\r\n      <div className=\"mb-2 text-sm text-gray-600 dark:text-gray-300\">Total OpenAI Cost: <span className=\"font-bold text-blue-600\">${totalCost.toFixed(4)}</span></div>\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"min-w-full text-sm\">\r\n          <thead>\r\n            <tr className=\"bg-blue-50 dark:bg-gray-800\">\r\n              <th className=\"px-2 py-1\">Time</th>\r\n              <th className=\"px-2 py-1\">System</th>\r\n              <th className=\"px-2 py-1\">Action</th>\r\n              <th className=\"px-2 py-1\">Status</th>\r\n              <th className=\"px-2 py-1\">Cost</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {activity.map((a, i) => (\r\n              <tr key={i} className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                <td className=\"px-2 py-1\">{new Date(a.timestamp).toLocaleTimeString()}</td>\r\n                <td className=\"px-2 py-1 font-semibold\">{a.type}</td>\r\n                <td className=\"px-2 py-1\">{a.action}</td>\r\n                <td className={`px-2 py-1 font-bold ${a.status === 'success' ? 'text-green-600' : 'text-red-600'}`}>{a.status}</td>\r\n                <td className=\"px-2 py-1\">{a.cost ? `$${a.cost.toFixed(4)}` : '-'}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AIIntelligenceDashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ActivityLog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'limit' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":5,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { collection, query, where, orderBy, getDocs } from \"firebase/firestore\";\r\nimport { useAuth } from \"@/contexts/AuthContext\";\r\n\r\nconst ActivityLog = ({ targetType, targetId, limit = 10 }) => {\r\n  const { db } = useAuth();\r\n  const [logs, setLogs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!db || !targetType || !targetId) return;\r\n    (async () => {\r\n      setLoading(true);\r\n      const q = query(\r\n        collection(db, \"activityLogs\"),\r\n        where(\"targetType\", \"==\", targetType),\r\n        where(\"targetId\", \"==\", targetId),\r\n        orderBy(\"timestamp\", \"desc\")\r\n      );\r\n      const snap = await getDocs(q);\r\n      setLogs(snap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n      setLoading(false);\r\n    })();\r\n  }, [db, targetType, targetId]);\r\n\r\n  if (loading) return <div>Loading activity log...</div>;\r\n  if (!logs.length) return <div>No activity yet.</div>;\r\n\r\n  return (\r\n    <div className=\"my-4\">\r\n      <h3 className=\"font-bold mb-2\">Activity Log</h3>\r\n      <ul className=\"text-sm space-y-1\">\r\n        {logs.map(log => (\r\n          <li key={log.id}>\r\n            <span className=\"font-mono text-gray-500\">{log.timestamp?.toDate?.().toLocaleString?.() || \"\"}</span> -\r\n            <span className=\"ml-2\">{log.action}</span>\r\n            {log.details && <span className=\"ml-2 text-gray-400\">({log.details})</span>}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityLog;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AddContactModal copy.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'existingContacts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":6,"column":68,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":84}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, addDoc, doc, updateDoc } from 'firebase/firestore';\r\n\r\nexport default function AddContactModal({ isOpen, onClose, onSave, existingContacts = [], contact = null }) {\r\n  const isEditMode = contact !== null;\r\n  const [form, setForm] = useState({\r\n    prefix: contact?.prefix || '',\r\n    firstName: contact?.firstName || '',\r\n    middleName: contact?.middleName || '',\r\n    lastName: contact?.lastName || '',\r\n    suffix: contact?.suffix || '',\r\n    email: contact?.email || '',\r\n    phone: contact?.phone || '',\r\n    source: contact?.source || '',\r\n    category: contact?.category || '',\r\n    urgencyLevel: contact?.urgencyLevel || '',\r\n    timeline: contact?.timeline || '',\r\n    responseStatus: contact?.responseStatus || '',\r\n    notes: contact?.notes || '',\r\n    conversationNotes: contact?.conversationNotes || '',\r\n    leadScore: contact?.leadScore || '',\r\n    platformResponseTime: contact?.platformResponseTime || '',\r\n    aiCategory: contact?.aiCategory || '',\r\n    budgetMentioned: contact?.budgetMentioned || '',\r\n    streetAddress: contact?.streetAddress || '',\r\n    city: contact?.city || '',\r\n    state: contact?.state || '',\r\n    zipCode: contact?.zipCode || '',\r\n    country: contact?.country || 'United States',\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (contact) {\r\n      setForm({\r\n        prefix: contact.prefix || '',\r\n        firstName: contact.firstName || '',\r\n        middleName: contact.middleName || '',\r\n        lastName: contact.lastName || '',\r\n        suffix: contact.suffix || '',\r\n        email: contact.email || '',\r\n        phone: contact.phone || '',\r\n        source: contact.source || '',\r\n        category: contact.category || '',\r\n        urgencyLevel: contact.urgencyLevel || '',\r\n        timeline: contact.timeline || '',\r\n        responseStatus: contact.responseStatus || '',\r\n        notes: contact.notes || '',\r\n        conversationNotes: contact.conversationNotes || '',\r\n        leadScore: contact.leadScore || '',\r\n        platformResponseTime: contact.platformResponseTime || '',\r\n        aiCategory: contact.aiCategory || '',\r\n        budgetMentioned: contact.budgetMentioned || '',\r\n        streetAddress: contact.streetAddress || '',\r\n        city: contact.city || '',\r\n        state: contact.state || '',\r\n        zipCode: contact.zipCode || '',\r\n        country: contact.country || 'United States',\r\n      });\r\n    }\r\n  }, [contact]);\r\n\r\n  function validate() {\r\n    if (!form.firstName || !form.lastName) return 'First and Last Name are required.';\r\n    if (!form.email && !form.phone) return 'Email or Phone is required.';\r\n    return '';\r\n  }\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setForm(f => ({ ...f, [name]: value }));\r\n    setError('');\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    const err = validate();\r\n    if (err) { setError(err); return; }\r\n    setLoading(true);\r\n    try {\r\n      if (isEditMode) {\r\n        const contactRef = doc(db, 'contacts', contact.id);\r\n        await updateDoc(contactRef, {\r\n          ...form,\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n      } else {\r\n        await addDoc(collection(db, 'contacts'), {\r\n          ...form,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n      }\r\n      if (onSave) onSave();\r\n      onClose();\r\n      if (!isEditMode) {\r\n        setForm({\r\n          prefix: '',\r\n          firstName: '',\r\n          middleName: '',\r\n          lastName: '',\r\n          suffix: '',\r\n          email: '',\r\n          phone: '',\r\n          source: '',\r\n          category: '',\r\n          urgencyLevel: '',\r\n          timeline: '',\r\n          responseStatus: '',\r\n          notes: '',\r\n          conversationNotes: '',\r\n          leadScore: '',\r\n          platformResponseTime: '',\r\n          aiCategory: '',\r\n          budgetMentioned: '',\r\n          streetAddress: '',\r\n          city: '',\r\n          state: '',\r\n          zipCode: '',\r\n          country: 'United States',\r\n        });\r\n      }\r\n      setSuccess(true);\r\n      setTimeout(() => setSuccess(false), 2000);\r\n    } catch (error) {\r\n      console.error('Error saving contact:', error);\r\n      setError('Failed to save contact. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\r\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\" onClick={onClose} aria-label=\"Close modal backdrop\" />\r\n      <div className=\"relative bg-white rounded-lg shadow-lg p-6 w-full max-w-md mx-auto overflow-y-auto max-h-[90vh] flex flex-col\">\r\n        <button type=\"button\" className=\"absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-2xl font-bold\" onClick={onClose} aria-label=\"Close modal\">&times;</button>\r\n        <h2 className=\"text-xl font-bold mb-4 text-center\">{isEditMode ? 'Edit Contact' : 'Add New Contact'}</h2>\r\n        <form onSubmit={handleSubmit} className=\"flex-1 flex flex-col justify-between\">\r\n          <div>\r\n            {loading && <div className=\"text-blue-600 font-semibold mb-2\">Saving contact...</div>}\r\n            {error && <div className=\"text-red-600 font-semibold mb-2\">{error}</div>}\r\n            {/* Basic Info Section */}\r\n            <div className=\"space-y-4 mb-4\">\r\n              <div className=\"flex gap-2\">\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Prefix</label>\r\n                  <input type=\"text\" name=\"prefix\" value={form.prefix} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" placeholder=\"Dr., Mr., Mrs., etc.\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">First Name *</label>\r\n                  <input type=\"text\" name=\"firstName\" value={form.firstName} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" required />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Middle Name</label>\r\n                  <input type=\"text\" name=\"middleName\" value={form.middleName} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Last Name *</label>\r\n                  <input type=\"text\" name=\"lastName\" value={form.lastName} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" required />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Suffix</label>\r\n                  <input type=\"text\" name=\"suffix\" value={form.suffix} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" placeholder=\"Jr., Sr., III, etc.\" />\r\n                </div>\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n                  <input type=\"email\" name=\"email\" value={form.email} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Phone</label>\r\n                  <input type=\"tel\" name=\"phone\" value={form.phone} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* Address Information Section */}\r\n            <div className=\"space-y-4 mb-4\">\r\n              <h3 className=\"text-md font-semibold text-gray-800 mb-2\">Address Information</h3>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Street Address</label>\r\n                <input type=\"text\" name=\"streetAddress\" value={form.streetAddress} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">City</label>\r\n                  <input type=\"text\" name=\"city\" value={form.city} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">State</label>\r\n                  <select name=\"state\" value={form.state} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                    <option value=\"\">Select State</option>\r\n                    <option value=\"AL\">Alabama</option>\r\n                    <option value=\"AK\">Alaska</option>\r\n                    <option value=\"AZ\">Arizona</option>\r\n                    <option value=\"AR\">Arkansas</option>\r\n                    <option value=\"CA\">California</option>\r\n                    <option value=\"CO\">Colorado</option>\r\n                    <option value=\"CT\">Connecticut</option>\r\n                    <option value=\"DE\">Delaware</option>\r\n                    <option value=\"FL\">Florida</option>\r\n                    <option value=\"GA\">Georgia</option>\r\n                    <option value=\"HI\">Hawaii</option>\r\n                    <option value=\"ID\">Idaho</option>\r\n                    <option value=\"IL\">Illinois</option>\r\n                    <option value=\"IN\">Indiana</option>\r\n                    <option value=\"IA\">Iowa</option>\r\n                    <option value=\"KS\">Kansas</option>\r\n                    <option value=\"KY\">Kentucky</option>\r\n                    <option value=\"LA\">Louisiana</option>\r\n                    <option value=\"ME\">Maine</option>\r\n                    <option value=\"MD\">Maryland</option>\r\n                    <option value=\"MA\">Massachusetts</option>\r\n                    <option value=\"MI\">Michigan</option>\r\n                    <option value=\"MN\">Minnesota</option>\r\n                    <option value=\"MS\">Mississippi</option>\r\n                    <option value=\"MO\">Missouri</option>\r\n                    <option value=\"MT\">Montana</option>\r\n                    <option value=\"NE\">Nebraska</option>\r\n                    <option value=\"NV\">Nevada</option>\r\n                    <option value=\"NH\">New Hampshire</option>\r\n                    <option value=\"NJ\">New Jersey</option>\r\n                    <option value=\"NM\">New Mexico</option>\r\n                    <option value=\"NY\">New York</option>\r\n                    <option value=\"NC\">North Carolina</option>\r\n                    <option value=\"ND\">North Dakota</option>\r\n                    <option value=\"OH\">Ohio</option>\r\n                    <option value=\"OK\">Oklahoma</option>\r\n                    <option value=\"OR\">Oregon</option>\r\n                    <option value=\"PA\">Pennsylvania</option>\r\n                    <option value=\"RI\">Rhode Island</option>\r\n                    <option value=\"SC\">South Carolina</option>\r\n                    <option value=\"SD\">South Dakota</option>\r\n                    <option value=\"TN\">Tennessee</option>\r\n                    <option value=\"TX\">Texas</option>\r\n                    <option value=\"UT\">Utah</option>\r\n                    <option value=\"VT\">Vermont</option>\r\n                    <option value=\"VA\">Virginia</option>\r\n                    <option value=\"WA\">Washington</option>\r\n                    <option value=\"WV\">West Virginia</option>\r\n                    <option value=\"WI\">Wisconsin</option>\r\n                    <option value=\"WY\">Wyoming</option>\r\n                  </select>\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">ZIP Code</label>\r\n                  <input type=\"text\" name=\"zipCode\" value={form.zipCode} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Country</label>\r\n                  <input type=\"text\" name=\"country\" value={form.country} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" placeholder=\"United States\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* Categorization Section */}\r\n            <div className=\"space-y-4 mb-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Lead Source</label>\r\n                <select name=\"source\" value={form.source} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Source</option>\r\n                  <option value=\"Website\">Website</option>\r\n                  <option value=\"Yelp\">Yelp</option>\r\n                  <option value=\"Google\">Google</option>\r\n                  <option value=\"Facebook\">Facebook</option>\r\n                  <option value=\"LinkedIn\">LinkedIn</option>\r\n                  <option value=\"Phone Call\">Phone Call</option>\r\n                  <option value=\"Referral\">Referral</option>\r\n                  <option value=\"Walk-in\">Walk-in</option>\r\n                  <option value=\"Other\">Other</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Urgency Level</label>\r\n                <select name=\"urgencyLevel\" value={form.urgencyLevel} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Urgency</option>\r\n                  <option value=\"Low\">Low</option>\r\n                  <option value=\"Medium\">Medium</option>\r\n                  <option value=\"High\">High</option>\r\n                  <option value=\"Critical\">Critical</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Category</label>\r\n                <select name=\"category\" value={form.category} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Category</option>\r\n                  <option value=\"Lead\">Lead</option>\r\n                  <option value=\"Client\">Client</option>\r\n                  <option value=\"Vendor\">Vendor</option>\r\n                  <option value=\"Affiliate\">Affiliate</option>\r\n                  <option value=\"Professional\">Professional</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Timeline</label>\r\n                <select name=\"timeline\" value={form.timeline} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Timeline</option>\r\n                  <option value=\"ASAP\">ASAP</option>\r\n                  <option value=\"This Week\">This Week</option>\r\n                  <option value=\"This Month\">This Month</option>\r\n                  <option value=\"Next Month\">Next Month</option>\r\n                  <option value=\"3+ Months\">3+ Months</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Response Status</label>\r\n                <select name=\"responseStatus\" value={form.responseStatus} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Status</option>\r\n                  <option value=\"Pending\">Pending</option>\r\n                  <option value=\"Responded\">Responded</option>\r\n                  <option value=\"Escalated\">Escalated</option>\r\n                  <option value=\"Closed\">Closed</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            {/* Advanced Intelligence Section */}\r\n            <div className=\"space-y-4 mb-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Lead Score</label>\r\n                <input type=\"number\" name=\"leadScore\" value={form.leadScore} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" min=\"1\" max=\"10\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Platform Response Time</label>\r\n                <input type=\"text\" name=\"platformResponseTime\" value={form.platformResponseTime} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">AI Category</label>\r\n                <input type=\"text\" name=\"aiCategory\" value={form.aiCategory} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Budget Mentioned</label>\r\n                <input type=\"text\" name=\"budgetMentioned\" value={form.budgetMentioned} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Conversation Notes</label>\r\n                <textarea name=\"conversationNotes\" value={form.conversationNotes} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" rows={2} />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">General Notes</label>\r\n                <textarea name=\"notes\" value={form.notes} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" rows={2} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-end space-x-3 mt-6\">\r\n            <button type=\"button\" onClick={onClose} className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50\">Cancel</button>\r\n            <button type=\"submit\" className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\" disabled={loading}>{loading ? 'Saving...' : (isEditMode ? 'Save Changes' : 'Add Contact')}</button>\r\n          </div>\r\n          {success && <div className=\"text-green-600 font-semibold mt-4\">Contact saved!</div>}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AddContactModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'existingContacts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":6,"column":68,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":84}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, addDoc, doc, updateDoc } from 'firebase/firestore';\r\n\r\nexport default function AddContactModal({ isOpen, onClose, onSave, existingContacts = [], contact = null }) {\r\n  const isEditMode = contact !== null;\r\n  const [form, setForm] = useState({\r\n    prefix: contact?.prefix || '',\r\n    firstName: contact?.firstName || '',\r\n    middleName: contact?.middleName || '',\r\n    lastName: contact?.lastName || '',\r\n    suffix: contact?.suffix || '',\r\n    email: contact?.email || '',\r\n    phone: contact?.phone || '',\r\n    source: contact?.source || '',\r\n    category: contact?.category || '',\r\n    urgencyLevel: contact?.urgencyLevel || '',\r\n    timeline: contact?.timeline || '',\r\n    responseStatus: contact?.responseStatus || '',\r\n    notes: contact?.notes || '',\r\n    conversationNotes: contact?.conversationNotes || '',\r\n    leadScore: contact?.leadScore || '',\r\n    platformResponseTime: contact?.platformResponseTime || '',\r\n    aiCategory: contact?.aiCategory || '',\r\n    budgetMentioned: contact?.budgetMentioned || '',\r\n    streetAddress: contact?.streetAddress || '',\r\n    city: contact?.city || '',\r\n    state: contact?.state || '',\r\n    zipCode: contact?.zipCode || '',\r\n    country: contact?.country || 'United States',\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (contact) {\r\n      setForm({\r\n        prefix: contact.prefix || '',\r\n        firstName: contact.firstName || '',\r\n        middleName: contact.middleName || '',\r\n        lastName: contact.lastName || '',\r\n        suffix: contact.suffix || '',\r\n        email: contact.email || '',\r\n        phone: contact.phone || '',\r\n        source: contact.source || '',\r\n        category: contact.category || '',\r\n        urgencyLevel: contact.urgencyLevel || '',\r\n        timeline: contact.timeline || '',\r\n        responseStatus: contact.responseStatus || '',\r\n        notes: contact.notes || '',\r\n        conversationNotes: contact.conversationNotes || '',\r\n        leadScore: contact.leadScore || '',\r\n        platformResponseTime: contact.platformResponseTime || '',\r\n        aiCategory: contact.aiCategory || '',\r\n        budgetMentioned: contact.budgetMentioned || '',\r\n        streetAddress: contact.streetAddress || '',\r\n        city: contact.city || '',\r\n        state: contact.state || '',\r\n        zipCode: contact.zipCode || '',\r\n        country: contact.country || 'United States',\r\n      });\r\n    }\r\n  }, [contact]);\r\n\r\n  function validate() {\r\n    if (!form.firstName || !form.lastName) return 'First and Last Name are required.';\r\n    if (!form.email && !form.phone) return 'Email or Phone is required.';\r\n    return '';\r\n  }\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setForm(f => ({ ...f, [name]: value }));\r\n    setError('');\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    const err = validate();\r\n    if (err) { setError(err); return; }\r\n    setLoading(true);\r\n    try {\r\n      if (isEditMode) {\r\n        const contactRef = doc(db, 'contacts', contact.id);\r\n        await updateDoc(contactRef, {\r\n          ...form,\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n      } else {\r\n        await addDoc(collection(db, 'contacts'), {\r\n          ...form,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n      }\r\n      if (onSave) onSave();\r\n      onClose();\r\n      if (!isEditMode) {\r\n        setForm({\r\n          prefix: '',\r\n          firstName: '',\r\n          middleName: '',\r\n          lastName: '',\r\n          suffix: '',\r\n          email: '',\r\n          phone: '',\r\n          source: '',\r\n          category: '',\r\n          urgencyLevel: '',\r\n          timeline: '',\r\n          responseStatus: '',\r\n          notes: '',\r\n          conversationNotes: '',\r\n          leadScore: '',\r\n          platformResponseTime: '',\r\n          aiCategory: '',\r\n          budgetMentioned: '',\r\n          streetAddress: '',\r\n          city: '',\r\n          state: '',\r\n          zipCode: '',\r\n          country: 'United States',\r\n        });\r\n      }\r\n      setSuccess(true);\r\n      setTimeout(() => setSuccess(false), 2000);\r\n    } catch (error) {\r\n      console.error('Error saving contact:', error);\r\n      setError('Failed to save contact. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\r\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\" onClick={onClose} aria-label=\"Close modal backdrop\" />\r\n      <div className=\"relative bg-white rounded-lg shadow-lg p-6 w-full max-w-md mx-auto overflow-y-auto max-h-[90vh] flex flex-col\">\r\n        <button type=\"button\" className=\"absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-2xl font-bold\" onClick={onClose} aria-label=\"Close modal\">&times;</button>\r\n        <h2 className=\"text-xl font-bold mb-4 text-center\">{isEditMode ? 'Edit Contact' : 'Add New Contact'}</h2>\r\n        <form onSubmit={handleSubmit} className=\"flex-1 flex flex-col justify-between\">\r\n          <div>\r\n            {loading && <div className=\"text-blue-600 font-semibold mb-2\">Saving contact...</div>}\r\n            {error && <div className=\"text-red-600 font-semibold mb-2\">{error}</div>}\r\n            {/* Basic Info Section */}\r\n            <div className=\"space-y-4 mb-4\">\r\n              <div className=\"flex gap-2\">\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Prefix</label>\r\n                  <input type=\"text\" name=\"prefix\" value={form.prefix} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" placeholder=\"Dr., Mr., Mrs., etc.\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">First Name *</label>\r\n                  <input type=\"text\" name=\"firstName\" value={form.firstName} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" required />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Middle Name</label>\r\n                  <input type=\"text\" name=\"middleName\" value={form.middleName} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Last Name *</label>\r\n                  <input type=\"text\" name=\"lastName\" value={form.lastName} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" required />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Suffix</label>\r\n                  <input type=\"text\" name=\"suffix\" value={form.suffix} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" placeholder=\"Jr., Sr., III, etc.\" />\r\n                </div>\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n                  <input type=\"email\" name=\"email\" value={form.email} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Phone</label>\r\n                  <input type=\"tel\" name=\"phone\" value={form.phone} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* Address Information Section */}\r\n            <div className=\"space-y-4 mb-4\">\r\n              <h3 className=\"text-md font-semibold text-gray-800 mb-2\">Address Information</h3>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Street Address</label>\r\n                <input type=\"text\" name=\"streetAddress\" value={form.streetAddress} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">City</label>\r\n                  <input type=\"text\" name=\"city\" value={form.city} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">State</label>\r\n                  <select name=\"state\" value={form.state} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                    <option value=\"\">Select State</option>\r\n                    <option value=\"AL\">Alabama</option>\r\n                    <option value=\"AK\">Alaska</option>\r\n                    <option value=\"AZ\">Arizona</option>\r\n                    <option value=\"AR\">Arkansas</option>\r\n                    <option value=\"CA\">California</option>\r\n                    <option value=\"CO\">Colorado</option>\r\n                    <option value=\"CT\">Connecticut</option>\r\n                    <option value=\"DE\">Delaware</option>\r\n                    <option value=\"FL\">Florida</option>\r\n                    <option value=\"GA\">Georgia</option>\r\n                    <option value=\"HI\">Hawaii</option>\r\n                    <option value=\"ID\">Idaho</option>\r\n                    <option value=\"IL\">Illinois</option>\r\n                    <option value=\"IN\">Indiana</option>\r\n                    <option value=\"IA\">Iowa</option>\r\n                    <option value=\"KS\">Kansas</option>\r\n                    <option value=\"KY\">Kentucky</option>\r\n                    <option value=\"LA\">Louisiana</option>\r\n                    <option value=\"ME\">Maine</option>\r\n                    <option value=\"MD\">Maryland</option>\r\n                    <option value=\"MA\">Massachusetts</option>\r\n                    <option value=\"MI\">Michigan</option>\r\n                    <option value=\"MN\">Minnesota</option>\r\n                    <option value=\"MS\">Mississippi</option>\r\n                    <option value=\"MO\">Missouri</option>\r\n                    <option value=\"MT\">Montana</option>\r\n                    <option value=\"NE\">Nebraska</option>\r\n                    <option value=\"NV\">Nevada</option>\r\n                    <option value=\"NH\">New Hampshire</option>\r\n                    <option value=\"NJ\">New Jersey</option>\r\n                    <option value=\"NM\">New Mexico</option>\r\n                    <option value=\"NY\">New York</option>\r\n                    <option value=\"NC\">North Carolina</option>\r\n                    <option value=\"ND\">North Dakota</option>\r\n                    <option value=\"OH\">Ohio</option>\r\n                    <option value=\"OK\">Oklahoma</option>\r\n                    <option value=\"OR\">Oregon</option>\r\n                    <option value=\"PA\">Pennsylvania</option>\r\n                    <option value=\"RI\">Rhode Island</option>\r\n                    <option value=\"SC\">South Carolina</option>\r\n                    <option value=\"SD\">South Dakota</option>\r\n                    <option value=\"TN\">Tennessee</option>\r\n                    <option value=\"TX\">Texas</option>\r\n                    <option value=\"UT\">Utah</option>\r\n                    <option value=\"VT\">Vermont</option>\r\n                    <option value=\"VA\">Virginia</option>\r\n                    <option value=\"WA\">Washington</option>\r\n                    <option value=\"WV\">West Virginia</option>\r\n                    <option value=\"WI\">Wisconsin</option>\r\n                    <option value=\"WY\">Wyoming</option>\r\n                  </select>\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">ZIP Code</label>\r\n                  <input type=\"text\" name=\"zipCode\" value={form.zipCode} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">Country</label>\r\n                  <input type=\"text\" name=\"country\" value={form.country} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" placeholder=\"United States\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* Categorization Section */}\r\n            <div className=\"space-y-4 mb-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Lead Source</label>\r\n                <select name=\"source\" value={form.source} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Source</option>\r\n                  <option value=\"Website\">Website</option>\r\n                  <option value=\"Yelp\">Yelp</option>\r\n                  <option value=\"Google\">Google</option>\r\n                  <option value=\"Facebook\">Facebook</option>\r\n                  <option value=\"LinkedIn\">LinkedIn</option>\r\n                  <option value=\"Phone Call\">Phone Call</option>\r\n                  <option value=\"Referral\">Referral</option>\r\n                  <option value=\"Walk-in\">Walk-in</option>\r\n                  <option value=\"Other\">Other</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Urgency Level</label>\r\n                <select name=\"urgencyLevel\" value={form.urgencyLevel} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Urgency</option>\r\n                  <option value=\"Low\">Low</option>\r\n                  <option value=\"Medium\">Medium</option>\r\n                  <option value=\"High\">High</option>\r\n                  <option value=\"Critical\">Critical</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Category</label>\r\n                <select name=\"category\" value={form.category} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Category</option>\r\n                  <option value=\"Lead\">Lead</option>\r\n                  <option value=\"Client\">Client</option>\r\n                  <option value=\"Vendor\">Vendor</option>\r\n                  <option value=\"Affiliate\">Affiliate</option>\r\n                  <option value=\"Professional\">Professional</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Timeline</label>\r\n                <select name=\"timeline\" value={form.timeline} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Timeline</option>\r\n                  <option value=\"ASAP\">ASAP</option>\r\n                  <option value=\"This Week\">This Week</option>\r\n                  <option value=\"This Month\">This Month</option>\r\n                  <option value=\"Next Month\">Next Month</option>\r\n                  <option value=\"3+ Months\">3+ Months</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Response Status</label>\r\n                <select name=\"responseStatus\" value={form.responseStatus} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\">\r\n                  <option value=\"\">Select Status</option>\r\n                  <option value=\"Pending\">Pending</option>\r\n                  <option value=\"Responded\">Responded</option>\r\n                  <option value=\"Escalated\">Escalated</option>\r\n                  <option value=\"Closed\">Closed</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            {/* Advanced Intelligence Section */}\r\n            <div className=\"space-y-4 mb-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Lead Score</label>\r\n                <input type=\"number\" name=\"leadScore\" value={form.leadScore} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" min=\"1\" max=\"10\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Platform Response Time</label>\r\n                <input type=\"text\" name=\"platformResponseTime\" value={form.platformResponseTime} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">AI Category</label>\r\n                <input type=\"text\" name=\"aiCategory\" value={form.aiCategory} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Budget Mentioned</label>\r\n                <input type=\"text\" name=\"budgetMentioned\" value={form.budgetMentioned} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Conversation Notes</label>\r\n                <textarea name=\"conversationNotes\" value={form.conversationNotes} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" rows={2} />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">General Notes</label>\r\n                <textarea name=\"notes\" value={form.notes} onChange={handleChange} className=\"mt-1 block w-full border rounded-md px-3 py-2\" rows={2} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-end space-x-3 mt-6\">\r\n            <button type=\"button\" onClick={onClose} className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50\">Cancel</button>\r\n            <button type=\"submit\" className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\" disabled={loading}>{loading ? 'Saving...' : (isEditMode ? 'Save Changes' : 'Add Contact')}</button>\r\n          </div>\r\n          {success && <div className=\"text-green-600 font-semibold mt-4\">Contact saved!</div>}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AddLeadModal.jsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: 'return' outside of function","line":198,"column":16,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Platform-specific requirements\r\nconst platformRequirements = {\r\n  Yelp: {\r\n    required: ['businessName', 'reviewUrl'],\r\n    helperText: 'Yelp requires business name and review URL for response tracking.'\r\n  },\r\n  'Google My Business': {\r\n    required: ['businessName', 'reviewUrl'],\r\n    helperText: 'Google My Business requires business name and review URL.'\r\n  },\r\n  Facebook: {\r\n    required: ['pageUrl', 'profileUrl'],\r\n    helperText: 'Facebook requires page or profile URL.'\r\n  },\r\n  LinkedIn: {\r\n    required: ['profileUrl', 'companyUrl'],\r\n    helperText: 'LinkedIn requires profile or company URL.'\r\n  },\r\n  'AI Receptionist': {\r\n    required: ['callDuration', 'callRecordingUrl'],\r\n    helperText: 'AI Receptionist requires call duration and recording URL.'\r\n  },\r\n  Website: {\r\n    required: ['formName', 'pageUrl'],\r\n    helperText: 'Website requires form name and page URL.'\r\n  },\r\n  Affiliate: {\r\n    required: ['affiliateName', 'referralCode'],\r\n    helperText: 'Affiliate requires affiliate name and referral code.'\r\n  }\r\n};\r\n// Platform-specific validation\r\nfunction validatePlatformFields(formData) {\r\n  const req = platformRequirements[formData.source];\r\n  if (!req) return {};\r\n  const errors = {};\r\n  req.required.forEach(field => {\r\n    if (!formData[field]) errors[field] = true;\r\n  });\r\n  return errors;\r\n}\r\nimport React, { useState, useRef } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, addDoc } from 'firebase/firestore';\r\n\r\nconst AddLeadModal = ({ isOpen, onClose, onSave }) => {\r\n  const LEAD_SOURCES = [\r\n    'AI Receptionist', 'Website Form', 'Affiliate Link', 'Yelp', 'Google My Business', 'Facebook', 'LinkedIn', 'Live Call', 'Walk-in', 'Referral', 'Email Inquiry'\r\n  ];\r\n  const URGENCY_LEVELS = ['Low', 'Medium', 'High', 'Critical'];\r\n  const TIMELINE_OPTIONS = ['Immediate', '1-2 weeks', '1 month', '3+ months', 'Undecided'];\r\n\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    source: LEAD_SOURCES[0],\r\n    status: 'New',\r\n    notes: '',\r\n    platformResponseTime: '',\r\n    conversationNotes: '',\r\n    leadScore: '',\r\n    urgencyLevel: URGENCY_LEVELS[0],\r\n    budgetMentioned: '',\r\n    timeline: TIMELINE_OPTIONS[0]\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const [platformFieldErrors, setPlatformFieldErrors] = useState({});\r\n  const [activeTab, setActiveTab] = useState('single');\r\n  const [csvPreview, setCsvPreview] = useState([]);\r\n  const [csvRows, setCsvRows] = useState([]);\r\n  const [importProgress, setImportProgress] = useState(0);\r\n  const [duplicateModal, setDuplicateModal] = useState(null);\r\n  const [potentialDuplicate, setPotentialDuplicate] = useState(null);\r\n  const fileInputRef = useRef();\r\n\r\n  // Duplicate detection (Prompt #10)\r\n  const checkDuplicate = async (contact) => {\r\n    // Query Firestore for similar name, email, or phone\r\n    // For demo: simulate with empty result (replace with Firestore query in production)\r\n    // TODO: Replace with actual Firestore query for contacts\r\n    return null;\r\n  };\r\n\r\n  // Bulk Import CSV parsing (Prompt #9)\r\n  const handleCsvUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      const text = evt.target.result;\r\n      const rows = text.split(/\\r?\\n/).filter(r => r.trim());\r\n      const headers = rows[0].split(',').map(h => h.trim());\r\n      const dataRows = rows.slice(1).map(row => {\r\n        const cols = row.split(',');\r\n        let obj = {};\r\n        headers.forEach((h, i) => {\r\n          obj[h] = cols[i] || '';\r\n        });\r\n        return obj;\r\n      });\r\n      setCsvPreview(dataRows.slice(0, 5));\r\n      setCsvRows(dataRows);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  const handleBulkImport = async () => {\r\n    setLoading(true);\r\n    setImportProgress(0);\r\n    let imported = 0;\r\n    for (let i = 0; i < csvRows.length; i++) {\r\n      const row = csvRows[i];\r\n      // Map CSV columns to Firestore contact fields\r\n      const contactData = {\r\n        firstName: row.name?.split(' ')[0] || '',\r\n        lastName: row.name?.split(' ').slice(1).join(' ') || '',\r\n        email: row.email || '',\r\n        phone: row.phone || '',\r\n        source: row.leadSource || '',\r\n        businessListing: row.businessListing || '',\r\n        profileUrl: row.profileUrl || '',\r\n        notes: row.notes || '',\r\n        createdAt: new Date().toISOString(),\r\n        status: 'New',\r\n      };\r\n      // TODO: Add duplicate detection here if needed\r\n      await addDoc(collection(db, 'contacts'), contactData);\r\n      imported++;\r\n      setImportProgress(Math.round((imported / csvRows.length) * 100));\r\n    }\r\n    setLoading(false);\r\n    setSuccess(true);\r\n    setTimeout(() => { setSuccess(false); onClose(); }, 1500);\r\n  };\r\n    if (!formData.firstName || !formData.lastName || !formData.email) return 'Name and Email are required.';\r\n    if (!formData.source) return 'Lead Source is required.';\r\n    if (!formData.urgencyLevel) return 'Urgency Level is required.';\r\n    if (!formData.leadScore) return 'Lead Score is required.';\r\n    if (!formData.timeline) return 'Timeline is required.';\r\n    return '';\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    const err = validate();\r\n    const platformErrs = validatePlatformFields(formData);\r\n    setPlatformFieldErrors(platformErrs);\r\n    if (err) { setError(err); return; }\r\n    if (Object.keys(platformErrs).length > 0) {\r\n      setError('Missing required platform-specific fields.');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    // Duplicate detection\r\n    const duplicate = await checkDuplicate(formData);\r\n    if (duplicate) {\r\n      setPotentialDuplicate(duplicate);\r\n      setDuplicateModal(true);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    try {\r\n      const contactData = { ...formData, createdAt: new Date().toISOString() };\r\n      const docRef = await addDoc(collection(db, 'contacts'), contactData);\r\n      // ...removed for production...\r\n      setSuccess(true);\r\n      setFormData({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phone: '',\r\n        source: LEAD_SOURCES[0],\r\n        status: 'New',\r\n        notes: '',\r\n        platformResponseTime: '',\r\n        conversationNotes: '',\r\n        leadScore: '',\r\n        urgencyLevel: URGENCY_LEVELS[0],\r\n        budgetMentioned: '',\r\n        timeline: TIMELINE_OPTIONS[0]\r\n      });\r\n      if (onSave) onSave({ id: docRef.id, ...contactData });\r\n      setTimeout(() => { setSuccess(false); onClose(); }, 1500);\r\n    } catch (err) {\r\n      console.error('Error saving contact:', err);\r\n      setError('Failed to save contact. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n        <h2 className=\"text-xl font-bold mb-4\">Add New Lead</h2>\r\n        <div className=\"flex space-x-4 mb-4\">\r\n          <button className={`px-3 py-1 rounded ${activeTab === 'single' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`} onClick={() => setActiveTab('single')}>Single Add</button>\r\n          <button className={`px-3 py-1 rounded ${activeTab === 'bulk' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`} onClick={() => setActiveTab('bulk')}>Bulk Import</button>\r\n        </div>\r\n        {activeTab === 'single' && (\r\n          <form onSubmit={handleSubmit}>\r\n            {loading && <div className=\"text-blue-600 font-semibold mb-2\">Saving contact...</div>}\r\n            {error && <div className=\"text-red-600 font-semibold mb-2\">{error}</div>}\r\n            <div className=\"space-y-4\">\r\n              {/* ...existing code... (all single add fields) */}\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">First Name</label>\r\n                <input type=\"text\" value={formData.firstName} onChange={e => setFormData({ ...formData, firstName: e.target.value })} className={`mt-1 block w-full border rounded-md px-3 py-2 ${platformFieldErrors.firstName ? 'border-red-500' : 'border-gray-300'}`} required />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Last Name</label>\r\n                <input type=\"text\" value={formData.lastName} onChange={e => setFormData({ ...formData, lastName: e.target.value })} className={`mt-1 block w-full border rounded-md px-3 py-2 ${platformFieldErrors.lastName ? 'border-red-500' : 'border-gray-300'}`} required />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n                <input type=\"email\" value={formData.email} onChange={e => setFormData({ ...formData, email: e.target.value })} className={`mt-1 block w-full border rounded-md px-3 py-2 ${platformFieldErrors.email ? 'border-red-500' : 'border-gray-300'}`} required />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Phone</label>\r\n                <input type=\"tel\" value={formData.phone} onChange={e => setFormData({ ...formData, phone: e.target.value })} className={`mt-1 block w-full border rounded-md px-3 py-2 ${platformFieldErrors.phone ? 'border-red-500' : 'border-gray-300'}`} />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Lead Source</label>\r\n                <select value={formData.source} onChange={e => setFormData({ ...formData, source: e.target.value })} className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\" required>\r\n                  {LEAD_SOURCES.map(src => <option key={src} value={src}>{src}</option>)}\r\n                </select>\r\n                {platformRequirements[formData.source] && (\r\n                  <div className=\"text-xs text-gray-500 mt-1\">{platformRequirements[formData.source].helperText}</div>\r\n                )}\r\n              </div>\r\n              {/* Platform-specific fields */}\r\n              {platformRequirements[formData.source]?.required?.map(field => (\r\n                <div key={field} className=\"relative\">\r\n                  <label className=\"block text-sm font-medium text-gray-700\">{field}\r\n                    <span className=\"ml-1 text-xs text-gray-400\" title={platformRequirements[formData.source].helperText}>?</span>\r\n                  </label>\r\n                  <input type=\"text\" value={formData[field] || ''} onChange={e => setFormData({ ...formData, [field]: e.target.value })} className={`mt-1 block w-full border rounded-md px-3 py-2 ${platformFieldErrors[field] ? 'border-red-500' : 'border-gray-300'}`} />\r\n                  {platformFieldErrors[field] && <div className=\"text-xs text-red-500\">Required for {formData.source}</div>}\r\n                </div>\r\n              ))}\r\n              {/* ...rest of fields... */}\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Platform Response Time (min)</label>\r\n                <input type=\"number\" value={formData.platformResponseTime} onChange={e => setFormData({ ...formData, platformResponseTime: e.target.value })} className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\" min=\"0\" placeholder=\"Auto-calculated if possible\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Conversation Notes</label>\r\n                <textarea value={formData.conversationNotes} onChange={e => setFormData({ ...formData, conversationNotes: e.target.value })} className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\" rows={3} placeholder=\"Detailed conversation context\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Lead Score (1-10)</label>\r\n                <input type=\"number\" value={formData.leadScore} onChange={e => setFormData({ ...formData, leadScore: e.target.value })} className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\" min=\"1\" max=\"10\" placeholder=\"AI suggestion supported\" required />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Urgency Level</label>\r\n                <select value={formData.urgencyLevel} onChange={e => setFormData({ ...formData, urgencyLevel: e.target.value })} className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\" required>\r\n                  {URGENCY_LEVELS.map(u => <option key={u} value={u}>{u}</option>)}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Budget Mentioned</label>\r\n                <input type=\"text\" value={formData.budgetMentioned} onChange={e => setFormData({ ...formData, budgetMentioned: e.target.value })} className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\" placeholder=\"Budget discussions\" />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">Timeline</label>\r\n                <select value={formData.timeline} onChange={e => setFormData({ ...formData, timeline: e.target.value })} className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\" required>\r\n                  {TIMELINE_OPTIONS.map(t => <option key={t} value={t}>{t}</option>)}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700\">General Notes</label>\r\n                <textarea value={formData.notes} onChange={e => setFormData({ ...formData, notes: e.target.value })} className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\" rows={2} />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex justify-end space-x-3 mt-6\">\r\n              <button type=\"button\" onClick={onClose} className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50\">Cancel</button>\r\n              <button type=\"submit\" className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\" disabled={loading || Object.keys(platformFieldErrors).length > 0}>{loading ? 'Saving...' : 'Add Lead'}</button>\r\n            </div>\r\n            {success && <div className=\"text-green-600 font-semibold mt-4\">Contact saved!</div>}\r\n          </form>\r\n        )}\r\n        {activeTab === 'bulk' && (\r\n          <div>\r\n            <div className=\"mb-4\">\r\n              <input type=\"file\" accept=\".csv\" ref={fileInputRef} onChange={handleCsvUpload} className=\"block\" />\r\n            </div>\r\n            {csvPreview.length > 0 && (\r\n              <div className=\"mb-4\">\r\n                <div className=\"font-semibold mb-2\">Preview (first 5 rows):</div>\r\n                <table className=\"w-full text-sm border\">\r\n                  <thead>\r\n                    <tr>\r\n                      {Object.keys(csvPreview[0]).map(h => <th key={h} className=\"border px-2 py-1\">{h}</th>)}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {csvPreview.map((row, i) => (\r\n                      <tr key={i}>\r\n                        {Object.values(row).map((v, j) => <td key={j} className=\"border px-2 py-1\">{v}</td>)}\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n            {csvRows.length > 0 && (\r\n              <div className=\"mb-4\">\r\n                <button onClick={handleBulkImport} className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600\" disabled={loading}>Import {csvRows.length} Contacts</button>\r\n                {loading && <div className=\"mt-2 text-blue-600\">Importing... {importProgress}%</div>}\r\n                {success && <div className=\"text-green-600 font-semibold mt-2\">Bulk import complete!</div>}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n        {/* Duplicate Modal (Prompt #10) */}\r\n        {duplicateModal && potentialDuplicate && (\r\n          <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\">\r\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n              <h3 className=\"text-lg font-bold mb-2\">Potential Duplicate Found</h3>\r\n              <div className=\"mb-2\">A contact with similar name, email, or phone exists.</div>\r\n              <div className=\"mb-4\">\r\n                {/* Highlight matching fields */}\r\n                <div className=\"mb-2\"><span className=\"font-semibold\">Existing:</span> {JSON.stringify(potentialDuplicate)}</div>\r\n                <div className=\"mb-2\"><span className=\"font-semibold\">New:</span> {JSON.stringify(formData)}</div>\r\n              </div>\r\n              <div className=\"flex space-x-2\">\r\n                <button className=\"px-3 py-1 bg-gray-300 rounded\" onClick={() => { setDuplicateModal(false); }}>Cancel</button>\r\n                <button className=\"px-3 py-1 bg-blue-500 text-white rounded\" onClick={async () => { setDuplicateModal(false); await handleSubmit({ preventDefault: () => {} }); }}>Create New Anyway</button>\r\n                <button className=\"px-3 py-1 bg-green-500 text-white rounded\" onClick={async () => { /* Merge logic here */ setDuplicateModal(false); }}>Merge</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\nexport default AddLeadModal;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AdminDisputeManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'FunnelIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":79},{"ruleId":"no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, query, orderBy, onSnapshot, updateDoc, doc } from 'firebase/firestore';\r\nimport { DocumentTextIcon, ClockIcon, CheckCircleIcon, XCircleIcon, FunnelIcon } from '@heroicons/react/24/outline';\r\n\r\nconst AdminDisputeManager = () => {\r\n  const [disputes, setDisputes] = useState([]);\r\n  const [filteredDisputes, setFilteredDisputes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [filter, setFilter] = useState('all');\r\n  const [selectedClient, setSelectedClient] = useState('all');\r\n  const [clients, setClients] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const disputesQuery = query(\r\n      collection(db, 'disputes'),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n    const unsubscribe = onSnapshot(disputesQuery, (snapshot) => {\r\n      const disputeData = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      setDisputes(disputeData);\r\n      setFilteredDisputes(disputeData);\r\n      const uniqueClients = [...new Set(disputeData.map(d => d.clientEmail))];\r\n      setClients(uniqueClients);\r\n      setLoading(false);\r\n    });\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let filtered = [...disputes];\r\n    if (filter !== 'all') filtered = filtered.filter(d => d.status === filter);\r\n    if (selectedClient !== 'all') filtered = filtered.filter(d => d.clientEmail === selectedClient);\r\n    setFilteredDisputes(filtered);\r\n  }, [filter, selectedClient, disputes]);\r\n\r\n  const updateStatus = async (disputeId, newStatus) => {\r\n    try {\r\n      await updateDoc(doc(db, 'disputes', disputeId), {\r\n        status: newStatus,\r\n        lastUpdated: new Date()\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating dispute status:', error);\r\n    }\r\n  };\r\n\r\n  const statusConfig = {\r\n    pending: { color: 'bg-yellow-100 text-yellow-800', icon: ClockIcon },\r\n    sent: { color: 'bg-blue-100 text-blue-800', icon: DocumentTextIcon },\r\n    investigating: { color: 'bg-purple-100 text-purple-800', icon: ClockIcon },\r\n    resolved: { color: 'bg-green-100 text-green-800', icon: CheckCircleIcon },\r\n    rejected: { color: 'bg-red-100 text-red-800', icon: XCircleIcon }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-6\">Dispute Management</h2>\r\n      <div className=\"mb-6 flex gap-4\">\r\n        <select value={filter} onChange={e => setFilter(e.target.value)} className=\"px-4 py-2 border rounded-lg\">\r\n          <option value=\"all\">All Status</option>\r\n          <option value=\"pending\">Pending</option>\r\n          <option value=\"sent\">Sent</option>\r\n          <option value=\"investigating\">Investigating</option>\r\n          <option value=\"resolved\">Resolved</option>\r\n          <option value=\"rejected\">Rejected</option>\r\n        </select>\r\n        <select value={selectedClient} onChange={e => setSelectedClient(e.target.value)} className=\"px-4 py-2 border rounded-lg\">\r\n          <option value=\"all\">All Clients</option>\r\n          {clients.map(client => (\r\n            <option key={client} value={client}>{client}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\r\n        <table className=\"min-w-full\">\r\n          <thead className=\"bg-gray-50\">\r\n            <tr>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Client</th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Bureau</th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Item</th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Status</th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Created</th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"divide-y divide-gray-200\">\r\n            {filteredDisputes.map(dispute => {\r\n              const config = statusConfig[dispute.status] || statusConfig.pending;\r\n              return (\r\n                <tr key={dispute.id}>\r\n                  <td className=\"px-4 py-3\">{dispute.clientEmail}</td>\r\n                  <td className=\"px-4 py-3\">{dispute.bureau}</td>\r\n                  <td className=\"px-4 py-3\">{dispute.item}</td>\r\n                  <td className=\"px-4 py-3\">\r\n                    <span className={`px-2 py-1 rounded-full text-xs ${config.color}`}>{dispute.status}</span>\r\n                  </td>\r\n                  <td className=\"px-4 py-3 text-sm\">{new Date(dispute.createdAt?.toDate ? dispute.createdAt.toDate() : dispute.createdAt).toLocaleDateString()}</td>\r\n                  <td className=\"px-4 py-3\">\r\n                    <select value={dispute.status} onChange={e => updateStatus(dispute.id, e.target.value)} className=\"text-sm border rounded px-2 py-1\">\r\n                      <option value=\"pending\">Pending</option>\r\n                      <option value=\"sent\">Sent</option>\r\n                      <option value=\"investigating\">Investigating</option>\r\n                      <option value=\"resolved\">Resolved</option>\r\n                      <option value=\"rejected\">Rejected</option>\r\n                    </select>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDisputeManager;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AdminDocumentViewer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ChartBarIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, query, orderBy, onSnapshot, deleteDoc, doc } from 'firebase/firestore';\r\nimport { DocumentIcon, EyeIcon, TrashIcon, ChartBarIcon } from '@heroicons/react/24/outline';\r\n\r\nconst AdminDocumentViewer = () => {\r\n  const [documents, setDocuments] = useState([]);\r\n  const [filteredDocuments, setFilteredDocuments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedClient, setSelectedClient] = useState('all');\r\n  const [selectedType, setSelectedType] = useState('all');\r\n  const [clients, setClients] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const q = query(\r\n      collection(db, 'documents'),\r\n      orderBy('uploadedAt', 'desc')\r\n    );\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      const docs = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      setDocuments(docs);\r\n      setFilteredDocuments(docs);\r\n      const uniqueClients = [...new Set(docs.map(d => d.clientEmail))];\r\n      setClients(uniqueClients);\r\n      setLoading(false);\r\n    });\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let filtered = [...documents];\r\n    if (selectedClient !== 'all') filtered = filtered.filter(d => d.clientEmail === selectedClient);\r\n    if (selectedType !== 'all') filtered = filtered.filter(d => d.category === selectedType);\r\n    setFilteredDocuments(filtered);\r\n  }, [selectedClient, selectedType, documents]);\r\n\r\n  const deleteDocument = async (docId) => {\r\n    if (window.confirm('Delete this document?')) {\r\n      await deleteDoc(doc(db, 'documents', docId));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-6\">Document Management</h2>\r\n      <div className=\"mb-6 flex gap-4\">\r\n        <select value={selectedClient} onChange={e => setSelectedClient(e.target.value)} className=\"px-4 py-2 border rounded-lg\">\r\n          <option value=\"all\">All Clients</option>\r\n          {clients.map(client => (\r\n            <option key={client} value={client}>{client}</option>\r\n          ))}\r\n        </select>\r\n        <select value={selectedType} onChange={e => setSelectedType(e.target.value)} className=\"px-4 py-2 border rounded-lg\">\r\n          <option value=\"all\">All Types</option>\r\n          <option value=\"Credit Report\">Credit Reports</option>\r\n          <option value=\"ID\">ID Documents</option>\r\n          <option value=\"Dispute\">Dispute Letters</option>\r\n          <option value=\"Other\">Other</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"grid gap-4\">\r\n        {loading ? (\r\n          <div>Loading...</div>\r\n        ) : filteredDocuments.length === 0 ? (\r\n          <div>No documents found</div>\r\n        ) : (\r\n          filteredDocuments.map(doc => (\r\n            <div key={doc.id} className=\"bg-white rounded-lg shadow p-4 flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-4\">\r\n                <DocumentIcon className=\"h-10 w-10 text-gray-400\" />\r\n                <div>\r\n                  <p className=\"font-medium\">{doc.fileName}</p>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    {doc.clientEmail} • {doc.category} • {new Date(doc.uploadedAt?.toDate ? doc.uploadedAt.toDate() : doc.uploadedAt).toLocaleDateString()}\r\n                  </p>\r\n                  {doc.parsed && (\r\n                    <span className=\"text-xs text-green-600\">✓ Parsed</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <a\r\n                  href={doc.url}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"p-2 text-blue-600 hover:bg-blue-50 rounded\"\r\n                >\r\n                  <EyeIcon className=\"h-5 w-5\" />\r\n                </a>\r\n                <button\r\n                  onClick={() => deleteDocument(doc.id)}\r\n                  className=\"p-2 text-red-600 hover:bg-red-50 rounded\"\r\n                >\r\n                  <TrashIcon className=\"h-5 w-5\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDocumentViewer;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AdminNotificationCenter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AdminPermissions.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AdvancedAnalytics.jsx","messages":[{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'Particles' as identifier for default import.","line":18,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":18,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'handleLegendClick' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":246,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":246,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useRef, useEffect } from 'react';\r\nimport { Line, Bar, Pie } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n  Title,\r\n  Filler,\r\n} from 'chart.js';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport { motion } from 'framer-motion';\r\nimport Particles from '@tsparticles/react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\nimport useSound from 'use-sound';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n  Title,\r\n  Filler,\r\n  zoomPlugin,\r\n);\r\n\r\nconst TIME_PERIODS = [\r\n  { label: 'Last 3 Months', value: '3m' },\r\n  { label: 'Last 6 Months', value: '6m' },\r\n  { label: 'Year to Date', value: 'ytd' },\r\n  { label: 'All Time', value: 'all' },\r\n];\r\n\r\nconst CHART_TYPES = [\r\n  { label: 'Line', value: 'line' },\r\n  { label: 'Bar', value: 'bar' },\r\n  { label: 'Area', value: 'area' },\r\n];\r\n\r\nconst INDUSTRY_BENCHMARKS = {\r\n  revenueGrowth: 8,\r\n  conversionRate: 35,\r\n  forecastAccuracy: 90,\r\n};\r\n\r\nfunction filterByPeriod(data, period, startDate, endDate) {\r\n  if (!Array.isArray(data)) return [];\r\n  if (period === 'all' && !startDate && !endDate) return data;\r\n  const now = new Date();\r\n  let start;\r\n  switch (period) {\r\n    case '3m':\r\n      start = new Date(now.getFullYear(), now.getMonth() - 2, 1);\r\n      break;\r\n    case '6m':\r\n      start = new Date(now.getFullYear(), now.getMonth() - 5, 1);\r\n      break;\r\n    case 'ytd':\r\n      start = new Date(now.getFullYear(), 0, 1);\r\n      break;\r\n    default:\r\n      start = null;\r\n  }\r\n  return data.filter(item => {\r\n    let d;\r\n    if (/^[A-Za-z]{3}$/.test(item.label)) {\r\n      d = new Date(`${now.getFullYear()}-${item.label}-01`);\r\n    } else {\r\n      d = new Date(item.label);\r\n    }\r\n    if (startDate && endDate) {\r\n      return d >= startDate && d <= endDate;\r\n    }\r\n    if (start) {\r\n      return d >= start && d <= now;\r\n    }\r\n    return true;\r\n  });\r\n}\r\n\r\n// AI-powered insights (simple version)\r\nfunction getInsights(revenueHistory) {\r\n  if (!revenueHistory.length) return [];\r\n  const last = revenueHistory[revenueHistory.length - 1];\r\n  const prev = revenueHistory[revenueHistory.length - 2] || last;\r\n  const trend = last.actual > prev.actual ? 'up' : last.actual < prev.actual ? 'down' : 'flat';\r\n  const anomaly = last.actual > last.forecast * 1.2 ? 'High anomaly detected' : last.actual < last.forecast * 0.8 ? 'Low anomaly detected' : null;\r\n  const recommendation = trend === 'up'\r\n    ? 'Revenue is trending up. Consider investing in top-performing channels.'\r\n    : trend === 'down'\r\n    ? 'Revenue is trending down. Review conversion strategies.'\r\n    : 'Revenue is stable. Maintain current strategies.';\r\n  return [\r\n    { label: 'Trend', value: trend },\r\n    anomaly && { label: 'Anomaly', value: anomaly },\r\n    { label: 'Recommendation', value: recommendation },\r\n  ].filter(Boolean);\r\n}\r\n\r\nconst chartOptions = (dynamicColor, darkMode, legendFilter, onChartClick) => ({\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  scales: {\r\n    x: {\r\n      type: 'category',\r\n      grid: {\r\n        color: darkMode ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)'\r\n      },\r\n      ticks: {\r\n        color: darkMode ? '#fff' : '#666'\r\n      }\r\n    },\r\n    y: {\r\n      type: 'linear',\r\n      beginAtZero: true,\r\n      grid: {\r\n        color: darkMode ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)'\r\n      },\r\n      ticks: {\r\n        color: darkMode ? '#fff' : '#666'\r\n      }\r\n    }\r\n  },\r\n  plugins: {\r\n    legend: {\r\n      labels: {\r\n        color: darkMode ? '#fff' : '#666',\r\n        filter: legendFilter\r\n      }\r\n    }\r\n  },\r\n  onClick: onChartClick\r\n});\r\n\r\nfunction getDynamicColor(totalRevenue) {\r\n  if (totalRevenue > 13000) return '#10b981';\r\n  if (totalRevenue > 10000) return '#2563eb';\r\n  return '#ef4444';\r\n}\r\n\r\nfunction getKPI(revenueHistory, conversionTrends, forecastAccuracy) {\r\n  const totalRevenue = revenueHistory.reduce((sum, r) => sum + r.actual, 0);\r\n  const revenueGrowth = revenueHistory.length > 1\r\n    ? Math.round(((revenueHistory[revenueHistory.length - 1].actual - revenueHistory[0].actual) / revenueHistory[0].actual) * 100)\r\n    : 0;\r\n  const conversionRate = conversionTrends.length\r\n    ? Math.round(conversionTrends.reduce((sum, c) => sum + c.rate, 0) / conversionTrends.length)\r\n    : 0;\r\n  const forecastAcc = forecastAccuracy.length\r\n    ? Math.round(\r\n        100 -\r\n          (forecastAccuracy.reduce((sum, f) => sum + Math.abs(f.actual - f.predicted), 0) /\r\n            forecastAccuracy.length /\r\n            (forecastAccuracy.reduce((sum, f) => sum + f.actual, 0) / forecastAccuracy.length)) *\r\n            100\r\n      )\r\n    : 0;\r\n  return { totalRevenue, revenueGrowth, conversionRate, forecastAcc };\r\n}\r\n\r\nfunction AdvancedAnalytics({\r\n  revenueHistory = [],\r\n  forecastAccuracy = [],\r\n  conversionTrends = [],\r\n  leadSourceStats = [],\r\n}) {\r\n  // --- Enterprise Feature States ---\r\n  const [period, setPeriod] = useState('3m');\r\n  const [chartType, setChartType] = useState('line');\r\n  const [loading, setLoading] = useState(true);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [drillPath, setDrillPath] = useState([]);\r\n  const [legendFilterState, setLegendFilterState] = useState({ revenue: [], accuracy: [], conversion: [], leadsource: [] });\r\n  const [playClick] = useSound('/sounds/click.mp3', { volume: 0.3 });\r\n  const [playSuccess] = useSound('/sounds/success.mp3', { volume: 0.3 });\r\n\r\n  // Chart refs for export\r\n  const revenueChartRef = useRef();\r\n  const accuracyChartRef = useRef();\r\n  const conversionChartRef = useRef();\r\n  const leadSourceChartRef = useRef();\r\n\r\n  // Simulate loading skeleton\r\n  useEffect(() => {\r\n    setTimeout(() => setLoading(false), 1200);\r\n  }, []);\r\n\r\n  // Filtered data\r\n  const filteredRevenue = useMemo(\r\n    () => filterByPeriod(revenueHistory, period, startDate, endDate),\r\n    [revenueHistory, period, startDate, endDate]\r\n  );\r\n  const filteredForecast = useMemo(\r\n    () => filterByPeriod(forecastAccuracy, period, startDate, endDate),\r\n    [forecastAccuracy, period, startDate, endDate]\r\n  );\r\n  const filteredConversion = useMemo(\r\n    () => filterByPeriod(conversionTrends, period, startDate, endDate),\r\n    [conversionTrends, period, startDate, endDate]\r\n  );\r\n  const filteredLeadSource = useMemo(\r\n    () => filterByPeriod(leadSourceStats, period, startDate, endDate),\r\n    [leadSourceStats, period, startDate, endDate]\r\n  );\r\n\r\n  // Dynamic color scheme\r\n  const { totalRevenue, revenueGrowth, conversionRate, forecastAcc } = getKPI(\r\n    filteredRevenue,\r\n    filteredConversion,\r\n    filteredForecast\r\n  );\r\n  const dynamicColor = getDynamicColor(totalRevenue);\r\n\r\n  // --- Drill-down logic ---\r\n  const handleChartClick = (event, elements, chartType) => {\r\n    if (elements.length) {\r\n      const idx = elements[0].index;\r\n      setDrillPath([...drillPath, { chartType, idx }]);\r\n      playClick();\r\n    }\r\n  };\r\n\r\n  // --- Interactive legend logic ---\r\n  // Only return boolean for filtering, do not update state here\r\n  const legendFilter = chartKey => idx => {\r\n    const arr = legendFilterState[chartKey] || [];\r\n    return !arr.includes(idx);\r\n  };\r\n\r\n  // Handler for legend click (to update state)\r\n  const handleLegendClick = (chartKey, idx) => {\r\n    setLegendFilterState(prev => {\r\n      const arr = prev[chartKey] || [];\r\n      return {\r\n        ...prev,\r\n        [chartKey]: arr.includes(idx) ? arr.filter(i => i !== idx) : [...arr, idx],\r\n      };\r\n    });\r\n  };\r\n\r\n  // --- Chart Data with legend filtering ---\r\n  const revenueChartData = {\r\n    labels: filteredRevenue.map(r => r.label),\r\n    datasets: [\r\n      {\r\n        label: 'Actual Revenue',\r\n        data: filteredRevenue.map(r => r.actual),\r\n        borderColor: dynamicColor,\r\n        backgroundColor: chartType === 'area' ? dynamicColor + '33' : dynamicColor + '22',\r\n        fill: chartType === 'area',\r\n        tension: 0.4,\r\n        pointBackgroundColor: dynamicColor,\r\n        pointRadius: 5,\r\n        pointHoverRadius: 8,\r\n        hidden: legendFilterState.revenue.includes(0),\r\n      },\r\n      {\r\n        label: 'Forecasted Revenue',\r\n        data: filteredRevenue.map(r => r.forecast),\r\n        borderColor: '#10b981',\r\n        backgroundColor: chartType === 'area' ? '#10b98133' : '#10b98122',\r\n        fill: chartType === 'area',\r\n        tension: 0.4,\r\n        pointBackgroundColor: '#10b981',\r\n        pointRadius: 5,\r\n        pointHoverRadius: 8,\r\n        hidden: legendFilterState.revenue.includes(1),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const accuracyChartData = {\r\n    labels: filteredForecast.map(f => f.label),\r\n    datasets: [\r\n      {\r\n        label: 'Actual',\r\n        data: filteredForecast.map(f => f.actual),\r\n        backgroundColor: dynamicColor + 'bb',\r\n        borderColor: dynamicColor,\r\n        type: 'bar',\r\n        hidden: legendFilterState.accuracy.includes(0),\r\n      },\r\n      {\r\n        label: 'Predicted',\r\n        data: filteredForecast.map(f => f.predicted),\r\n        backgroundColor: '#10b981bb',\r\n        borderColor: '#10b981',\r\n        type: 'bar',\r\n        hidden: legendFilterState.accuracy.includes(1),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const conversionChartData = {\r\n    labels: filteredConversion.map(c => c.label),\r\n    datasets: [\r\n      {\r\n        label: 'Conversion Rate (%)',\r\n        data: filteredConversion.map(c => c.rate),\r\n        borderColor: '#8b5cf6',\r\n        backgroundColor: chartType === 'area' ? '#8b5cf633' : '#8b5cf622',\r\n        fill: chartType === 'area',\r\n        tension: 0.4,\r\n        pointBackgroundColor: '#8b5cf6',\r\n        pointRadius: 5,\r\n        pointHoverRadius: 8,\r\n        hidden: legendFilterState.conversion.includes(0),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const leadSourceChartData = {\r\n    labels: filteredLeadSource.map(l => l.source),\r\n    datasets: [\r\n      {\r\n        label: 'Leads',\r\n        data: filteredLeadSource.map(l => l.value),\r\n        backgroundColor: [\r\n          dynamicColor + 'bb',\r\n          '#10b981bb',\r\n          '#f59e42bb',\r\n          '#8b5cf6bb',\r\n          '#ef4444bb',\r\n          '#6366f1bb',\r\n        ],\r\n        borderColor: [\r\n          dynamicColor,\r\n          '#10b981',\r\n          '#f59e42',\r\n          '#8b5cf6',\r\n          '#ef4444',\r\n          '#6366f1',\r\n        ],\r\n        borderWidth: 2,\r\n        hoverOffset: 12,\r\n        hidden: legendFilterState.leadsource.includes(0),\r\n      },\r\n    ],\r\n  };\r\n\r\n\r\n  // --- AI-powered insights ---\r\n  const insights = getInsights(filteredRevenue);\r\n\r\n  // --- Export chart as PNG/PDF ---\r\n  const exportChart = async (ref, type = 'png', chartName = 'chart') => {\r\n    playClick();\r\n    const chartElem = ref.current?.canvas;\r\n    if (!chartElem) return;\r\n    const canvas = await html2canvas(chartElem);\r\n    if (type === 'png') {\r\n      const link = document.createElement('a');\r\n      link.download = `${chartName}.png`;\r\n      link.href = canvas.toDataURL();\r\n      link.click();\r\n      playSuccess();\r\n    } else {\r\n      const pdf = new jsPDF();\r\n      pdf.addImage(canvas.toDataURL(), 'PNG', 10, 10, 180, 100);\r\n      pdf.save(`${chartName}.pdf`);\r\n      playSuccess();\r\n    }\r\n  };\r\n\r\n  // --- Real-time refresh ---\r\n  const refreshData = () => {\r\n    setRefreshing(true);\r\n    playClick();\r\n    setTimeout(() => setRefreshing(false), 1000);\r\n  };\r\n\r\n  // --- Particle options ---\r\n  const particlesOptions = {\r\n    background: { color: { value: 'transparent' } },\r\n    fpsLimit: 60,\r\n    particles: {\r\n      color: { value: dynamicColor },\r\n      links: { enable: true, color: dynamicColor, distance: 120 },\r\n      move: { enable: true, speed: 1, direction: 'none', outModes: 'bounce' },\r\n      number: { value: 20 },\r\n      opacity: { value: 0.3 },\r\n      shape: { type: 'circle' },\r\n      size: { value: { min: 2, max: 6 } },\r\n    },\r\n    detectRetina: true,\r\n  };\r\n\r\n  // --- Animated loading skeletons ---\r\n  if (loading) {\r\n    return (\r\n      <motion.section\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        className={`relative ${darkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'} rounded-2xl shadow-2xl p-8 mb-8 w-full max-w-7xl mx-auto border border-gray-200`}\r\n        style={{\r\n          background: darkMode\r\n            ? 'linear-gradient(135deg, #222 0%, #333 100%)'\r\n            : 'linear-gradient(135deg, rgba(37,99,235,0.12) 0%, rgba(16,185,129,0.12) 100%)',\r\n          boxShadow: darkMode\r\n            ? '0 8px 32px rgba(37,99,235,0.12), 0 1.5px 8px rgba(16,185,129,0.08)'\r\n            : '0 8px 32px rgba(37,99,235,0.12), 0 1.5px 8px rgba(16,185,129,0.08)',\r\n          overflow: 'hidden',\r\n          transition: 'background 0.5s, color 0.5s',\r\n        }}\r\n        aria-label=\"Advanced Analytics\"\r\n      >\r\n        <div className=\"flex flex-col gap-8\">\r\n          <div className=\"animate-pulse h-64 w-full flex items-center justify-center\">\r\n            <div className=\"rounded-2xl bg-gradient-to-r from-gray-200 via-gray-300 to-gray-200 dark:from-gray-700 dark:via-gray-800 dark:to-gray-700 w-full h-64\" />\r\n          </div>\r\n          <div className=\"animate-pulse h-64 w-full flex items-center justify-center\">\r\n            <div className=\"rounded-full bg-gradient-to-r from-gray-200 via-gray-300 to-gray-200 dark:from-gray-700 dark:via-gray-800 dark:to-gray-700 w-48 h-48\" />\r\n          </div>\r\n        </div>\r\n        <span className=\"ml-4 text-2xl font-bold\">Loading Analytics...</span>\r\n      </motion.section>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <motion.section\r\n      initial={{ opacity: 0, y: 40 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.8 }}\r\n      className={`relative ${darkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'} bg-opacity-80 backdrop-blur-lg rounded-2xl shadow-2xl p-8 mb-8 w-full max-w-7xl mx-auto border border-gray-200`}\r\n      style={{\r\n        background: darkMode\r\n          ? 'linear-gradient(135deg, #222 0%, #333 100%)'\r\n          : 'linear-gradient(135deg, rgba(37,99,235,0.12) 0%, rgba(16,185,129,0.12) 100%)',\r\n        boxShadow: darkMode\r\n          ? '0 8px 32px rgba(37,99,235,0.12), 0 1.5px 8px rgba(16,185,129,0.08)'\r\n          : '0 8px 32px rgba(37,99,235,0.12), 0 1.5px 8px rgba(16,185,129,0.08)',\r\n        overflow: 'hidden',\r\n        transition: 'background 0.5s, color 0.5s',\r\n      }}\r\n      aria-label=\"Advanced Analytics\"\r\n    >\r\n      {/* Particle Animation */}\r\n      <Particles options={particlesOptions} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', zIndex: 0 }} />\r\n\r\n      {/* Dark Mode Toggle */}\r\n      <button\r\n        className=\"absolute top-4 left-4 z-30 p-2 rounded-full bg-white dark:bg-gray-800 shadow hover:bg-blue-100 dark:hover:bg-gray-700 transition\"\r\n        onClick={() => setDarkMode(dm => !dm)}\r\n        title={darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\r\n      >\r\n        {darkMode ? (\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-yellow-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12.79A9 9 0 1111.21 3a7 7 0 109.79 9.79z\" /></svg>\r\n        ) : (\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><circle cx=\"12\" cy=\"12\" r=\"5\" /><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42\" /></svg>\r\n        )}\r\n      </button>\r\n\r\n      {/* Executive Summary KPI Cards */}\r\n      <div className=\"relative z-10 grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.5 }}\r\n          className=\"bg-gradient-to-r from-blue-500 to-green-500 text-white rounded-xl p-4 shadow-lg\"\r\n        >\r\n          <div className=\"text-lg font-bold dark:text-white\">Total Revenue</div>\r\n          <motion.div\r\n            animate={{ scale: [1, 1.2, 1] }}\r\n            transition={{ repeat: Infinity, duration: 1 }}\r\n            className=\"text-2xl dark:text-gray-100\"\r\n          >\r\n            ${totalRevenue.toLocaleString()}\r\n          </motion.div>\r\n        </motion.div>\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.6 }}\r\n          className=\"bg-gradient-to-r from-green-500 to-purple-500 text-white rounded-xl p-4 shadow-lg\"\r\n        >\r\n          <div className=\"text-lg font-bold dark:text-white\">Revenue Growth</div>\r\n          <div className=\"text-2xl dark:text-gray-100\">{revenueGrowth}%</div>\r\n          <div className=\"text-xs dark:text-gray-100\">Industry: {INDUSTRY_BENCHMARKS.revenueGrowth}%</div>\r\n        </motion.div>\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.7 }}\r\n          className=\"bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-xl p-4 shadow-lg\"\r\n        >\r\n          <div className=\"text-lg font-bold dark:text-white\">Conversion Rate</div>\r\n          <div className=\"text-2xl dark:text-gray-100\">{conversionRate}%</div>\r\n          <div className=\"text-xs dark:text-gray-100\">Industry: {INDUSTRY_BENCHMARKS.conversionRate}%</div>\r\n        </motion.div>\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.8 }}\r\n          className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-xl p-4 shadow-lg\"\r\n        >\r\n          <div className=\"text-lg font-bold dark:text-white\">Forecast Accuracy</div>\r\n          <div className=\"text-2xl dark:text-gray-100\">{forecastAcc}%</div>\r\n          <div className=\"text-xs dark:text-gray-100\">Industry: {INDUSTRY_BENCHMARKS.forecastAccuracy}%</div>\r\n        </motion.div>\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div className=\"relative z-10 flex flex-wrap gap-4 mb-6 items-center\">\r\n        <div className=\"flex space-x-2\">\r\n          {TIME_PERIODS.map(tp => (\r\n            <button\r\n              key={tp.value}\r\n              className={\r\n                period === tp.value\r\n                  ? 'px-3 py-1 rounded font-semibold border bg-blue-600 text-white border-blue-600 shadow-lg'\r\n                  : 'px-3 py-1 rounded font-semibold border bg-gray-100 text-gray-700 border-gray-300 hover:bg-blue-50 transition-all duration-200'\r\n              }\r\n              onClick={() => { setPeriod(tp.value); playClick(); }}\r\n              aria-pressed={period === tp.value}\r\n            >\r\n              {tp.label}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <div className=\"flex space-x-2 ml-2\">\r\n          <DatePicker\r\n            selected={startDate}\r\n            onChange={date => setStartDate(date)}\r\n            selectsStart\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            placeholderText=\"Start Date\"\r\n            className=\"px-2 py-1 rounded border\"\r\n          />\r\n          <DatePicker\r\n            selected={endDate}\r\n            onChange={date => setEndDate(date)}\r\n            selectsEnd\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            minDate={startDate}\r\n            placeholderText=\"End Date\"\r\n            className=\"px-2 py-1 rounded border\"\r\n          />\r\n        </div>\r\n        <div className=\"flex space-x-2 ml-2\">\r\n          {CHART_TYPES.map(ct => (\r\n            <button\r\n              key={ct.value}\r\n              className={\r\n                chartType === ct.value\r\n                  ? 'px-3 py-1 rounded font-semibold border bg-purple-600 text-white border-purple-600 shadow-lg'\r\n                  : 'px-3 py-1 rounded font-semibold border bg-gray-100 text-gray-700 border-gray-300 hover:bg-purple-50 transition-all duration-200'\r\n              }\r\n              onClick={() => { setChartType(ct.value); playClick(); }}\r\n              aria-pressed={chartType === ct.value}\r\n            >\r\n              {ct.label}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <button\r\n          className=\"px-3 py-1 rounded font-semibold border bg-green-600 text-white border-green-600 shadow-lg ml-2\"\r\n          onClick={refreshData}\r\n        >\r\n          {refreshing ? 'Refreshing...' : 'Refresh Data'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Data Storytelling Panel */}\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.7 }}\r\n        className=\"mb-6 p-4 rounded-xl bg-gradient-to-r from-blue-50 via-green-50 to-purple-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 shadow-lg dark:text-gray-100\"\r\n      >\r\n        <h4 className=\"font-bold mb-2 dark:text-white\">Data Storytelling</h4>\r\n        <ol className=\"list-decimal ml-6 space-y-1\">\r\n          {insights.map((insight, idx) => (\r\n            <li key={idx} className=\"text-base dark:text-gray-100\">{insight.label}: {insight.value}</li>\r\n          ))}\r\n        </ol>\r\n      </motion.div>\r\n\r\n      {/* AI-powered Insights */}\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.7 }}\r\n        className=\"mb-6 grid grid-cols-1 md:grid-cols-3 gap-4\"\r\n      >\r\n        {insights.map((insight, idx) => (\r\n          <div\r\n            key={idx}\r\n            className=\"bg-gradient-to-r from-blue-100 via-green-100 to-purple-100 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 rounded-xl p-4 shadow-lg flex items-center gap-2\"\r\n            style={{\r\n              borderLeft: insight.label === 'Anomaly' ? '6px solid #ef4444' : '6px solid #2563eb',\r\n              boxShadow: insight.label === 'Anomaly' ? '0 0 16px #ef4444' : '0 0 8px #2563eb',\r\n            }}\r\n          >\r\n            <span className=\"font-bold text-lg dark:text-white\">{insight.label}:</span>\r\n            <span className=\"text-gray-800 dark:text-gray-100\">{insight.value}</span>\r\n            {insight.label === 'Trend' && (\r\n              <span>\r\n                {insight.value === 'up' ? '⬆️' : insight.value === 'down' ? '⬇️' : '➡️'}\r\n              </span>\r\n            )}\r\n            {insight.label === 'Anomaly' && <span className=\"animate-pulse text-red-600 font-bold ml-2\">!</span>}\r\n          </div>\r\n        ))}\r\n      </motion.div>\r\n\r\n      <div className=\"relative z-10 grid grid-cols-1 md:grid-cols-2 gap-8\">\r\n        {/* Revenue Trend Chart */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 40 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.8 }}\r\n          whileHover={{ scale: 1.03, boxShadow: `0 0 32px ${dynamicColor}` }}\r\n          className={`relative bg-gradient-to-br from-blue-50 via-white to-green-50 rounded-xl p-6 shadow-xl glassmorphism ${darkMode ? 'bg-gray-800' : ''}`}\r\n        >\r\n          {/* Breadcrumbs for drill-down */}\r\n          {drillPath.length > 0 && (\r\n            <div className=\"mb-2 flex gap-2 items-center\">\r\n              <span className=\"font-semibold\">Drill Path:</span>\r\n              {drillPath.map((step, i) => (\r\n                <button key={i} onClick={() => setDrillPath(drillPath.slice(0, i + 1))} className=\"text-blue-500 underline\">\r\n                  {step.chartType} {step.idx + 1}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          )}\r\n          <div className=\"absolute top-4 right-4 flex gap-2 z-20\">\r\n            <button\r\n              className=\"p-2 rounded-full bg-white shadow hover:bg-blue-100 transition\"\r\n              title=\"Export PNG\"\r\n              onClick={() => exportChart(revenueChartRef, 'png', 'revenue')}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v2a2 2 0 002 2h12a2 2 0 002-2v-2M7 10l5 5m0 0l5-5m-5 5V4\" />\r\n              </svg>\r\n            </button>\r\n            <button\r\n              className=\"p-2 rounded-full bg-white shadow hover:bg-green-100 transition\"\r\n              title=\"Export PDF\"\r\n              onClick={() => exportChart(revenueChartRef, 'pdf', 'revenue')}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 16v-8m0 8l-4-4m4 4l4-4\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-2 flex items-center gap-2\">\r\n            Revenue Trends\r\n            {insights[0]?.value === 'up' && <span className=\"text-green-500 animate-bounce\">⬆️</span>}\r\n            {insights[0]?.value === 'down' && <span className=\"text-red-500 animate-bounce\">⬇️</span>}\r\n          </h3>\r\n          <div className=\"h-64\" id=\"revenue-chart\">\r\n            {chartType === 'bar' ? (\r\n              <Bar\r\n                ref={revenueChartRef}\r\n                data={revenueChartData}\r\n                options={chartOptions(dynamicColor, darkMode, legendFilter('revenue'), (e, els) => handleChartClick(e, els, 'revenue'))}\r\n              />\r\n            ) : (\r\n              <Line\r\n                ref={revenueChartRef}\r\n                data={revenueChartData}\r\n                options={chartOptions(dynamicColor, darkMode, legendFilter('revenue'), (e, els) => handleChartClick(e, els, 'revenue'))}\r\n              />\r\n            )}\r\n          </div>\r\n        </motion.div>\r\n\r\n        {/* Forecast Accuracy Chart */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 40 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.8, delay: 0.2 }}\r\n          whileHover={{ scale: 1.03, boxShadow: '0 0 32px #10b981' }}\r\n          className={`relative bg-gradient-to-br from-green-50 via-white to-purple-50 rounded-xl p-6 shadow-xl glassmorphism ${darkMode ? 'bg-gray-800' : ''}`}\r\n        >\r\n          <div className=\"absolute top-4 right-4 flex gap-2 z-20\">\r\n            <button\r\n              className=\"p-2 rounded-full bg-white shadow hover:bg-blue-100 transition\"\r\n              title=\"Export PNG\"\r\n              onClick={() => exportChart(accuracyChartRef, 'png', 'accuracy')}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v2a2 2 0 002 2h12a2 2 0 002-2v-2M7 10l5 5m0 0l5-5m-5 5V4\" />\r\n              </svg>\r\n            </button>\r\n            <button\r\n              className=\"p-2 rounded-full bg-white shadow hover:bg-green-100 transition\"\r\n              title=\"Export PDF\"\r\n              onClick={() => exportChart(accuracyChartRef, 'pdf', 'accuracy')}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 16v-8m0 8l-4-4m4 4l4-4\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-2\">Forecast Accuracy</h3>\r\n          <div className=\"h-64\" id=\"accuracy-chart\">\r\n            <Bar\r\n              ref={accuracyChartRef}\r\n              data={accuracyChartData}\r\n              options={chartOptions(dynamicColor, darkMode, legendFilter('accuracy'), (e, els) => handleChartClick(e, els, 'accuracy'))}\r\n            />\r\n          </div>\r\n        </motion.div>\r\n\r\n        {/* Conversion Rate Trends */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 40 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.8, delay: 0.4 }}\r\n          whileHover={{ scale: 1.03, boxShadow: '0 0 32px #8b5cf6' }}\r\n          className={`relative bg-gradient-to-br from-purple-50 via-white to-blue-50 rounded-xl p-6 shadow-xl glassmorphism ${darkMode ? 'bg-gray-800' : ''}`}\r\n        >\r\n          <div className=\"absolute top-4 right-4 flex gap-2 z-20\">\r\n            <button\r\n              className=\"p-2 rounded-full bg-white shadow hover:bg-blue-100 transition\"\r\n              title=\"Export PNG\"\r\n              onClick={() => exportChart(conversionChartRef, 'png', 'conversion')}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v2a2 2 0 002 2h12a2 2 0 002-2v-2M7 10l5 5m0 0l5-5m-5 5V4\" />\r\n              </svg>\r\n            </button>\r\n            <button\r\n              className=\"p-2 rounded-full bg-white shadow hover:bg-green-100 transition\"\r\n              title=\"Export PDF\"\r\n              onClick={() => exportChart(conversionChartRef, 'pdf', 'conversion')}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 16v-8m0 8l-4-4m4 4l4-4\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-2\">Conversion Rate Trends</h3>\r\n          <div className=\"h-64\" id=\"conversion-chart\">\r\n            {chartType === 'bar' ? (\r\n              <Bar\r\n                ref={conversionChartRef}\r\n                data={conversionChartData}\r\n                options={chartOptions(dynamicColor, darkMode, legendFilter('conversion'), (e, els) => handleChartClick(e, els, 'conversion'))}\r\n              />\r\n            ) : (\r\n              <Line\r\n                ref={conversionChartRef}\r\n                data={conversionChartData}\r\n                options={chartOptions(dynamicColor, darkMode, legendFilter('conversion'), (e, els) => handleChartClick(e, els, 'conversion'))}\r\n              />\r\n            )}\r\n          </div>\r\n        </motion.div>\r\n\r\n        {/* Lead Source Performance */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 40 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.8, delay: 0.6 }}\r\n          whileHover={{ scale: 1.03, boxShadow: '0 0 32px #6366f1' }}\r\n          className={`relative bg-gradient-to-br from-blue-50 via-white to-green-50 rounded-xl p-6 shadow-xl glassmorphism flex items-center justify-center ${darkMode ? 'bg-gray-800' : ''}`}\r\n        >\r\n          <div className=\"absolute top-4 right-4 flex gap-2 z-20\">\r\n            <button\r\n              className=\"p-2 rounded-full bg-white shadow hover:bg-blue-100 transition\"\r\n              title=\"Export PNG\"\r\n              onClick={() => exportChart(leadSourceChartRef, 'png', 'leadsource')}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v2a2 2 0 002 2h12a2 2 0 002-2v-2M7 10l5 5m0 0l5-5m-5 5V4\" />\r\n              </svg>\r\n            </button>\r\n            <button\r\n              className=\"p-2 rounded-full bg-white shadow hover:bg-green-100 transition\"\r\n              title=\"Export PDF\"\r\n              onClick={() => exportChart(leadSourceChartRef, 'pdf', 'leadsource')}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 16v-8m0 8l-4-4m4 4l4-4\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-2\">Lead Source Performance</h3>\r\n          <div className=\"h-64 flex items-center justify-center\" id=\"leadsource-chart\">\r\n            <Pie\r\n              ref={leadSourceChartRef}\r\n              data={leadSourceChartData}\r\n              options={chartOptions(dynamicColor, darkMode, legendFilter('leadsource'), (e, els) => handleChartClick(e, els, 'leadsource'))}\r\n            />\r\n          </div>\r\n        </motion.div>\r\n      </div>\r\n    </motion.section>\r\n  );\r\n}\r\n\r\nexport default AdvancedAnalytics;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AdvancedRevenueAnalytics.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AiReceptionistIntegration.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Analytics.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useDemo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState , useEffect } from \"react\";\r\n\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, query, onSnapshot } from 'firebase/firestore';\r\nimport { demoAnalytics } from \"../data/demoData\";\r\n\r\nexport default function Analytics() {\r\n  const [stats, setStats] = useState(demoAnalytics);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'analytics'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setStats(firebaseData);\r\n          setUseDemo(false);\r\n        },\r\n        (error) => {\r\n          setStats(demoAnalytics);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setStats(demoAnalytics);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Analytics</h1>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\r\n          {stats.length === 0 ? (\r\n            <div className=\"col-span-3 text-center text-gray-500\">No analytics data found.</div>\r\n          ) : (\r\n            stats.map((stat) => (\r\n              <div key={stat.id} className=\"bg-white shadow rounded-lg p-6 flex flex-col items-center\">\r\n                <div className=\"text-2xl font-bold mb-2\">{stat.value}</div>\r\n                <div className=\"text-lg text-gray-700\">{stat.label}</div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AnalyticsChart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AskPanel.jsx","messages":[{"ruleId":"import/named","severity":2,"message":"analytics not found in '../lib/firebase'","line":3,"column":10,"nodeType":"Identifier","endLine":3,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { useAsk } from \"../lib/hooks/useAsk\";\r\nimport { analytics } from \"../lib/firebase\";\r\n\r\nexport default function AskPanel() {\r\n  const [text, setText] = useState(\"\");\r\n  const { loading, error, reply, send, cancel } = useAsk();\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!text.trim()) return;\r\n    try {\r\n      await send(text.trim());\r\n      if (analytics?.logEvent) analytics.logEvent(\"ask_success\", { prompt: text.trim() });\r\n    } catch (err) {\r\n      if (analytics?.logEvent) analytics.logEvent(\"ask_failure\", { prompt: text.trim(), error: err?.message });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"rounded-3xl p-6 ring-1 ring-white/10 bg-white/5\">\r\n      <div className=\"text-white/80 font-medium mb-3\">Assistant</div>\r\n      <form onSubmit={onSubmit} className=\"flex gap-2\">\r\n        <input\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n          className=\"flex-1 rounded-xl bg-white/10 text-white placeholder-white/50 px-3 py-2 ring-1 ring-white/10 focus:outline-none focus:ring-white/30\"\r\n          placeholder=\"Ask anything… e.g., draft a dispute reason for late payment\"\r\n        />\r\n        {!loading ? (\r\n          <button type=\"submit\" className=\"rounded-xl px-4 py-2 bg-white/90 text-slate-900 font-medium hover:bg-white\">\r\n            Send\r\n          </button>\r\n        ) : (\r\n          <button type=\"button\" onClick={cancel} className=\"rounded-xl px-4 py-2 bg-white/20 text-white hover:bg-white/30\">\r\n            Cancel\r\n          </button>\r\n        )}\r\n      </form>\r\n      {error && <div className=\"mt-3 text-sm text-rose-400\">{error}</div>}\r\n      {reply && (\r\n        <div className=\"mt-4 rounded-xl bg-white/5 p-3 ring-1 ring-white/10 text-white/90 whitespace-pre-wrap\">\r\n          {reply}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\AuthDebugger.jsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":22,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1160,1191],"text":"hasFeatureAccess(&apos;dashboard'): "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1160,1191],"text":"hasFeatureAccess(&lsquo;dashboard'): "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1160,1191],"text":"hasFeatureAccess(&#39;dashboard'): "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1160,1191],"text":"hasFeatureAccess(&rsquo;dashboard'): "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":22,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1160,1191],"text":"hasFeatureAccess('dashboard&apos;): "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1160,1191],"text":"hasFeatureAccess('dashboard&lsquo;): "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1160,1191],"text":"hasFeatureAccess('dashboard&#39;): "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1160,1191],"text":"hasFeatureAccess('dashboard&rsquo;): "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { usePermission } from '../usePermission';\r\n\r\nexport const AuthDebugger = () => {\r\n  const auth = useAuth();\r\n  const permissions = usePermission();\r\n\r\n  return (\r\n    <div style={{position: 'fixed', top: 16, right: 16, background: '#991b1b', color: 'white', padding: 16, borderRadius: 8, fontSize: 12, zIndex: 9999, maxWidth: 320}}>\r\n      <h3 style={{fontWeight: 'bold', marginBottom: 8}}>Auth Debug Info:</h3>\r\n      <div style={{lineHeight: 1.6}}>\r\n        <div>User: {auth.user ? 'EXISTS' : 'NULL'}</div>\r\n        <div>User Email: {auth.user?.email || 'N/A'}</div>\r\n        <div>Is Anonymous: {auth.user?.isAnonymous ? 'YES' : 'NO'}</div>\r\n        <div>User Profile: {auth.userProfile ? 'EXISTS' : 'NULL'}</div>\r\n        <div>User Role: {auth.userProfile?.role || 'N/A'}</div>\r\n        <div>Loading: {auth.loading ? 'YES' : 'NO'}</div>\r\n        <div>Auth Error: {auth.authError || 'None'}</div>\r\n        <div>isAuthenticated: {permissions.isAuthenticated ? 'YES' : 'NO'}</div>\r\n        <div>isMasterAdmin: {permissions.isMasterAdmin ? 'YES' : 'NO'}</div>\r\n        <div>hasFeatureAccess('dashboard'): {permissions.hasFeatureAccess('dashboard') ? 'YES' : 'NO'}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthDebugger;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Auth\\LoginPage.jsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../lib/firebase'.","line":4,"column":22,"nodeType":"Literal","endLine":4,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'onLogin' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth } from \"../lib/firebase\";\r\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\r\n\r\nconst LoginPage = ({ onLogin }) => {\r\n  const { signInWithGoogle, loading: googleLoading, error: googleError } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setLoading(true);\r\n    try {\r\n      const userCredential = await signInWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        password\r\n      );\r\n      console.log('Login successful:', userCredential.user);\r\n      // Navigation will be handled by auth state listener\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#f5f7fa'}}>\r\n      <div style={{background: '#fff', padding: 36, borderRadius: 10, boxShadow: '0 2px 16px #aaa', minWidth: 340}}>\r\n        <h2 style={{fontSize: 24, fontWeight: 'bold', marginBottom: 18}}>Admin Login</h2>\r\n        <form onSubmit={handleLogin} className=\"space-y-6\">\r\n          <div style={{marginBottom: 16}}>\r\n            <input type=\"email\" value={email} onChange={e => setEmail(e.target.value)} placeholder=\"Email\" style={{width: '100%', padding: 10, fontSize: 16, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          <div style={{marginBottom: 16}}>\r\n            <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} placeholder=\"Password\" style={{width: '100%', padding: 10, fontSize: 16, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          {error && <div style={{color: '#d32f2f', marginBottom: 10}}>{error}</div>}\r\n          <button type=\"submit\" disabled={loading} style={{width: '100%', padding: '10px 0', fontSize: 17, background: '#1976d2', color: '#fff', border: 'none', borderRadius: 6, fontWeight: 'bold', cursor: 'pointer'}}>\r\n            {loading ? 'Logging in...' : 'Login'}\r\n          </button>\r\n        {/* Google Sign-in Button */}\r\n        <div style={{marginTop: 18, textAlign: 'center'}}>\r\n          <button\r\n            onClick={signInWithGoogle}\r\n            disabled={googleLoading}\r\n            style={{\r\n              width: '100%',\r\n              padding: '10px 0',\r\n              fontSize: 17,\r\n              background: '#fff',\r\n              color: '#444',\r\n              border: '1px solid #ccc',\r\n              borderRadius: 6,\r\n              fontWeight: 'bold',\r\n              cursor: googleLoading ? 'not-allowed' : 'pointer',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              gap: 10\r\n            }}\r\n          >\r\n            <img src=\"https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg\" alt=\"Google\" style={{width: 22, height: 22, marginRight: 8}} />\r\n            {googleLoading ? 'Signing in...' : 'Sign in with Google'}\r\n          </button>\r\n          {googleError && <div style={{color: '#d32f2f', marginTop: 10}}>{googleError}</div>}\r\n        </div>\r\n        </form>\r\n        {/* Removed Test Direct Login button as requested */}\r\n        <div style={{marginTop: 18, textAlign: 'right'}}>\r\n          <a href=\"#\" style={{color: '#1976d2', textDecoration: 'underline', fontSize: 15}}>Forgot Password?</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Automation.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useDemo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState , useEffect } from \"react\";\r\n\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, query, onSnapshot } from 'firebase/firestore';\r\n\r\nconst demoAutomationRules = [\r\n  { id: 1, rule: \"Auto-send Welcome Email\", status: \"Active\" },\r\n  { id: 2, rule: \"Flag Overdue Payments\", status: \"Active\" },\r\n];\r\n\r\nexport default function Automation() {\r\n  const [rules, setRules] = useState(demoAutomationRules);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'automation'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setRules(firebaseData);\r\n          setUseDemo(false);\r\n        },\r\n        (error) => {\r\n          setRules(demoAutomationRules);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setRules(demoAutomationRules);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Automation</h1>\r\n        <div className=\"overflow-x-auto mb-8\">\r\n          <table className=\"min-w-full bg-white rounded shadow\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"py-2 px-4 text-left\">Rule</th>\r\n                <th className=\"py-2 px-4 text-left\">Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rules.length === 0 ? (\r\n                <tr>\r\n                  <td\r\n                    colSpan={2}\r\n                    className=\"text-center py-4 text-gray-500\"\r\n                  >\r\n                    No automation rules found.\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                rules.map((rule) => (\r\n                  <tr key={rule.id} className=\"border-b\">\r\n                    <td className=\"py-2 px-4\">{rule.rule}</td>\r\n                    <td className=\"py-2 px-4\">{rule.status}</td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\BarChart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Billing.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\BrandLogo.jsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useTheme\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":17,"column":7,"nodeType":"Identifier","endLine":17,"endColumn":15},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":19,"column":11,"nodeType":"BlockStatement","messageId":"unexpected","endLine":19,"endColumn":13,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[644,644],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// --- Dynamic Logo Component Example ---\r\n// Usage: <BrandLogo portalType={portalType} theme={theme} />\r\nimport React from \"react\";\r\nimport { useTheme } from \"@/theme/ThemeProvider\"; // falls back gracefully if not present\r\n\r\nfunction DefaultBrandLogo({ variant = \"dashboard\", className = \"\" }) {\r\n  const sizes = {\r\n    nav: \"w-10\",        // ~40px\r\n    header: \"w-10\",     // 32–40px\r\n    dashboard: \"w-40\",  // ~160px\r\n    login: \"w-40\",      // up to ~160px\r\n  };\r\n\r\n  let theme = \"light\";\r\n  try {\r\n    theme =\r\n      useTheme()?.theme ||\r\n      (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\");\r\n  } catch {}\r\n\r\n  const light = \"/brand/default/logo-horizontal-tagline-1200.png\";\r\n  const dark  = \"/brand/default/logo-white-tagline-1200.png\"; // or '/brand/default/logo-fullcolor-darkmode-1200.png'\r\n\r\n  const light2x = \"/brand/default/logo-horizontal-tagline-1200.png\";\r\n  const dark2x  = \"/brand/default/logo-white-tagline-1200.png\";\r\n\r\n  const src    = theme === \"dark\" ? dark : light;\r\n  const srcSet = theme === \"dark\"\r\n    ? `${dark} 1x, ${dark2x} 2x`\r\n    : `${light} 1x, ${light2x} 2x`;\r\n\r\n  return (\r\n    <img\r\n      src={src}\r\n      srcSet={srcSet}\r\n      alt=\"Speedy Credit Repair Logo\"\r\n      className={`h-auto ${sizes[variant]} ${className}`}\r\n      width={160}\r\n      height={48}\r\n      onError={e => { e.currentTarget.src = \"/brand/default/favicon.png\"; e.currentTarget.removeAttribute(\"srcset\"); }}\r\n    />\r\n  );\r\n}\r\n\r\n// Export BOTH ways so any import style works:\r\nexport default DefaultBrandLogo;        // import BrandLogo from \"@/components/BrandLogo\";\r\nexport const BrandLogo = DefaultBrandLogo; // import { BrandLogo } from \"@/components/BrandLogo\";","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Breadcrumbs.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Bulk.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useDemo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState , useEffect } from \"react\";\r\n\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, query, onSnapshot } from 'firebase/firestore';\r\n\r\nconst demoBulkActions = [\r\n  { id: 1, action: \"Send Welcome Email\", date: \"2025-08-10\", status: \"Completed\" },\r\n  { id: 2, action: \"Update Billing Status\", date: \"2025-08-12\", status: \"Completed\" },\r\n];\r\n\r\nexport default function Bulk() {\r\n  const [bulkActions, setBulkActions] = useState(demoBulkActions);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'bulk'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setBulkActions(firebaseData);\r\n          setUseDemo(false);\r\n        },\r\n        (error) => {\r\n          setBulkActions(demoBulkActions);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setBulkActions(demoBulkActions);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Bulk Actions</h1>\r\n        <div className=\"overflow-x-auto mb-8\">\r\n          <table className=\"min-w-full bg-white rounded shadow\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"py-2 px-4 text-left\">Action</th>\r\n                <th className=\"py-2 px-4 text-left\">Date</th>\r\n                <th className=\"py-2 px-4 text-left\">Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {bulkActions.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan={3} className=\"text-center py-4 text-gray-500\">\r\n                    No bulk actions found.\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                bulkActions.map(action => (\r\n                  <tr key={action.id} className=\"border-b\">\r\n                    <td className=\"py-2 px-4\">{action.action}</td>\r\n                    <td className=\"py-2 px-4\">{action.date}</td>\r\n                    <td className=\"py-2 px-4\">{action.status}</td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Calendar.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useDemo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState , useEffect } from \"react\";\r\n\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, query, onSnapshot } from 'firebase/firestore';\r\nconst demoAppointments = [\r\n  { id: 1, client: \"John Doe\", date: \"2025-08-18\", time: \"10:00 AM\", type: \"Consultation\" },\r\n  { id: 2, client: \"Jane Smith\", date: \"2025-08-19\", time: \"2:00 PM\", type: \"Follow-up\" },\r\n];\r\nexport default function Calendar() {\r\n  const [appointments, setAppointments] = useState(demoAppointments);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'calendar'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setAppointments(firebaseData);\r\n          setUseDemo(false);\r\n        },\r\n        (error) => {\r\n          setAppointments(demoAppointments);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setAppointments(demoAppointments);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Calendar</h1>\r\n        <div className=\"overflow-x-auto mb-8\">\r\n          <table className=\"min-w-full bg-white rounded shadow\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"py-2 px-4 text-left\">Client</th>\r\n                <th className=\"py-2 px-4 text-left\">Date</th>\r\n                <th className=\"py-2 px-4 text-left\">Time</th>\r\n                <th className=\"py-2 px-4 text-left\">Type</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appointments.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan={4} className=\"text-center py-4 text-gray-500\">No appointments found.</td>\r\n                </tr>\r\n              ) : (\r\n                appointments.map(appt => (\r\n                  <tr key={appt.id} className=\"border-b\">\r\n                    <td className=\"py-2 px-4\">{appt.client}</td>\r\n                    <td className=\"py-2 px-4\">{appt.date}</td>\r\n                    <td className=\"py-2 px-4\">{appt.time}</td>\r\n                    <td className=\"py-2 px-4\">{appt.type}</td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ChangeRequestsAdmin.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'doc' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'updateDoc' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"@/contexts/AuthContext\";\r\n\r\nconst ChangeRequestsAdmin = () => {\r\n  const { db } = useAuth();\r\n  const [requests, setRequests] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!db) return;\r\n    let unsub;\r\n    (async () => {\r\n      const { collection, onSnapshot, doc, updateDoc } = await import(\"firebase/firestore\");\r\n      unsub = onSnapshot(collection(db, \"changeRequests\"), (snapshot) => {\r\n        setRequests(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n        setLoading(false);\r\n      });\r\n    })();\r\n    return () => unsub && unsub();\r\n  }, [db]);\r\n\r\n  const handleApprove = async (id) => {\r\n    if (!db) return;\r\n    const { doc, updateDoc } = await import(\"firebase/firestore\");\r\n    await updateDoc(doc(db, \"changeRequests\", id), { status: \"approved\" });\r\n  };\r\n  const handleDeny = async (id) => {\r\n    if (!db) return;\r\n    const { doc, updateDoc } = await import(\"firebase/firestore\");\r\n    await updateDoc(doc(db, \"changeRequests\", id), { status: \"denied\" });\r\n  };\r\n\r\n  if (loading) return <div>Loading change requests...</div>;\r\n  if (!requests.length) return <div>No change requests.</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-xl font-bold mb-4\">Change Requests</h2>\r\n      <table className=\"min-w-full border\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"border px-2 py-1\">User</th>\r\n            <th className=\"border px-2 py-1\">Action</th>\r\n            <th className=\"border px-2 py-1\">Target</th>\r\n            <th className=\"border px-2 py-1\">Details</th>\r\n            <th className=\"border px-2 py-1\">Status</th>\r\n            <th className=\"border px-2 py-1\">Timestamp</th>\r\n            <th className=\"border px-2 py-1\">Approve/Deny</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {requests.map(r => (\r\n            <tr key={r.id}>\r\n              <td className=\"border px-2 py-1\">{r.userId}</td>\r\n              <td className=\"border px-2 py-1\">{r.action}</td>\r\n              <td className=\"border px-2 py-1\">{r.targetType}:{r.targetId}</td>\r\n              <td className=\"border px-2 py-1\">{r.details}</td>\r\n              <td className=\"border px-2 py-1\">{r.status}</td>\r\n              <td className=\"border px-2 py-1\">{r.timestamp?.toDate?.().toLocaleString?.() || \"\"}</td>\r\n              <td className=\"border px-2 py-1\">\r\n                {r.status === 'pending' && (\r\n                  <>\r\n                    <button className=\"bg-green-500 text-white px-2 py-1 rounded mr-2\" onClick={() => handleApprove(r.id)}>Approve</button>\r\n                    <button className=\"bg-red-500 text-white px-2 py-1 rounded\" onClick={() => handleDeny(r.id)}>Deny</button>\r\n                  </>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangeRequestsAdmin;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ClientContracts.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'addDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, addDoc, getDocs, query, where } from \"firebase/firestore\";\r\nimport ContractEditor from \"../components/ContractEditor\";\r\n\r\nconst ClientContracts = ({ clientId }) => {\r\n  const [contracts, setContracts] = useState([]);\r\n  const [showEditor, setShowEditor] = useState(false);\r\n  const [selectedContract, setSelectedContract] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!clientId) return;\r\n    const fetchContracts = async () => {\r\n      const q = query(collection(db, \"contracts\"), where(\"clientId\", \"==\", clientId));\r\n      const querySnapshot = await getDocs(q);\r\n      setContracts(querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n    };\r\n    fetchContracts();\r\n  }, [clientId]);\r\n\r\n  return (\r\n    <div className=\"mb-8\">\r\n      <h4 className=\"text-lg font-semibold mb-2\">Contracts</h4>\r\n      <button className=\"mb-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => { setShowEditor(true); setSelectedContract(null); }}>New Contract</button>\r\n      <ul className=\"space-y-2\">\r\n        {contracts.map(contract => (\r\n          <li key={contract.id} className=\"bg-gray-50 p-2 rounded flex justify-between items-center\">\r\n            <span>{contract.title} <span className=\"text-xs text-gray-400\">({contract.status})</span></span>\r\n            <button className=\"text-blue-600 underline\" onClick={() => { setShowEditor(true); setSelectedContract(contract); }}>View/Edit</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {showEditor && (\r\n        <ContractEditor contract={selectedContract} onClose={() => setShowEditor(false)} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientContracts;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ClientCreditReports.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'latest' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":105,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'previous' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":105,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, addDoc, getDocs, query, where, orderBy } from \"firebase/firestore\";\r\nimport { fetchIDIQReport } from \"../utils/idiqProvider\";\r\nimport { parseCreditReport } from \"../utils/aiCreditReportParser\";\r\nimport { exportToCSV, exportToPDF } from '../utils/exportUtils';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst ClientCreditReports = ({ clientId, enrollmentDate, refreshIntervalDays = 30 }) => {\r\n  const [reports, setReports] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [parsing, setParsing] = useState(false);\r\n  const [parsed, setParsed] = useState(null);\r\n  const [filter, setFilter] = useState('all');\r\n\r\n  useEffect(() => {\r\n    if (!clientId) return;\r\n    const fetchReports = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const q = query(collection(db, \"creditReports\"), where(\"clientId\", \"==\", clientId), orderBy(\"pulledAt\", \"desc\"));\r\n        const querySnapshot = await getDocs(q);\r\n        setReports(querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n      } catch (err) {\r\n        setError(\"Failed to load credit reports\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchReports();\r\n  }, [clientId]);\r\n\r\n  // Calculate next eligible pull date\r\n  const lastReport = reports[0];\r\n  const lastPull = lastReport ? new Date(lastReport.pulledAt) : (enrollmentDate ? new Date(enrollmentDate) : null);\r\n  const nextEligible = lastPull ? new Date(lastPull.getTime() + refreshIntervalDays * 24 * 60 * 60 * 1000) : null;\r\n  const canPull = !nextEligible || new Date() >= nextEligible;\r\n\r\n  const handlePullReport = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const report = await fetchIDIQReport({ clientId });\r\n      await addDoc(collection(db, \"creditReports\"), { ...report, clientId });\r\n      setReports(r => [report, ...r]);\r\n    } catch (err) {\r\n      setError(\"Failed to pull credit report\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleParse = async (rawReport) => {\r\n    setParsing(true);\r\n    setParsed(null);\r\n    try {\r\n      const result = await parseCreditReport(rawReport);\r\n      setParsed(result);\r\n    } catch {\r\n      setParsed({ summary: \"Failed to parse report.\" });\r\n    } finally {\r\n      setParsing(false);\r\n    }\r\n  };\r\n\r\n  // Filtering state\r\n  const filteredTradelines = parsed && parsed.tradelines\r\n    ? parsed.tradelines.filter(t => filter === 'all' ? true : t.status === filter)\r\n    : [];\r\n\r\n  // Export handlers\r\n  const handleExportCSV = () => {\r\n    if (parsed && parsed.tradelines) exportToCSV(parsed.tradelines, 'credit_report_tradelines.csv');\r\n  };\r\n  const handleExportPDF = () => {\r\n    if (parsed && parsed.tradelines) exportToPDF(parsed.tradelines, 'credit_report_tradelines.pdf');\r\n  };\r\n\r\n  // Dispute letter generation (simple template)\r\n  const handleGenerateLetter = (tradeline) => {\r\n    const letter = `To Whom It May Concern,\\n\\nI am writing to dispute the following item on my credit report:\\n\\nAccount: ${tradeline.account}\\nType: ${tradeline.type}\\nStatus: ${tradeline.status}\\nRemarks: ${tradeline.remarks}\\n\\nReason: ${tradeline.suggestedDispute || 'N/A'}\\n\\nPlease investigate and remove this item if it is found to be inaccurate.\\n\\nSincerely,\\n[Your Name]`;\r\n    const blob = new Blob([letter], { type: 'text/plain' });\r\n    saveAs(blob, `${tradeline.account}_dispute_letter.txt`);\r\n  };\r\n\r\n  // AI Precontract summary\r\n  const [precontractSummary, setPrecontractSummary] = useState(null);\r\n  const handlePrecontractSummary = async () => {\r\n    if (!parsed) return;\r\n    // Simulate AI summary (replace with LLM call in production)\r\n    const positives = parsed.tradelines.filter(t => t.status === 'Positive').length;\r\n    const negatives = parsed.tradelines.filter(t => t.status === 'Negative').length;\r\n    const likelyActions = parsed.recommendations?.join('\\n') || 'No actions recommended.';\r\n    setPrecontractSummary(\r\n      `Precontract Summary:\\n\\nPositives: ${positives} tradelines in good standing.\\nNegatives: ${negatives} tradelines with issues.\\n\\nSpeedy Credit Repair suggests:\\n${likelyActions}`\r\n    );\r\n  };\r\n\r\n  // Compare two reports for changes\r\n  const [comparison, setComparison] = useState(null);\r\n  const handleCompareReports = async () => {\r\n    if (reports.length < 2) return;\r\n    const [latest, previous] = reports;\r\n    // Simulate AI comparison (replace with LLM call in production)\r\n    const changes = [];\r\n    // For demo, just compare tradeline counts\r\n    const latestNeg = (parsed?.tradelines || []).filter(t => t.status === 'Negative').length;\r\n    const prevNeg = 2; // Placeholder, should parse previous.rawReport\r\n    if (latestNeg < prevNeg) changes.push('Negative tradelines decreased.');\r\n    if (latestNeg > prevNeg) changes.push('Negative tradelines increased.');\r\n    setComparison({\r\n      summary: `Compared to previous report: ${changes.join(' ') || 'No major changes detected.'}`\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-8\">\r\n      <h4 className=\"text-lg font-semibold mb-2\">Credit Reports</h4>\r\n      {canPull ? (\r\n        <button className=\"mb-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={handlePullReport} disabled={loading}>\r\n          {loading ? \"Pulling...\" : \"Pull New Report\"}\r\n        </button>\r\n      ) : (\r\n        <div className=\"mb-2 text-gray-500 text-sm\">Next eligible pull: {nextEligible && nextEligible.toLocaleDateString()}</div>\r\n      )}\r\n      {error && <div className=\"text-red-600 mb-2\">{error}</div>}\r\n      <ul className=\"space-y-2\">\r\n        {reports.map(report => (\r\n          <li key={report.id} className=\"bg-gray-50 p-2 rounded flex flex-col\">\r\n            <span className=\"font-semibold\">{report.provider} - {new Date(report.pulledAt).toLocaleString()}</span>\r\n            <button className=\"text-blue-600 underline w-fit\" onClick={() => handleParse(report.rawReport)} disabled={parsing}>Parse & Suggest Disputes</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {parsing && <div className=\"text-gray-500 mt-2\">Parsing report...</div>}\r\n      {parsed && (\r\n        <div className=\"mt-4 p-3 bg-green-50 rounded\">\r\n          <div className=\"font-semibold mb-2\">AI Dispute Suggestions</div>\r\n          <div className=\"mb-2 text-sm\">{parsed.summary}</div>\r\n          {parsed.aiSummary && <div className=\"mb-2 text-xs italic text-gray-700\">{parsed.aiSummary}</div>}\r\n          {parsed.recommendations && (\r\n            <div className=\"mb-2\">\r\n              <div className=\"font-semibold\">Recommendations:</div>\r\n              <ul className=\"list-disc pl-5\">\r\n                {parsed.recommendations.map((rec, i) => (\r\n                  <li key={i} className=\"text-blue-700\">{rec}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n          <div className=\"flex gap-2 mb-2\">\r\n            <button className=\"px-2 py-1 bg-blue-500 text-white rounded text-xs\" onClick={handleExportCSV}>Export CSV</button>\r\n            <button className=\"px-2 py-1 bg-blue-500 text-white rounded text-xs\" onClick={handleExportPDF}>Export PDF</button>\r\n            <select className=\"border p-1 rounded text-xs\" value={filter} onChange={e => setFilter(e.target.value)}>\r\n              <option value=\"all\">All</option>\r\n              <option value=\"Negative\">Negative Only</option>\r\n              <option value=\"Positive\">Positive Only</option>\r\n            </select>\r\n            <button className=\"px-2 py-1 bg-orange-500 text-white rounded text-xs\" onClick={handlePrecontractSummary}>AI Precontract Summary</button>\r\n            <button className=\"px-2 py-1 bg-teal-600 text-white rounded text-xs\" onClick={handleCompareReports}>Compare to Previous</button>\r\n          </div>\r\n          {precontractSummary && (\r\n            <div className=\"mb-2 p-2 bg-orange-100 rounded text-xs whitespace-pre-wrap\">{precontractSummary}</div>\r\n          )}\r\n          {comparison && (\r\n            <div className=\"mb-2 p-2 bg-teal-100 rounded text-xs whitespace-pre-wrap\">{comparison.summary}</div>\r\n          )}\r\n          <table className=\"w-full text-xs border mt-2\">\r\n            <thead>\r\n              <tr className=\"bg-gray-200\">\r\n                <th className=\"p-1 border\">Account</th>\r\n                <th className=\"p-1 border\">Type</th>\r\n                <th className=\"p-1 border\">Status</th>\r\n                <th className=\"p-1 border\">Balance</th>\r\n                <th className=\"p-1 border\">Opened</th>\r\n                <th className=\"p-1 border\">Last Reported</th>\r\n                <th className=\"p-1 border\">Remarks</th>\r\n                <th className=\"p-1 border\">Dispute</th>\r\n                <th className=\"p-1 border\">Letter</th>\r\n                <th className=\"p-1 border\">AI Notes</th>\r\n                <th className=\"p-1 border\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredTradelines.map((t, i) => (\r\n                <tr key={i} className={t.status === 'Negative' ? 'bg-red-50' : 'bg-green-50'}>\r\n                  <td className=\"border p-1\">{t.account}</td>\r\n                  <td className=\"border p-1\">{t.type}</td>\r\n                  <td className=\"border p-1\">{t.status}</td>\r\n                  <td className=\"border p-1\">{t.balance !== undefined ? `$${t.balance}` : ''}</td>\r\n                  <td className=\"border p-1\">{t.opened}</td>\r\n                  <td className=\"border p-1\">{t.lastReported}</td>\r\n                  <td className=\"border p-1\">{t.remarks}</td>\r\n                  <td className=\"border p-1\">{t.suggestedDispute}</td>\r\n                  <td className=\"border p-1\">{t.letterTemplate}</td>\r\n                  <td className=\"border p-1\">{t.aiNotes}</td>\r\n                  <td className=\"border p-1\">\r\n                    {t.status === 'Negative' && (\r\n                      <button className=\"px-2 py-1 bg-purple-600 text-white rounded text-xs\" onClick={() => handleGenerateLetter(t)}>\r\n                        Generate Dispute Letter\r\n                      </button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientCreditReports;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ClientMap.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Clients.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState , useEffect, useRef } from \"react\";\r\n\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, query, onSnapshot, addDoc, updateDoc, deleteDoc, doc } from 'firebase/firestore';\r\nimport { demoClients } from \"../data/demoData\";\r\n\r\nexport default function Clients() {\r\n  const [clients, setClients] = useState(demoClients);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n  // Firebase listener with fallback to demo data\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'clients'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setClients(firebaseData);\r\n          setUseDemo(false);\r\n        },\r\n        (error) => {\r\n          console.warn('Firebase failed, using demo data:', error);\r\n          setClients(demoClients);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setClients(demoClients);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [form, setForm] = useState({ name: \"\", email: \"\", phone: \"\", status: \"Active\", notes: \"\" });\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const filteredClients = clients.filter(c =>\r\n    c.name.toLowerCase().includes(search.toLowerCase()) ||\r\n    c.email.toLowerCase().includes(search.toLowerCase()) ||\r\n    c.phone.includes(search)\r\n  );\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n    setForm(f => ({ ...f, [name]: value }));\r\n  };\r\n\r\n  // Real CRUD functions\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    if (useDemo) {\r\n      if (editingId) {\r\n        setClients(clients.map(c => c.id === editingId ? { ...form, id: editingId } : c));\r\n        setEditingId(null);\r\n      } else {\r\n        setClients([...clients, { ...form, id: Date.now() }]);\r\n      }\r\n    } else {\r\n      try {\r\n        if (editingId) {\r\n          await updateDoc(doc(db, 'clients', editingId), { ...form });\r\n          setEditingId(null);\r\n        } else {\r\n          await addDoc(collection(db, 'clients'), { ...form });\r\n        }\r\n      } catch (error) {\r\n        console.error('Firebase CRUD error:', error);\r\n      }\r\n    }\r\n    setForm({ name: \"\", email: \"\", phone: \"\", status: \"Active\", notes: \"\" });\r\n    setShowModal(false);\r\n  };\r\n\r\n  const handleEdit = client => {\r\n    setForm(client);\r\n    setEditingId(client.id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleDelete = async id => {\r\n    if (useDemo) {\r\n      setClients(clients.filter(c => c.id !== id));\r\n    } else {\r\n      try {\r\n        await deleteDoc(doc(db, 'clients', id));\r\n      } catch (error) {\r\n        console.error('Firebase delete error:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Clients</h1>\r\n        <div className=\"mb-4 flex flex-col md:flex-row gap-2 items-center\">\r\n          <input type=\"text\" value={search} onChange={e => setSearch(e.target.value)} placeholder=\"Search by name, email, or phone...\" className=\"border rounded px-3 py-2 w-full md:w-1/3\" />\r\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\" onClick={() => { setShowModal(true); setEditingId(null); setForm({ name: \"\", email: \"\", phone: \"\", status: \"Active\", notes: \"\" }); }}>Add Client</button>\r\n        </div>\r\n        <div className=\"overflow-x-auto mb-4\">\r\n          <table className=\"min-w-full bg-white rounded shadow\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"py-2 px-4 text-left\">Name</th>\r\n                <th className=\"py-2 px-4 text-left\">Email</th>\r\n                <th className=\"py-2 px-4 text-left\">Phone</th>\r\n                <th className=\"py-2 px-4 text-left\">Status</th>\r\n                <th className=\"py-2 px-4 text-left\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredClients.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan={5} className=\"text-center py-4 text-gray-500\">No clients found.</td>\r\n                </tr>\r\n              ) : (\r\n                filteredClients.map(client => (\r\n                  <tr key={client.id} className=\"border-b\">\r\n                    <td className=\"py-2 px-4\">{client.name}</td>\r\n                    <td className=\"py-2 px-4\">{client.email}</td>\r\n                    <td className=\"py-2 px-4\">{client.phone}</td>\r\n                    <td className=\"py-2 px-4\">{client.status}</td>\r\n                    <td className=\"py-2 px-4 flex gap-2\">\r\n                      <button className=\"bg-yellow-500 text-white px-2 py-1 rounded text-xs hover:bg-yellow-600\" onClick={() => handleEdit(client)}>Edit</button>\r\n                      <button className=\"bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600\" onClick={() => handleDelete(client.id)}>Delete</button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {showModal && (\r\n          <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n            <div className=\"bg-white rounded shadow-lg p-8 w-full max-w-md\">\r\n              <h2 className=\"text-lg font-semibold mb-4\">{editingId ? \"Edit Client\" : \"Add New Client\"}</h2>\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"grid grid-cols-1 gap-4 mb-4\">\r\n                  <input type=\"text\" name=\"name\" value={form.name} onChange={handleInputChange} placeholder=\"Name\" className=\"border rounded px-3 py-2 w-full\" required />\r\n                  <input type=\"email\" name=\"email\" value={form.email} onChange={handleInputChange} placeholder=\"Email\" className=\"border rounded px-3 py-2 w-full\" required />\r\n                  <input type=\"text\" name=\"phone\" value={form.phone} onChange={handleInputChange} placeholder=\"Phone\" className=\"border rounded px-3 py-2 w-full\" required />\r\n                  <select name=\"status\" value={form.status} onChange={handleInputChange} className=\"border rounded px-3 py-2 w-full\">\r\n                    <option value=\"Active\">Active</option>\r\n                    <option value=\"Inactive\">Inactive</option>\r\n                  </select>\r\n                  <textarea name=\"notes\" value={form.notes} onChange={handleInputChange} placeholder=\"Notes\" className=\"border rounded px-3 py-2 w-full\" rows={3} />\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <button type=\"submit\" className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\">{editingId ? \"Update Client\" : \"Add Client\"}</button>\r\n                  <button type=\"button\" className=\"bg-gray-300 px-4 py-2 rounded\" onClick={() => { setShowModal(false); setEditingId(null); setForm({ name: \"\", email: \"\", phone: \"\", status: \"Active\", notes: \"\" }); }}>Cancel</button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Communications.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useDemo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState , useEffect } from \"react\";\r\n\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, query, onSnapshot } from 'firebase/firestore';\r\n\r\nconst demoCommunications = [\r\n  {\r\n    id: 1,\r\n    client: \"John Doe\",\r\n    type: \"Email\",\r\n    subject: \"Welcome\",\r\n    date: \"2025-08-10\",\r\n  },\r\n  {\r\n    id: 2,\r\n    client: \"Jane Smith\",\r\n    type: \"SMS\",\r\n    subject: \"Appointment Reminder\",\r\n    date: \"2025-08-12\",\r\n  },\r\n];\r\n\r\nexport default function Communications() {\r\n  const [communications, setCommunications] = useState(demoCommunications);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'communications'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setCommunications(firebaseData);\r\n          setUseDemo(false);\r\n        },\r\n        (error) => {\r\n          setCommunications(demoCommunications);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setCommunications(demoCommunications);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Communications</h1>\r\n        <div className=\"overflow-x-auto mb-8\">\r\n          <table className=\"min-w-full bg-white rounded shadow\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"py-2 px-4 text-left\">Client</th>\r\n                <th className=\"py-2 px-4 text-left\">Type</th>\r\n                <th className=\"py-2 px-4 text-left\">Subject</th>\r\n                <th className=\"py-2 px-4 text-left\">Date</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {communications.length === 0 ? (\r\n                <tr>\r\n                  <td\r\n                    colSpan={4}\r\n                    className=\"text-center py-4 text-gray-500\"\r\n                  >\r\n                    No communications found.\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                communications.map((comm) => (\r\n                  <tr key={comm.id} className=\"border-b\">\r\n                    <td className=\"py-2 px-4\">{comm.client}</td>\r\n                    <td className=\"py-2 px-4\">{comm.type}</td>\r\n                    <td className=\"py-2 px-4\">{comm.subject}</td>\r\n                    <td className=\"py-2 px-4\">{comm.date}</td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ConsultantBooking.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ContactDetailPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'getDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'setCollaborators' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":18,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":41},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":211,"column":106,"nodeType":"Identifier","messageId":"unusedVar","endLine":211,"endColumn":107}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { doc, getDoc, onSnapshot, collection } from 'firebase/firestore';\r\nimport { db } from \"@/lib/firebase\";\r\nimport LeadRevenueDetailWidget from './LeadRevenueDetailWidget.jsx';\r\nimport { motion } from 'framer-motion';\r\nimport { FaEnvelope, FaUserTie, FaStar, FaTag, FaChartLine, FaArrowLeft, FaCheckCircle, FaFileUpload, FaComments, FaListUl, FaUsers, FaRobot } from 'react-icons/fa';\r\nimport useSound from 'use-sound';\r\n\r\nexport default function ContactDetailPage() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [contact, setContact] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [tab, setTab] = useState('Details');\r\n  const [activity, setActivity] = useState([]);\r\n  const [documents, setDocuments] = useState([]);\r\n  const [collaborators, setCollaborators] = useState([\"Chris\", \"Alex\"]);\r\n  const [playClick] = useSound(\"/sounds/click.mp3\", { volume: 0.3 });\r\n  const [playSuccess] = useSound(\"/sounds/success.mp3\", { volume: 0.3 });\r\n  const [aiInsights, setAiInsights] = useState(false);\r\n  const fileInputRef = useRef();\r\n\r\n  // Real-time contact sync\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const unsub = onSnapshot(doc(db, 'contacts', id), docSnap => {\r\n      if (docSnap.exists()) {\r\n        setContact({ id, ...docSnap.data() });\r\n      } else {\r\n        setContact(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    // Real-time activity feed\r\n    const unsubActivity = onSnapshot(collection(db, 'contacts', id, 'activity'), snap => {\r\n      setActivity(snap.docs.map(d => ({ id: d.id, ...d.data() })));\r\n    });\r\n    // Real-time documents\r\n    const unsubDocs = onSnapshot(collection(db, 'contacts', id, 'documents'), snap => {\r\n      setDocuments(snap.docs.map(d => ({ id: d.id, ...d.data() })));\r\n    });\r\n    return () => { unsub(); unsubActivity(); unsubDocs(); };\r\n  }, [id]);\r\n\r\n  if (loading) return (\r\n    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-100 via-purple-100 to-indigo-100\">\r\n      <div className=\"text-center animate-pulse\">\r\n        <div className=\"mx-auto mb-4 h-16 w-16 rounded-full bg-gradient-to-br from-blue-400 to-purple-600 flex items-center justify-center shadow-lg\">\r\n          <FaUserTie className=\"text-white text-3xl\" />\r\n        </div>\r\n        <div className=\"text-lg text-gray-500 font-semibold\">Loading contact details...</div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n  if (!contact) return (\r\n    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-red-100 via-yellow-100 to-gray-100\">\r\n      <div className=\"text-center\">\r\n        <div className=\"mx-auto mb-4 h-16 w-16 rounded-full bg-gradient-to-br from-red-400 to-yellow-400 flex items-center justify-center shadow-lg\">\r\n          <FaUserTie className=\"text-white text-3xl\" />\r\n        </div>\r\n        <div className=\"text-lg text-red-500 font-semibold\">Contact not found.</div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n\r\n  // Avatar placeholder\r\n  const avatar = (\r\n    <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration: 0.6 }} className=\"h-20 w-20 rounded-full bg-gradient-to-br from-blue-500 via-purple-500 to-indigo-600 flex items-center justify-center shadow-xl border-4 border-white\">\r\n      <FaUserTie className=\"text-white text-4xl\" />\r\n    </motion.div>\r\n  );\r\n\r\n  // Status badge\r\n  const statusBadge = contact.urgencyLevel ? (\r\n    <motion.span initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-bold shadow bg-gradient-to-r from-blue-400 to-purple-500 text-white ml-2 animate-fade-in`}>\r\n      <FaStar className=\"mr-1 text-yellow-300\" /> {contact.urgencyLevel}\r\n    </motion.span>\r\n  ) : null;\r\n\r\n  // Category badge\r\n  const categoryBadge = contact.category ? (\r\n    <motion.span initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-bold shadow bg-gradient-to-r from-indigo-400 to-blue-500 text-white ml-2 animate-fade-in\">\r\n      <FaTag className=\"mr-1\" /> {contact.category}\r\n    </motion.span>\r\n  ) : null;\r\n\r\n  // Lead score badge\r\n  const leadScoreBadge = contact.leadScore ? (\r\n    <motion.span initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-bold shadow bg-gradient-to-r from-green-400 to-blue-400 text-white ml-2 animate-fade-in\">\r\n      <FaCheckCircle className=\"mr-1\" /> Lead Score: {aiInsights ? Math.round(contact.leadScore * 1.1 + 7) : contact.leadScore}\r\n    </motion.span>\r\n  ) : null;\r\n\r\n  return (\r\n    <motion.section initial={{ opacity: 0, y: 40 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }} className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-indigo-100 py-10 px-2 md:px-4\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        {/* Real-time collaborators */}\r\n        <div className=\"absolute top-4 right-4 z-30 flex gap-2\">\r\n          {collaborators.map((c, i) => (\r\n            <span key={i} className=\"flex items-center gap-1 px-2 py-1 rounded-full bg-gradient-to-r from-blue-500 to-green-500 text-white shadow text-xs font-bold animate-pulse\"><FaUsers /> {c}</span>\r\n          ))}\r\n        </div>\r\n        <div className=\"mb-6 flex items-center gap-4\">\r\n          <button className=\"flex items-center gap-2 px-4 py-2 rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold shadow hover:scale-105 transition-transform duration-200\" onClick={() => navigate(-1)}>\r\n            <FaArrowLeft className=\"text-lg\" /> Back to Contacts\r\n          </button>\r\n          <button className={`px-4 py-2 rounded-lg font-semibold border bg-green-600 text-white border-green-600 shadow-lg ml-2 flex items-center gap-2`} onClick={() => { setAiInsights(a => !a); playClick(); }} aria-label=\"AI Insights\">\r\n            <FaRobot /> {aiInsights ? \"AI Insights On\" : \"AI Insights\"}\r\n          </button>\r\n        </div>\r\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.7 }} className=\"bg-white bg-opacity-80 backdrop-blur-lg rounded-2xl shadow-2xl p-8 relative overflow-hidden border border-gray-200\">\r\n          <div className=\"absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-blue-400 via-purple-400 to-indigo-400 animate-gradient-x\" />\r\n          <div className=\"flex flex-col md:flex-row items-center md:items-start gap-6 mb-6\">\r\n            {avatar}\r\n            <div className=\"flex-1\">\r\n              <h1 className=\"text-4xl font-extrabold text-blue-700 mb-2 tracking-tight flex items-center\">\r\n                {contact.firstName} {contact.lastName}\r\n                {statusBadge}\r\n                {categoryBadge}\r\n                {leadScoreBadge}\r\n              </h1>\r\n              <div className=\"flex flex-wrap gap-4 items-center mb-2\">\r\n                <div className=\"flex items-center gap-2 text-gray-700 text-lg\">\r\n                  <FaEnvelope className=\"text-blue-400\" />\r\n                  <span className=\"font-semibold\">{contact.email}</span>\r\n                </div>\r\n                {contact.phone && (\r\n                  <div className=\"flex items-center gap-2 text-gray-700 text-lg\">\r\n                    <FaUserTie className=\"text-purple-400\" />\r\n                    <span className=\"font-semibold\">{contact.phone}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"flex gap-4 mt-2\">\r\n                {contact.source && (\r\n                  <span className=\"text-xs px-3 py-1 rounded-full bg-blue-50 text-blue-700 font-semibold shadow\">Source: {contact.source}</span>\r\n                )}\r\n                {contact.timeline && (\r\n                  <span className=\"text-xs px-3 py-1 rounded-full bg-purple-50 text-purple-700 font-semibold shadow\">Timeline: {contact.timeline}</span>\r\n                )}\r\n                {contact.responseStatus && (\r\n                  <span className=\"text-xs px-3 py-1 rounded-full bg-green-50 text-green-700 font-semibold shadow\">Status: {contact.responseStatus}</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* Tabbed interface */}\r\n          <div className=\"mb-6 flex gap-2 border-b border-gray-200 pb-2\">\r\n            {['Details', 'Timeline', 'Activity', 'Documents', 'BI'].map(t => (\r\n              <button key={t} className={`px-4 py-2 rounded-t-lg font-semibold shadow ${tab === t ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white' : 'bg-gray-100 text-gray-700'} transition-all duration-200`} onClick={() => { setTab(t); playClick(); }} aria-selected={tab === t} aria-label={`Show ${t}`}>\r\n                {t === 'Details' && <FaListUl className=\"inline mr-1\" />}\r\n                {t === 'Timeline' && <FaChartLine className=\"inline mr-1\" />}\r\n                {t === 'Activity' && <FaComments className=\"inline mr-1\" />}\r\n                {t === 'Documents' && <FaFileUpload className=\"inline mr-1\" />}\r\n                {t === 'BI' && <FaStar className=\"inline mr-1\" />}\r\n                {t}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          {/* Tab content */}\r\n          <div className=\"min-h-[200px]\">\r\n            {tab === 'Details' && (\r\n              <div className=\"p-2\">\r\n                <div className=\"flex flex-col gap-2\">\r\n                  <div className=\"font-bold text-lg text-blue-700\">Contact Details</div>\r\n                  <div className=\"text-gray-700\">{contact.notes || 'No additional notes.'}</div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {tab === 'Timeline' && (\r\n              <div className=\"p-2\">\r\n                <div className=\"font-bold text-lg text-purple-700 mb-2\">Timeline</div>\r\n                <div className=\"flex flex-col gap-4\">\r\n                  {(contact.timelineEntries || []).length === 0 ? <div className=\"text-gray-400\">No timeline entries.</div> : (\r\n                    contact.timelineEntries.map((entry, idx) => (\r\n                      <motion.div key={idx} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 + idx * 0.1 }} className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4 shadow flex flex-col gap-2\">\r\n                        <div className=\"font-semibold text-blue-700\">{entry.title}</div>\r\n                        <div className=\"text-xs text-gray-500\">{entry.date}</div>\r\n                        <div className=\"text-gray-700\">{entry.description}</div>\r\n                        {entry.expanded && <div className=\"text-xs text-gray-600 mt-2\">{entry.details}</div>}\r\n                        <button className=\"text-xs text-purple-600 underline\" onClick={() => { contact.timelineEntries[idx].expanded = !entry.expanded; setContact({ ...contact }); playClick(); }}>Expand</button>\r\n                      </motion.div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n            {tab === 'Activity' && (\r\n              <div className=\"p-2\">\r\n                <div className=\"font-bold text-lg text-green-700 mb-2\">Activity Feed</div>\r\n                <div className=\"flex flex-col gap-4\">\r\n                  {activity.length === 0 ? <div className=\"text-gray-400\">No activity yet.</div> : (\r\n                    activity.map((act, idx) => (\r\n                      <motion.div key={act.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 + idx * 0.1 }} className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-4 shadow flex flex-col gap-2\">\r\n                        <div className=\"font-semibold text-green-700\">{act.type}</div>\r\n                        <div className=\"text-xs text-gray-500\">{act.date}</div>\r\n                        <div className=\"text-gray-700\">{act.message}</div>\r\n                        {act.user && <div className=\"text-xs text-gray-600 mt-2\">By: {act.user}</div>}\r\n                      </motion.div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n            {tab === 'Documents' && (\r\n              <div className=\"p-2\">\r\n                <div className=\"font-bold text-lg text-indigo-700 mb-2\">Documents</div>\r\n                <div className=\"flex flex-col gap-4\">\r\n                  <div className=\"mb-2\">\r\n                    <input type=\"file\" multiple ref={fileInputRef} style={{ display: 'none' }} onChange={e => { playSuccess(); }} />\r\n                    <button className=\"bg-blue-500 text-white px-4 py-2 rounded shadow hover:bg-blue-600\" onClick={() => fileInputRef.current.click()}><FaFileUpload className=\"inline mr-1\" /> Upload Documents</button>\r\n                  </div>\r\n                  {documents.length === 0 ? <div className=\"text-gray-400\">No documents uploaded.</div> : (\r\n                    documents.map((doc, idx) => (\r\n                      <motion.div key={doc.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 + idx * 0.1 }} className=\"bg-gradient-to-r from-indigo-50 to-blue-50 rounded-xl p-4 shadow flex flex-col gap-2\">\r\n                        <div className=\"font-semibold text-indigo-700\">{doc.name}</div>\r\n                        <div className=\"text-xs text-gray-500\">{doc.uploadedAt}</div>\r\n                        <div className=\"text-gray-700\">{doc.description}</div>\r\n                        {doc.url && <a href={doc.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-xs text-blue-600 underline\">Preview</a>}\r\n                      </motion.div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n            {tab === 'BI' && (\r\n              <div className=\"p-2\">\r\n                <div className=\"flex items-center gap-2 mb-4\">\r\n                  <FaChartLine className=\"text-indigo-500 text-2xl\" />\r\n                  <h2 className=\"text-2xl font-bold text-indigo-700 tracking-tight\">Business Intelligence</h2>\r\n                </div>\r\n                <div className=\"bg-gradient-to-br from-indigo-50 via-blue-50 to-purple-50 rounded-xl shadow-lg p-6 border border-indigo-100 animate-fade-in\">\r\n                  <LeadRevenueDetailWidget lead={contact} />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </motion.div>\r\n      </div>\r\n      <style>{`\r\n        .animate-gradient-x {\r\n          background-size: 200% 100%;\r\n          animation: gradient-x 3s linear infinite;\r\n        }\r\n        @keyframes gradient-x {\r\n          0% { background-position: 0% 50%; }\r\n          100% { background-position: 100% 50%; }\r\n        }\r\n        .animate-fade-in {\r\n          animation: fadeIn 0.7s ease;\r\n        }\r\n        @keyframes fadeIn {\r\n          from { opacity: 0; transform: translateY(20px); }\r\n          to { opacity: 1; transform: translateY(0); }\r\n        }\r\n      `}</style>\r\n    </motion.section>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ContactTimelineModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ContractEditor.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'setTemplate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { SIGNATURE_PROVIDERS, getProviderHandler } from \"../utils/eSignatureProviders\";\r\n\r\n// For MVP, use a textarea for template, and a simple signature pad\r\nconst defaultTemplate = `Contract Title: {{title}}\r\nClient Name: {{clientName}}\r\nDate: {{date}}\r\n\r\nTerms:\r\n{{terms}}\r\n\r\nSignature: ___________________________`;\r\n\r\nconst ContractEditor = ({ contract, onClose }) => {\r\n  const [template, setTemplate] = useState(contract?.template || defaultTemplate);\r\n  const [fields, setFields] = useState({\r\n    title: contract?.title || \"\",\r\n    clientName: contract?.clientName || \"\",\r\n    date: contract?.date || new Date().toLocaleDateString(),\r\n    terms: contract?.terms || \"\",\r\n    signature: contract?.signature || \"\"\r\n  });\r\n  const [signed, setSigned] = useState(!!contract?.signature);\r\n  const [provider, setProvider] = useState('docusign');\r\n\r\n  const handleChange = e => setFields({ ...fields, [e.target.name]: e.target.value });\r\n\r\n  const handleSign = () => setSigned(true);\r\n\r\n  const handleSendForSignature = () => {\r\n    const handler = getProviderHandler(provider);\r\n    handler({ ...fields, template });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    // TODO: Save to Firestore\r\n    alert(\"Contract saved (Firestore integration needed)\");\r\n    onClose();\r\n  };\r\n\r\n  const filledTemplate = template\r\n    .replace(\"{{title}}\", fields.title)\r\n    .replace(\"{{clientName}}\", fields.clientName)\r\n    .replace(\"{{date}}\", fields.date)\r\n    .replace(\"{{terms}}\", fields.terms)\r\n    .replace(\"___________________________\", signed ? fields.clientName : \"___________________________\");\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white rounded-lg shadow-lg p-8 max-w-lg w-full relative\">\r\n        <button className=\"absolute top-2 right-2 text-gray-500\" onClick={onClose}>✕</button>\r\n        <h2 className=\"text-xl font-bold mb-4\">{contract ? \"Edit Contract\" : \"New Contract\"}</h2>\r\n        <input className=\"mb-2 w-full border p-2 rounded\" name=\"title\" placeholder=\"Title\" value={fields.title} onChange={handleChange} />\r\n        <input className=\"mb-2 w-full border p-2 rounded\" name=\"clientName\" placeholder=\"Client Name\" value={fields.clientName} onChange={handleChange} />\r\n        <input className=\"mb-2 w-full border p-2 rounded\" name=\"date\" placeholder=\"Date\" value={fields.date} onChange={handleChange} />\r\n        <textarea className=\"mb-2 w-full border p-2 rounded\" name=\"terms\" placeholder=\"Terms\" value={fields.terms} onChange={handleChange} rows={4} />\r\n        <div className=\"mb-4 border p-2 rounded bg-gray-50 whitespace-pre-wrap min-h-[120px]\">{filledTemplate}</div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block mb-1 font-semibold\">E-Signature Provider</label>\r\n          <select className=\"w-full border p-2 rounded\" value={provider} onChange={e => setProvider(e.target.value)}>\r\n            {SIGNATURE_PROVIDERS.map(p => (\r\n              <option key={p.id} value={p.id}>{p.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <button className=\"px-4 py-2 bg-purple-600 text-white rounded mb-2 w-full\" onClick={handleSendForSignature}>\r\n          Send for Signature\r\n        </button>\r\n        {!signed && <button className=\"px-4 py-2 bg-green-600 text-white rounded w-full\" onClick={handleSign}>Sign as Client (Built-in)</button>}\r\n        {signed && <div className=\"mb-2 text-green-700 font-semibold\">Signed by {fields.clientName}</div>}\r\n        <button className=\"mt-2 px-4 py-2 bg-blue-600 text-white rounded w-full\" onClick={handleSave}>Save Contract</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContractEditor;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\CreateUserModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\CreditReportWorkflow.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'fetchReport'. Either include it or remove the dependency array.","line":90,"column":6,"nodeType":"ArrayExpression","endLine":90,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchReport, memberEmail]","fix":{"range":[4404,4417],"text":"[fetchReport, memberEmail]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\n\r\n// Credit Report Intake Form Component\r\nexport function CreditReportIntake({ onSuccess }) {\r\n  const [form, setForm] = useState({\r\n    firstName: '', lastName: '', email: '', birthDate: '', ssn: '', street: '', city: '', state: '', zip: '', offerCode: '', planCode: ''\r\n  });\r\n  const [status, setStatus] = useState('idle');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleChange = e => {\r\n    setForm({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    setStatus('submitting');\r\n    setError('');\r\n    try {\r\n      const res = await fetch('/api/enroll', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(form)\r\n      });\r\n      const data = await res.json();\r\n      if (res.ok) {\r\n        setStatus('success');\r\n        onSuccess && onSuccess(data);\r\n      } else {\r\n        setStatus('error');\r\n        setError(data.message || 'Submission failed.');\r\n      }\r\n    } catch (err) {\r\n      setStatus('error');\r\n      setError('Network or server error.');\r\n    }\r\n  };\r\n\r\n  if (status === 'success') return <div>Thank you! Your application was received. We will contact you soon.</div>;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4 max-w-lg mx-auto bg-white p-6 rounded shadow\">\r\n      <h2 className=\"text-xl font-bold mb-2\">Get Your Free Credit Report & Review</h2>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <input name=\"firstName\" value={form.firstName} onChange={handleChange} placeholder=\"First Name\" required maxLength={15} className=\"p-2 border rounded\" />\r\n        <input name=\"lastName\" value={form.lastName} onChange={handleChange} placeholder=\"Last Name\" required maxLength={15} className=\"p-2 border rounded\" />\r\n        <input name=\"email\" value={form.email} onChange={handleChange} placeholder=\"Email\" type=\"email\" required className=\"p-2 border rounded col-span-2\" />\r\n        <input name=\"birthDate\" value={form.birthDate} onChange={handleChange} placeholder=\"Date of Birth\" type=\"date\" required className=\"p-2 border rounded col-span-2\" />\r\n        <input name=\"ssn\" value={form.ssn} onChange={handleChange} placeholder=\"SSN (9 digits)\" required maxLength={9} className=\"p-2 border rounded col-span-2\" />\r\n        <input name=\"street\" value={form.street} onChange={handleChange} placeholder=\"Street Address\" required maxLength={50} className=\"p-2 border rounded col-span-2\" />\r\n        <input name=\"city\" value={form.city} onChange={handleChange} placeholder=\"City\" required maxLength={30} className=\"p-2 border rounded\" />\r\n        <input name=\"state\" value={form.state} onChange={handleChange} placeholder=\"State (CA)\" required maxLength={2} className=\"p-2 border rounded\" />\r\n        <input name=\"zip\" value={form.zip} onChange={handleChange} placeholder=\"Zip\" required maxLength={5} className=\"p-2 border rounded\" />\r\n        <input name=\"offerCode\" value={form.offerCode} onChange={handleChange} placeholder=\"Offer Code\" required className=\"p-2 border rounded\" />\r\n        <input name=\"planCode\" value={form.planCode} onChange={handleChange} placeholder=\"Plan Code\" required className=\"p-2 border rounded\" />\r\n      </div>\r\n      <button type=\"submit\" className=\"bg-green-700 text-white py-2 px-4 rounded w-full\">{status === 'submitting' ? 'Submitting...' : 'Start My Free Credit Review'}</button>\r\n      {error && <div className=\"text-red-600 mt-2\">{error}</div>}\r\n    </form>\r\n  );\r\n}\r\n\r\n// Credit Report Analysis Workflow Component\r\nexport function CreditReportAnalysis({ memberEmail }) {\r\n  const [report, setReport] = useState(null);\r\n  const [ai, setAI] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const fetchReport = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      const res = await fetch(`/api/report?email=${encodeURIComponent(memberEmail)}`);\r\n      const data = await res.json();\r\n      if (res.ok) {\r\n        setReport(data.report);\r\n        setAI(data.aiAnalysis);\r\n      } else {\r\n        setError(data.message || 'Could not fetch report.');\r\n      }\r\n    } catch (err) {\r\n      setError('Network or server error.');\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (memberEmail) fetchReport();\r\n  }, [memberEmail]);\r\n\r\n  if (loading) return <div>Loading credit report...</div>;\r\n  if (error) return <div className=\"text-red-600\">{error}</div>;\r\n  if (!report) return <div>No report found.</div>;\r\n\r\n  return (\r\n    <div className=\"bg-gray-50 p-4 rounded shadow max-w-2xl mx-auto mt-6\">\r\n      <h2 className=\"text-lg font-bold mb-2\">Credit Report Summary</h2>\r\n      <ul className=\"mb-4\">\r\n        <li><b>Open Accounts:</b> {report.openAccounts}</li>\r\n        <li><b>Closed Accounts:</b> {report.closedAccounts}</li>\r\n        <li><b>Delinquent Accounts:</b> {report.delinquentAccounts}</li>\r\n        <li><b>Derogatory Accounts:</b> {report.derogatoryAccounts}</li>\r\n        <li><b>Total Balances:</b> ${report.totalBalances}</li>\r\n        <li><b>Utilization:</b> {report.utilization}</li>\r\n        <li><b>On-Time Payment %:</b> {report.onTimePaymentPercentage}</li>\r\n        <li><b>Late Payment %:</b> {report.latePaymentPercentage}</li>\r\n        {/* Add more fields as needed */}\r\n      </ul>\r\n      {ai && (\r\n        <div className=\"bg-green-50 border-l-4 border-green-400 p-3 mb-2\">\r\n          <b>AI Analysis:</b><br />\r\n          <div><b>Urgency:</b> {ai.urgency}</div>\r\n          <div><b>Contact Type:</b> {ai.contactType}</div>\r\n          <div><b>Notes:</b> {ai.notes}</div>\r\n        </div>\r\n      )}\r\n      {/* Staff actions: notes, flag, follow-up, etc. */}\r\n      <textarea className=\"w-full p-2 border rounded mt-2\" placeholder=\"Add staff notes or follow-up actions...\"></textarea>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\CreditScoreTracker.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Dashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'metrics' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'recentActivity' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":16,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'quickActions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":23,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'logoDark' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":35,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":15},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":255,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9942,9954],"text":"Today&apos;s Date"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9942,9954],"text":"Today&lsquo;s Date"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9942,9954],"text":"Today&#39;s Date"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9942,9954],"text":"Today&rsquo;s Date"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\n// ...removed for production...\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n// ...existing code...\r\nimport RevenueForecastWidget from './RevenueForecastWidget.jsx';\r\nimport AdvancedAnalytics from './AdvancedAnalytics.jsx';\r\nimport DisputeLetterDashboardWidget from './DisputeLetterDashboardWidget.jsx';\r\n\r\nconst metrics = [\r\n  { label: \"Total Clients\", value: 128, icon: \"👥\", color: \"bg-blue-100 text-blue-700\" },\r\n  { label: \"Active Disputes\", value: 34, icon: \"⚡\", color: \"bg-yellow-100 text-yellow-700\" },\r\n  { label: \"Success Rate\", value: \"92%\", icon: \"✅\", color: \"bg-green-100 text-green-700\" },\r\n  { label: \"Monthly Revenue\", value: \"$12,400\", icon: \"💰\", color: \"bg-purple-100 text-purple-700\" },\r\n];\r\n\r\nconst recentActivity = [\r\n  { id: 1, type: \"Dispute Created\", client: \"John Doe\", date: \"2025-08-14\", status: \"Open\" },\r\n  { id: 2, type: \"Client Added\", client: \"Jane Smith\", date: \"2025-08-13\", status: \"Active\" },\r\n  { id: 3, type: \"Dispute Resolved\", client: \"Carlos Ruiz\", date: \"2025-08-12\", status: \"Resolved\" },\r\n  { id: 4, type: \"Payment Received\", client: \"Emily Chen\", date: \"2025-08-11\", status: \"Completed\" },\r\n];\r\n\r\nconst quickActions = [\r\n  { label: \"Add Client\", href: \"/contacts\", color: \"bg-blue-600\" },\r\n  { label: \"New Dispute\", href: \"/dispute-center\", color: \"bg-yellow-500\" },\r\n  { label: \"Generate Report\", href: \"/analytics\", color: \"bg-green-600\" },\r\n  { label: \"Send Letter\", href: \"/letters\", color: \"bg-purple-600\" },\r\n];\r\n\r\n\r\nimport { collection, onSnapshot } from 'firebase/firestore';\r\nimport { db } from \"@/lib/firebase\";\r\n\r\nconst logoLight = '/brand/default/logo-horizontal-tagline-512.png';\r\nconst logoDark = '/brand/default/logo-white-tagline-512.png';\r\n\r\nconst ThemeToggle = () => {\r\n  const [theme, setTheme] = React.useState(() => localStorage.getItem('theme') || 'light');\r\n  React.useEffect(() => {\r\n    document.documentElement.classList.toggle('dark', theme === 'dark');\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n  return (\r\n    <button\r\n      className=\"ml-4 px-3 py-2 rounded bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200\"\r\n      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\r\n    >\r\n      {theme === 'dark' ? '🌙' : '☀️'}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default function Dashboard() {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const unsub = onSnapshot(collection(db, 'contacts'), (snapshot) => {\r\n      const allContacts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      const validContacts = allContacts.filter(contact =>\r\n        contact.firstName && contact.lastName && contact.email &&\r\n        contact.firstName !== 'N/A' && contact.lastName !== 'N/A' && contact.email !== 'N/A'\r\n      );\r\n      setContacts(validContacts);\r\n      setLoading(false);\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // ...removed for production...\r\n  }, [contacts]);\r\n\r\n  // Conversion funnel\r\n  const totalLeads = contacts.filter(c => (c.category && c.category.toLowerCase() === 'lead')).length;\r\n  const totalClients = contacts.filter(c => (c.category && c.category.toLowerCase() === 'client')).length;\r\n  const totalContacts = contacts.length;\r\n  const leadToClient = totalLeads ? Math.round((totalClients / totalLeads) * 100) : 0;\r\n\r\n  // Lead source performance\r\n  const sources = ['Yelp', 'Google', 'Facebook', 'Website', 'Affiliate'];\r\n  const sourceStats = sources.map(src => {\r\n    const srcContacts = contacts.filter(c =>\r\n      c.source && c.source.toLowerCase() === src.toLowerCase() &&\r\n      c.firstName && c.lastName && c.email &&\r\n      c.firstName !== 'N/A' && c.lastName !== 'N/A' && c.email !== 'N/A'\r\n    );\r\n    const conversions = srcContacts.filter(c => c.category && c.category.toLowerCase() === 'client').length;\r\n    return {\r\n      source: src,\r\n      total: srcContacts.length,\r\n      conversionRate: srcContacts.length ? Math.round((conversions / srcContacts.length) * 100) : 0\r\n    };\r\n  });\r\n\r\n  const responseStats = sources.map(src => {\r\n    const srcContacts = contacts.filter(c => c.source === src && c.platformResponseTime);\r\n    const avg = srcContacts.length ? Math.round(srcContacts.reduce((sum, c) => sum + Number(c.platformResponseTime || 0), 0) / srcContacts.length) : null;\r\n    let color = 'bg-gray-200';\r\n    if (avg !== null) {\r\n      if (src === 'Yelp' && avg <= 5) color = 'bg-green-200';\r\n      else if (avg <= 60) color = 'bg-yellow-200';\r\n      else color = 'bg-red-200';\r\n    }\r\n    return { source: src, avg, color };\r\n  });\r\n\r\n  const scoreBuckets = [1,2,3,4,5,6,7,8,9,10];\r\n  const scoreStats = scoreBuckets.map(score => {\r\n    const bucketContacts = contacts.filter(c => Number(c.leadScore) === score);\r\n    const conversions = bucketContacts.filter(c => c.category === 'client' || c.status === 'Client').length;\r\n    return {\r\n      score,\r\n      total: bucketContacts.length,\r\n      conversionRate: bucketContacts.length ? Math.round((conversions / bucketContacts.length) * 100) : 0\r\n    };\r\n  });\r\n  const highValueLeads = contacts.filter(c => Number(c.leadScore) >= 8).length;\r\n\r\n  // --- AdvancedAnalytics Data Preparation ---\r\n  const revenueHistory = [\r\n    { label: 'Mar', actual: 9000, forecast: 8500 },\r\n    { label: 'Apr', actual: 10500, forecast: 10000 },\r\n    { label: 'May', actual: 12000, forecast: 11500 },\r\n    { label: 'Jun', actual: 11000, forecast: 10800 },\r\n    { label: 'Jul', actual: 13000, forecast: 12500 },\r\n    { label: 'Aug', actual: 14000, forecast: 13500 },\r\n  ];\r\n\r\n  const forecastAccuracy = [\r\n    { label: 'Mar', actual: 9000, predicted: 8500 },\r\n    { label: 'Apr', actual: 10500, predicted: 10000 },\r\n    { label: 'May', actual: 12000, predicted: 11500 },\r\n    { label: 'Jun', actual: 11000, predicted: 10800 },\r\n    { label: 'Jul', actual: 13000, predicted: 12500 },\r\n    { label: 'Aug', actual: 14000, predicted: 13500 },\r\n  ];\r\n\r\n  const conversionTrends = [\r\n    { label: 'Mar', rate: 32 },\r\n    { label: 'Apr', rate: 35 },\r\n    { label: 'May', rate: 38 },\r\n    { label: 'Jun', rate: 36 },\r\n    { label: 'Jul', rate: 40 },\r\n    { label: 'Aug', rate: 42 },\r\n  ];\r\n\r\n  const leadSourceStats = [\r\n    { source: 'Yelp', value: 10 },\r\n    { source: 'Google', value: 15 },\r\n    { source: 'Facebook', value: 8 },\r\n    { source: 'Website', value: 12 },\r\n    { source: 'Affiliate', value: 5 },\r\n  ];\r\n\r\n  // EARLY DEBUG: Confirm Dashboard is rendering\r\n  // ...removed for production...\r\n\r\n  // WidgetSkeleton for loading states\r\n  const WidgetSkeleton = () => (\r\n    <div className=\"animate-pulse\">\r\n      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\r\n      <div className=\"h-8 bg-gray-200 rounded w-1/2 mb-2\"></div>\r\n      <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\r\n    </div>\r\n  );\r\n\r\n  // Enhanced metrics for dashboard\r\n  const leads = contacts.filter(c => c.category && c.category.toLowerCase() === 'lead');\r\n  const clients = contacts.filter(c => c.category && c.category.toLowerCase() === 'client');\r\n  const revenue = 12400; // Placeholder, replace with actual revenue logic\r\n  const metricsEnhanced = [\r\n    {\r\n      title: 'Total Leads',\r\n      value: leads.length,\r\n      icon: '📊',\r\n      gradient: 'from-blue-500 to-blue-600',\r\n      change: '+12%'\r\n    },\r\n    {\r\n      title: 'Active Clients',\r\n      value: clients.length,\r\n      icon: '👥',\r\n      gradient: 'from-green-500 to-green-600',\r\n      change: '+5%'\r\n    },\r\n    {\r\n      title: 'Revenue This Month',\r\n      value: `$${revenue.toLocaleString()}`,\r\n      icon: '💰',\r\n      gradient: 'from-purple-500 to-purple-600',\r\n      change: '+18%'\r\n    },\r\n    {\r\n      title: 'Conversion Rate',\r\n      value: leadToClient + '%',\r\n      icon: '🎯',\r\n      gradient: 'from-orange-500 to-orange-600',\r\n      change: '+3%'\r\n    }\r\n  ];\r\n\r\n  // Import motion from framer-motion\r\n  let motion;\r\n  try {\r\n    motion = require('framer-motion').motion;\r\n  } catch (e) {\r\n    motion = { div: (props) => <div {...props} /> };\r\n  }\r\n\r\n  // Import useAuth for user info\r\n  let useAuth;\r\n  try {\r\n    useAuth = require('../contexts/AuthContext').useAuth;\r\n  } catch (e) {\r\n    useAuth = () => ({ user: null });\r\n  }\r\n  const { user } = useAuth();\r\n\r\n  // Import useNavigate for quick actions\r\n  // ...existing code...\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-10 px-4\">\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        {/* Enhanced Welcome Banner */}\r\n        <div className=\"bg-gradient-to-r from-blue-600 to-green-600 rounded-xl p-8 mb-8 text-white shadow-xl\">\r\n          <div className=\"flex justify-between items-start\">\r\n            {/* Logo update in header */}\r\n            <img\r\n              src={logoLight}\r\n              alt=\"Speedy Credit Repair Logo\"\r\n              className=\"h-32 w-auto max-w-3xl\"\r\n              onError={(e) => {e.target.src = '/brand/default/favicon.png'}}\r\n            />\r\n            <div className=\"flex flex-col items-end\">\r\n              {/* Theme toggle fixed position */}\r\n              <div className=\"fixed top-4 right-4 z-50 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\r\n                <ThemeToggle />\r\n              </div>\r\n              <p className=\"text-sm opacity-75 mt-2\">Logged in as</p>\r\n              <p className=\"font-semibold\">{user?.email}</p>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <h1 className=\"text-4xl font-bold mb-2\">\r\n              Welcome back to SpeedyCRM! 👋\r\n            </h1>\r\n            <p className=\"text-xl opacity-90\">\r\n              Your business hub for managing contacts, analytics, and revenue\r\n            </p>\r\n            <div className=\"mt-6 flex gap-4\">\r\n              <div className=\"bg-white/20 backdrop-blur rounded-lg px-4 py-2\">\r\n                <span className=\"text-sm opacity-75\">Today's Date</span>\r\n                <p className=\"text-lg font-semibold\">{new Date().toLocaleDateString()}</p>\r\n              </div>\r\n              <div className=\"bg-white/20 backdrop-blur rounded-lg px-4 py-2\">\r\n                <span className=\"text-sm opacity-75\">Active Clients</span>\r\n                <p className=\"text-lg font-semibold\">{clients.length || 0}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Enhanced Metrics Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n          {metricsEnhanced.map((metric, index) => (\r\n            <motion.div\r\n              key={metric.title}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: index * 0.1 }}\r\n              className={`bg-gradient-to-r ${metric.gradient} rounded-xl p-6 text-white shadow-lg hover:shadow-xl transition-shadow`}\r\n            >\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <p className=\"text-sm opacity-75\">{metric.title}</p>\r\n                  <p className=\"text-3xl font-bold mt-2\">{metric.value}</p>\r\n                  <p className=\"text-sm mt-2 opacity-90\">{metric.change} from last month</p>\r\n                </div>\r\n                <span className=\"text-3xl\">{metric.icon}</span>\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Quick Actions Section */}\r\n        <div className=\"mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">Quick Actions</h2>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            <button\r\n              onClick={() => navigate('/add-client')}\r\n              className=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-md transition-shadow flex flex-col items-center\"\r\n            >\r\n              <span className=\"text-2xl mb-2\">➕</span>\r\n              <span className=\"text-sm\">Add Client</span>\r\n            </button>\r\n            <button\r\n              onClick={() => navigate('/reports')}\r\n              className=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-md transition-shadow flex flex-col items-center\"\r\n            >\r\n              <span className=\"text-2xl mb-2\">📈</span>\r\n              <span className=\"text-sm\">Reports</span>\r\n            </button>\r\n            <button\r\n              onClick={() => navigate('/disputes')}\r\n              className=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-md transition-shadow flex flex-col items-center\"\r\n            >\r\n              <span className=\"text-2xl mb-2\">📝</span>\r\n              <span className=\"text-sm\">Disputes</span>\r\n            </button>\r\n            <button\r\n              onClick={() => navigate('/contacts')}\r\n              className=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-md transition-shadow flex flex-col items-center\"\r\n            >\r\n              <span className=\"text-2xl mb-2\">👤</span>\r\n              <span className=\"text-sm\">View Clients</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Migration tool removed for production. Professional dashboard layout. */}\r\n\r\n        {/* Contact Conversion Funnel */}\r\n        <div className=\"mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-3\">Contact Conversion Funnel</h2>\r\n          {loading ? (\r\n            <WidgetSkeleton />\r\n          ) : totalContacts === 0 ? (\r\n            <WidgetSkeleton />\r\n          ) : (\r\n            <div className=\"flex flex-col md:flex-row gap-6 items-center\">\r\n              <div className=\"flex flex-col items-center\">\r\n                <div className=\"text-2xl font-bold\">{totalLeads}</div>\r\n                <div className=\"text-sm text-gray-600\">Leads</div>\r\n              </div>\r\n              <span className=\"mx-2 text-2xl\">→</span>\r\n              <div className=\"flex flex-col items-center\">\r\n                <div className=\"text-2xl font-bold\">{totalClients}</div>\r\n                <div className=\"text-sm text-gray-600\">Clients</div>\r\n                <div className=\"text-green-600 text-xs\">{leadToClient}% conversion <span className=\"ml-1\">↑</span></div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Revenue Forecast Widget (NEW) */}\r\n        {/* Revenue Forecast Widget (NEW) */}\r\n        {/* Professional notification or loading state can be added here if needed */}\r\n        <RevenueForecastWidget\r\n          leads={contacts}\r\n          month={new Date().getMonth() + 1}\r\n          year={new Date().getFullYear()}\r\n        />\r\n\r\n        {/* Lead Source Performance */}\r\n        <div className=\"mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-3\">Lead Source Performance</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {sourceStats.map(stat => (\r\n              <div key={stat.source} className=\"bg-white rounded-lg shadow p-4 flex flex-col gap-2\">\r\n                <div className=\"font-bold text-lg\">{stat.source}</div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"text-gray-700\">Total: {stat.total}</div>\r\n                  <div className=\"text-green-600 font-semibold\">Conversion: {stat.conversionRate}%</div>\r\n                </div>\r\n                <div className=\"w-full h-3 bg-gray-200 rounded\">\r\n                  <div style={{ width: `${stat.conversionRate}%` }} className=\"h-3 bg-blue-500 rounded transition-all duration-500\"></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Response Time Metrics */}\r\n        <div className=\"mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-3\">Response Time Metrics</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {responseStats.map(stat => (\r\n              <div key={stat.source} className={`rounded-lg shadow p-4 flex flex-col gap-2 ${stat.color}`}>\r\n                <div className=\"font-bold text-lg\">{stat.source}</div>\r\n                <div className=\"text-gray-700\">Avg Response: {stat.avg !== null ? `${stat.avg} min` : 'N/A'}</div>\r\n                <div className=\"text-xs text-gray-500\">Target: {stat.source === 'Yelp' ? '<5min critical' : '<1hr'}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Lead Scoring Effectiveness */}\r\n        <div className=\"mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-3\">Lead Scoring Effectiveness</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"bg-white rounded-lg shadow p-4\">\r\n              <div className=\"font-bold mb-2\">Score Distribution</div>\r\n              <div className=\"flex gap-1 items-end h-24\">\r\n                {scoreStats.map(stat => (\r\n                  <div key={stat.score} className=\"flex flex-col items-center justify-end\" style={{ width: 24 }}>\r\n                    <div className=\"bg-blue-400 rounded w-4\" style={{ height: `${stat.total * 6}px` }}></div>\r\n                    <div className=\"text-xs mt-1\">{stat.score}</div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"bg-white rounded-lg shadow p-4 flex flex-col gap-2\">\r\n              <div className=\"font-bold mb-2\">Conversion by Score</div>\r\n              {scoreStats.map(stat => (\r\n                <div key={stat.score} className=\"flex items-center gap-2\">\r\n                  <div className=\"text-gray-700\">Score {stat.score}:</div>\r\n                  <div className=\"text-green-600 font-semibold\">{stat.conversionRate}%</div>\r\n                </div>\r\n              ))}\r\n              <div className=\"mt-2 text-blue-700 font-bold\">High-Value Leads (8+): {highValueLeads}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Advanced Analytics Component */}\r\n        <AdvancedAnalytics\r\n          revenueHistory={revenueHistory}\r\n          forecastAccuracy={forecastAccuracy}\r\n          conversionTrends={conversionTrends}\r\n          leadSourceStats={leadSourceStats}\r\n        />\r\n\r\n        {/* Dispute Letter Summary Widget */}\r\n        <DisputeLetterDashboardWidget />\r\n\r\n        {/* ...existing metrics, quick actions, recent activity... */}\r\n        {/* Client Portal Access Button */}\r\n        <div className=\"mt-8 flex justify-center\">\r\n          <button\r\n            onClick={() => navigate('/client-portal')}\r\n            className=\"px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:shadow-lg transition-shadow\"\r\n          >\r\n            Launch Client Portal →\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\DashboardCalendar.jsx","messages":[{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'Calendar' as identifier for default import.","line":2,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":2,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nconst DashboardCalendar = ({ onChange, value }) => {\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\r\n      <h3 className=\"font-bold mb-2 text-lg\">Calendar</h3>\r\n      <Calendar onChange={onChange} value={value} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardCalendar;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\DashboardCustomizer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'children' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { useAuth } from \"@/contexts/AuthContext\";\r\n\r\nconst defaultWidgets = [\r\n  { id: \"leads\", label: \"Total Leads\" },\r\n  { id: \"clients\", label: \"Total Clients\" },\r\n  { id: \"revenue\", label: \"Revenue\" },\r\n  { id: \"campaigns\", label: \"Active Campaigns\" },\r\n  { id: \"calendar\", label: \"Calendar\" },\r\n  { id: \"analytics\", label: \"Analytics\" },\r\n];\r\n\r\nconst DashboardCustomizer = ({ children, widgetComponents }) => {\r\n  const { db, user, userId } = useAuth();\r\n  const [widgets, setWidgets] = useState([]);\r\n  const [visible, setVisible] = useState({});\r\n  const [allowed, setAllowed] = useState(null);\r\n  const isAdmin = user?.role === 'admin';\r\n\r\n  // Fetch allowed widgets from Firestore\r\n  useEffect(() => {\r\n    if (!db || !userId) return;\r\n    let unsub;\r\n    (async () => {\r\n      const { doc, onSnapshot } = await import('firebase/firestore');\r\n      unsub = onSnapshot(doc(db, 'users', userId), (docSnap) => {\r\n        setAllowed(docSnap.exists() ? docSnap.data().allowedWidgets : null);\r\n      });\r\n    })();\r\n    return () => unsub && unsub();\r\n  }, [db, userId]);\r\n\r\n  useEffect(() => {\r\n    const saved = JSON.parse(localStorage.getItem(\"dashboardLayout\"));\r\n    if (saved) {\r\n      setWidgets(saved.widgets);\r\n      setVisible(saved.visible);\r\n    } else {\r\n      setWidgets(defaultWidgets);\r\n      setVisible(Object.fromEntries(defaultWidgets.map(w => [w.id, true])));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"dashboardLayout\", JSON.stringify({ widgets, visible }));\r\n  }, [widgets, visible]);\r\n\r\n  const onDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n    const reordered = Array.from(widgets);\r\n    const [removed] = reordered.splice(result.source.index, 1);\r\n    reordered.splice(result.destination.index, 0, removed);\r\n    setWidgets(reordered);\r\n  };\r\n\r\n  // Only show toggles for widgets allowed by admin (or all if admin)\r\n  const toggleableWidgets = isAdmin ? widgets : widgets.filter(w => !allowed || allowed.includes(w.id));\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mb-4 flex flex-wrap gap-4\">\r\n        {toggleableWidgets.map(w => (\r\n          <label key={w.id} className=\"flex items-center gap-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={visible[w.id]}\r\n              onChange={e => setVisible(v => ({ ...v, [w.id]: e.target.checked }))}\r\n              disabled={!isAdmin && allowed && !allowed.includes(w.id)}\r\n            />\r\n            {w.label}\r\n          </label>\r\n        ))}\r\n      </div>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"dashboard-widgets\" direction=\"horizontal\">\r\n          {(provided) => (\r\n            <div ref={provided.innerRef} {...provided.droppableProps} className=\"flex flex-wrap gap-8 mb-12\">\r\n              {widgets.map((w, i) =>\r\n                visible[w.id] && widgetComponents[w.id] ? (\r\n                  <Draggable key={w.id} draggableId={w.id} index={i}>\r\n                    {(prov) => (\r\n                      <div ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>\r\n                        {widgetComponents[w.id]()}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ) : null\r\n              )}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardCustomizer;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\DateRangePicker.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\DisputeCenter.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, query, onSnapshot, addDoc } from 'firebase/firestore';\r\nimport { demoDisputes } from \"../data/demoData\";\r\nimport jsPDF from \"jspdf\";\r\n\r\nexport default function DisputeCenter() {\r\n  const [disputes, setDisputes] = useState(demoDisputes);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n  const [form, setForm] = useState({\r\n    clientName: \"\",\r\n    bureau: \"Experian\",\r\n    type: \"Credit Report Error\",\r\n    status: \"Open\",\r\n    reason: \"Incorrect info\",\r\n    notes: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'disputes'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setDisputes(firebaseData.length ? firebaseData : demoDisputes);\r\n          setUseDemo(firebaseData.length === 0);\r\n        },\r\n        (error) => {\r\n          setDisputes(demoDisputes);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setDisputes(demoDisputes);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleAddDispute = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    const newDispute = {\r\n      ...form,\r\n      dateCreated: new Date().toISOString().slice(0, 10),\r\n      id: Math.random().toString(36).slice(2, 10),\r\n    };\r\n    try {\r\n      if (!useDemo) {\r\n        await addDoc(collection(db, 'disputes'), newDispute);\r\n      }\r\n      setDisputes([newDispute, ...disputes]);\r\n      setForm({\r\n        clientName: \"\",\r\n        bureau: \"Experian\",\r\n        type: \"Credit Report Error\",\r\n        status: \"Open\",\r\n        reason: \"Incorrect info\",\r\n        notes: \"\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.text(\"Disputes Export\", 10, 10);\r\n    disputes.forEach((d, i) => {\r\n      doc.text(\r\n        `${i + 1}. ${d.clientName} | ${d.bureau} | ${d.type} | ${d.status} | ${d.dateCreated}`,\r\n        10,\r\n        20 + i * 10\r\n      );\r\n    });\r\n    doc.save(\"disputes.pdf\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-3xl mx-auto p-4 space-y-8\">\r\n      <h1 className=\"text-2xl font-bold mb-2\">Dispute Center</h1>\r\n      {/* Dispute Stats */}\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\r\n        <div className=\"bg-blue-100 rounded p-4 text-center\">\r\n          <div className=\"text-lg font-semibold text-blue-700\">Open</div>\r\n          <div className=\"text-2xl font-bold\">{disputes.filter((d) => d.status === \"Open\").length}</div>\r\n        </div>\r\n        <div className=\"bg-green-100 rounded p-4 text-center\">\r\n          <div className=\"text-lg font-semibold text-green-700\">Resolved</div>\r\n          <div className=\"text-2xl font-bold\">{disputes.filter((d) => d.status === \"Resolved\").length}</div>\r\n        </div>\r\n        <div className=\"bg-yellow-100 rounded p-4 text-center\">\r\n          <div className=\"text-lg font-semibold text-yellow-700\">In Progress</div>\r\n          <div className=\"text-2xl font-bold\">{disputes.filter((d) => d.status === \"In Progress\").length}</div>\r\n        </div>\r\n        <div className=\"bg-gray-100 rounded p-4 text-center\">\r\n          <div className=\"text-lg font-semibold text-gray-700\">Total</div>\r\n          <div className=\"text-2xl font-bold\">{disputes.length}</div>\r\n        </div>\r\n      </div>\r\n      {/* Add Dispute Form */}\r\n      <form onSubmit={handleAddDispute} className=\"bg-gray-50 rounded p-4 mb-6 space-y-2\">\r\n        <div className=\"flex flex-col md:flex-row gap-2\">\r\n          <input name=\"clientName\" value={form.clientName} onChange={handleChange} required placeholder=\"Client Name\" className=\"border p-2 rounded flex-1\" />\r\n          <select name=\"bureau\" value={form.bureau} onChange={handleChange} className=\"border p-2 rounded\">\r\n            <option>Experian</option>\r\n            <option>Equifax</option>\r\n            <option>TransUnion</option>\r\n          </select>\r\n          <select name=\"type\" value={form.type} onChange={handleChange} className=\"border p-2 rounded\">\r\n            <option>Credit Report Error</option>\r\n            <option>Identity Theft</option>\r\n            <option>Other</option>\r\n          </select>\r\n          <select name=\"status\" value={form.status} onChange={handleChange} className=\"border p-2 rounded\">\r\n            <option>Open</option>\r\n            <option>In Progress</option>\r\n            <option>Resolved</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"flex flex-col md:flex-row gap-2\">\r\n          <input name=\"reason\" value={form.reason} onChange={handleChange} required placeholder=\"Reason Code/Description\" className=\"border p-2 rounded flex-1\" />\r\n          <input name=\"notes\" value={form.notes} onChange={handleChange} placeholder=\"Notes\" className=\"border p-2 rounded flex-1\" />\r\n        </div>\r\n        <button type=\"submit\" className=\"bg-blue-600 text-white px-4 py-2 rounded mt-2\" disabled={loading}>\r\n          {loading ? \"Adding...\" : \"Add Dispute\"}\r\n        </button>\r\n        <button type=\"button\" className=\"ml-2 bg-gray-200 px-4 py-2 rounded\" onClick={exportPDF}>\r\n          Export PDF\r\n        </button>\r\n      </form>\r\n      {/* Dispute List Table */}\r\n      <div className=\"overflow-x-auto mb-8\">\r\n        <table className=\"min-w-full bg-white rounded shadow\">\r\n          <thead>\r\n            <tr className=\"bg-gray-100\">\r\n              <th className=\"py-2 px-4 text-left\">Client</th>\r\n              <th className=\"py-2 px-4 text-left\">Bureau</th>\r\n              <th className=\"py-2 px-4 text-left\">Type</th>\r\n              <th className=\"py-2 px-4 text-left\">Status</th>\r\n              <th className=\"py-2 px-4 text-left\">Date Created</th>\r\n              <th className=\"py-2 px-4 text-left\">Reason</th>\r\n              <th className=\"py-2 px-4 text-left\">Notes</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {disputes.length === 0 ? (\r\n              <tr>\r\n                <td colSpan={7} className=\"text-center py-4 text-gray-500\">\r\n                  No disputes found.\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              disputes.map((dispute) => (\r\n                <tr key={dispute.id} className=\"border-b\">\r\n                  <td className=\"py-2 px-4\">{dispute.clientName}</td>\r\n                  <td className=\"py-2 px-4\">{dispute.bureau}</td>\r\n                  <td className=\"py-2 px-4\">{dispute.type}</td>\r\n                  <td className=\"py-2 px-4\">{dispute.status}</td>\r\n                  <td className=\"py-2 px-4\">{dispute.dateCreated}</td>\r\n                  <td className=\"py-2 px-4\">{dispute.reason}</td>\r\n                  <td className=\"py-2 px-4\">{dispute.notes}</td>\r\n                </tr>\r\n              ))\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\DisputeLetterDashboardWidget.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\DisputeLetterGenerator.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'updateDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'doc' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":6},{"ruleId":"no-unused-vars","severity":1,"message":"'setStatus' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":61,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'docRef' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":92,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport jsPDF from 'jspdf';\r\nimport { db } from \"@/lib/firebase\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  updateDoc,\r\n  doc,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  Timestamp\r\n} from 'firebase/firestore';\r\n\r\nconst TEMPLATES = [\r\n  {\r\n    type: 'initial',\r\n    label: 'Initial Dispute Letter',\r\n    body: `To Whom It May Concern,\\n\\nI am writing to dispute the following information on my credit report. Please investigate the items listed below and remove any inaccurate information.\\n\\nAccount Name: {{accountName}}\\nAccount Number: {{accountNumber}}\\nReason: {{reason}}\\n\\nSincerely,\\n{{clientName}}\\n{{clientAddress}}`\r\n  },\r\n  {\r\n    type: 'followup',\r\n    label: 'Follow-Up Letter',\r\n    body: `To Whom It May Concern,\\n\\nThis is a follow-up to my previous dispute regarding the account below. Please provide an update on the investigation.\\n\\nAccount Name: {{accountName}}\\nAccount Number: {{accountNumber}}\\nDate of First Dispute: {{dateSent}}\\n\\nSincerely,\\n{{clientName}}\\n{{clientAddress}}`\r\n  },\r\n  {\r\n    type: 'goodwill',\r\n    label: 'Goodwill Letter',\r\n    body: `To Whom It May Concern,\\n\\nI am requesting a goodwill adjustment for the following account, which has been paid in full. Please consider removing the negative mark as a gesture of goodwill.\\n\\nAccount Name: {{accountName}}\\nAccount Number: {{accountNumber}}\\n\\nSincerely,\\n{{clientName}}\\n{{clientAddress}}`\r\n  },\r\n  {\r\n    type: 'identity',\r\n    label: 'Identity Theft Letter',\r\n    body: `To Whom It May Concern,\\n\\nI am a victim of identity theft and am disputing the following fraudulent account. Please investigate and remove this item from my credit report.\\n\\nAccount Name: {{accountName}}\\nAccount Number: {{accountNumber}}\\n\\nSincerely,\\n{{clientName}}\\n{{clientAddress}}`\r\n  },\r\n  {\r\n    type: 'verification',\r\n    label: 'Verification Request Letter',\r\n    body: `To Whom It May Concern,\\n\\nI am requesting verification of the following account. Please provide documentation supporting its accuracy.\\n\\nAccount Name: {{accountName}}\\nAccount Number: {{accountNumber}}\\n\\nSincerely,\\n{{clientName}}\\n{{clientAddress}}`\r\n  },\r\n];\r\n\r\nfunction mailMerge(template, data) {\r\n  let result = template;\r\n  Object.keys(data).forEach(key => {\r\n    result = result.replace(new RegExp(`{{${key}}}`, 'g'), data[key] || '');\r\n  });\r\n  return result;\r\n}\r\n\r\nexport default function DisputeLetterGenerator({ client = {} }) {\r\n  const [selectedTemplate, setSelectedTemplate] = useState(TEMPLATES[0].type);\r\n  const [fields, setFields] = useState({\r\n    clientName: client.name || '',\r\n    clientAddress: client.address || '',\r\n    accountName: '',\r\n    accountNumber: '',\r\n    reason: '',\r\n    dateSent: '',\r\n  });\r\n  const [status, setStatus] = useState('draft');\r\n  const [notes, setNotes] = useState('');\r\n  const [saving, setSaving] = useState(false);\r\n  const [letters, setLetters] = useState([]);\r\n\r\n  // Load existing letters for this client\r\n  useEffect(() => {\r\n    async function fetchLetters() {\r\n      if (!client.id) return;\r\n      const q = query(collection(db, 'disputeLetters'), where('clientId', '==', client.id));\r\n      const snapshot = await getDocs(q);\r\n      setLetters(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n    }\r\n    fetchLetters();\r\n  }, [client.id]);\r\n\r\n  const templateObj = TEMPLATES.find(t => t.type === selectedTemplate);\r\n  const letterPreview = mailMerge(templateObj.body, fields);\r\n\r\n  const handleFieldChange = e => {\r\n    const { name, value } = e.target;\r\n    setFields(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleTemplateChange = e => {\r\n    setSelectedTemplate(e.target.value);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    setSaving(true);\r\n    try {\r\n      const docRef = await addDoc(collection(db, 'disputeLetters'), {\r\n        clientId: client.id || '',\r\n        templateType: selectedTemplate,\r\n        dateSent: fields.dateSent ? Timestamp.fromDate(new Date(fields.dateSent)) : null,\r\n        status,\r\n        clientInfo: {\r\n          name: fields.clientName,\r\n          address: fields.clientAddress,\r\n          ssn: client.ssn || '',\r\n        },\r\n        accountDetails: {\r\n          creditor: fields.accountName,\r\n          accountNumber: fields.accountNumber,\r\n          disputeReason: fields.reason,\r\n          amount: client.amount || 0,\r\n        },\r\n        responseDeadline: fields.dateSent ? Timestamp.fromDate(new Date(new Date(fields.dateSent).getTime() + 30*24*60*60*1000)) : null,\r\n        notes,\r\n      });\r\n      setSaving(false);\r\n      alert('Letter saved to database!');\r\n    } catch (err) {\r\n      setSaving(false);\r\n      alert('Error saving letter: ' + err.message);\r\n    }\r\n  };\r\n\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.setFont('times', 'normal');\r\n    doc.setFontSize(12);\r\n    doc.text('Speedy Credit Repair', 10, 10);\r\n    doc.text(letterPreview, 10, 30);\r\n    doc.save('dispute_letter.pdf');\r\n  };\r\n\r\n  return (\r\n    <section className=\"bg-white rounded-2xl shadow-2xl p-8 mb-8 w-full max-w-2xl mx-auto border border-gray-200\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Dispute Letter Generator</h2>\r\n      <div className=\"mb-4\">\r\n        <label className=\"block font-semibold mb-1\">Select Template</label>\r\n        <select value={selectedTemplate} onChange={handleTemplateChange} className=\"w-full border rounded px-2 py-1\">\r\n          {TEMPLATES.map(t => (\r\n            <option key={t.type} value={t.type}>{t.label}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block font-semibold mb-1\">Client Name</label>\r\n          <input type=\"text\" name=\"clientName\" value={fields.clientName} onChange={handleFieldChange} className=\"w-full border rounded px-2 py-1\" />\r\n        </div>\r\n        <div>\r\n          <label className=\"block font-semibold mb-1\">Client Address</label>\r\n          <input type=\"text\" name=\"clientAddress\" value={fields.clientAddress} onChange={handleFieldChange} className=\"w-full border rounded px-2 py-1\" />\r\n        </div>\r\n        <div>\r\n          <label className=\"block font-semibold mb-1\">Account Name</label>\r\n          <input type=\"text\" name=\"accountName\" value={fields.accountName} onChange={handleFieldChange} className=\"w-full border rounded px-2 py-1\" />\r\n        </div>\r\n        <div>\r\n          <label className=\"block font-semibold mb-1\">Account Number</label>\r\n          <input type=\"text\" name=\"accountNumber\" value={fields.accountNumber} onChange={handleFieldChange} className=\"w-full border rounded px-2 py-1\" />\r\n        </div>\r\n        {selectedTemplate === 'initial' && (\r\n          <div className=\"md:col-span-2\">\r\n            <label className=\"block font-semibold mb-1\">Reason for Dispute</label>\r\n            <input type=\"text\" name=\"reason\" value={fields.reason} onChange={handleFieldChange} className=\"w-full border rounded px-2 py-1\" />\r\n          </div>\r\n        )}\r\n        {selectedTemplate === 'followup' && (\r\n          <div className=\"md:col-span-2\">\r\n            <label className=\"block font-semibold mb-1\">Date of First Dispute</label>\r\n            <input type=\"date\" name=\"dateSent\" value={fields.dateSent} onChange={handleFieldChange} className=\"w-full border rounded px-2 py-1\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"mb-4\">\r\n        <label className=\"block font-semibold mb-1\">Letter Preview</label>\r\n        <textarea value={letterPreview} readOnly className=\"w-full border rounded px-2 py-1\" rows={10} />\r\n      </div>\r\n      <div className=\"mb-4\">\r\n        <label className=\"block font-semibold mb-1\">Notes</label>\r\n        <textarea value={notes} onChange={e => setNotes(e.target.value)} className=\"w-full border rounded px-2 py-1\" rows={2} />\r\n      </div>\r\n      <div className=\"flex gap-4\">\r\n        <button onClick={exportPDF} className=\"px-4 py-2 bg-green-600 text-white rounded font-bold shadow\">Export as PDF</button>\r\n        <button onClick={handleSave} disabled={saving} className=\"px-4 py-2 bg-blue-600 text-white rounded font-bold shadow\">{saving ? 'Saving...' : 'Save to Database'}</button>\r\n      </div>\r\n      {letters.length > 0 && (\r\n        <div className=\"mt-8\">\r\n          <h3 className=\"font-bold mb-2\">Saved Letters</h3>\r\n          <ul className=\"list-disc ml-6\">\r\n            {letters.map(l => (\r\n              <li key={l.id} className=\"mb-2\">\r\n                <span className=\"font-semibold\">{l.templateType}</span> - Status: <span className=\"font-bold\">{l.status}</span> - Sent: {l.dateSent?.toDate ? l.dateSent.toDate().toLocaleDateString() : ''}\r\n                <br />Account: {l.accountDetails?.creditor} #{l.accountDetails?.accountNumber}\r\n                <br />Deadline: {l.responseDeadline?.toDate ? l.responseDeadline.toDate().toLocaleDateString() : ''}\r\n                <br />Notes: {l.notes}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\DisputeTracker.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'addDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":63},{"ruleId":"no-unused-vars","severity":1,"message":"'updateDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":74},{"ruleId":"no-unused-vars","severity":1,"message":"'doc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":76,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":79}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { db } from '@/lib/firebase';\r\nimport { collection, query, where, orderBy, onSnapshot, addDoc, updateDoc, doc } from 'firebase/firestore';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { DocumentTextIcon, ClockIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline';\r\n\r\nconst DisputeTracker = () => {\r\n  const { user } = useAuth();\r\n  const [disputes, setDisputes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const q = query(\r\n      collection(db, 'disputes'),\r\n      where('clientEmail', '==', user.email),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      const disputeData = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      setDisputes(disputeData);\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [user]);\r\n\r\n  const statusConfig = {\r\n    pending: { color: 'yellow', icon: ClockIcon, label: 'Pending' },\r\n    sent: { color: 'blue', icon: DocumentTextIcon, label: 'Sent to Bureau' },\r\n    investigating: { color: 'purple', icon: ClockIcon, label: 'Under Investigation' },\r\n    resolved: { color: 'green', icon: CheckCircleIcon, label: 'Resolved' },\r\n    rejected: { color: 'red', icon: XCircleIcon, label: 'Rejected' }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto px-4 py-8\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Dispute Tracker</h2>\r\n      {loading ? (\r\n        <div className=\"flex justify-center py-8\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n        </div>\r\n      ) : disputes.length === 0 ? (\r\n        <div className=\"text-center py-8 text-gray-500\">\r\n          <p>No disputes found.</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"grid gap-4\">\r\n          {disputes.map(dispute => {\r\n            const status = statusConfig[dispute.status] || statusConfig['pending'];\r\n            const StatusIcon = status.icon;\r\n            return (\r\n              <div key={dispute.id} className={`flex items-center justify-between p-4 border rounded-lg dark:border-gray-700 bg-white dark:bg-gray-800`}>\r\n                <div className=\"flex items-center gap-3\">\r\n                  <StatusIcon className={`h-8 w-8 text-${status.color}-600`} />\r\n                  <div>\r\n                    <p className=\"font-medium text-gray-900 dark:text-white\">{dispute.subject || 'Dispute'}</p>\r\n                    <p className=\"text-xs text-gray-500\">{dispute.bureau || 'Unknown Bureau'}</p>\r\n                    <p className=\"text-xs text-gray-500\">{new Date(dispute.createdAt?.toDate ? dispute.createdAt.toDate() : dispute.createdAt).toLocaleDateString()}</p>\r\n                  </div>\r\n                </div>\r\n                <span className={`text-xs px-2 py-1 rounded-full bg-${status.color}-100 text-${status.color}-800`}>{status.label}</span>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisputeTracker;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\DocumentEditor.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\DocumentUpload.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\EditUserModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\EmailParserModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\EmptyStates.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'DocumentIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { \r\n  DocumentIcon, \r\n  ChatBubbleLeftIcon, \r\n  UserGroupIcon,\r\n  ChartBarIcon,\r\n  FolderOpenIcon \r\n} from '@heroicons/react/24/outline';\r\n\r\nexport const EmptyDocuments = () => (\r\n  <div className=\"text-center py-12\">\r\n    <FolderOpenIcon className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n      No documents yet\r\n    </h3>\r\n    <p className=\"text-gray-600 dark:text-gray-400\">\r\n      Upload your first document to get started\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport const EmptyMessages = () => (\r\n  <div className=\"text-center py-12\">\r\n    <ChatBubbleLeftIcon className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n      No messages yet\r\n    </h3>\r\n    <p className=\"text-gray-600 dark:text-gray-400\">\r\n      Start a conversation with your credit specialist\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport const EmptyClients = () => (\r\n  <div className=\"text-center py-12\">\r\n    <UserGroupIcon className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n      No clients found\r\n    </h3>\r\n    <p className=\"text-gray-600 dark:text-gray-400\">\r\n      Add your first client to begin\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport const EmptyScores = () => (\r\n  <div className=\"text-center py-12\">\r\n    <ChartBarIcon className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n      No credit scores recorded\r\n    </h3>\r\n    <p className=\"text-gray-600 dark:text-gray-400\">\r\n      Scores will appear here once added\r\n    </p>\r\n  </div>\r\n);\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ErrorBoundary.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Export.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useDemo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState , useEffect } from \"react\";\r\n\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, query, onSnapshot } from 'firebase/firestore';\r\n\r\nconst demoExports = [\r\n  { id: 1, type: \"Client List\", date: \"2025-08-10\", status: \"Completed\" },\r\n  { id: 2, type: \"Dispute History\", date: \"2025-08-12\", status: \"Completed\" },\r\n];\r\n\r\nexport default function Export() {\r\n  const [exports, setExports] = useState(demoExports);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'export'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setExports(firebaseData);\r\n          setUseDemo(false);\r\n        },\r\n        (error) => {\r\n          setExports(demoExports);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setExports(demoExports);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Export</h1>\r\n        <div className=\"overflow-x-auto mb-8\">\r\n          <table className=\"min-w-full bg-white rounded shadow\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"py-2 px-4 text-left\">Type</th>\r\n                <th className=\"py-2 px-4 text-left\">Date</th>\r\n                <th className=\"py-2 px-4 text-left\">Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {exports.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan={3} className=\"text-center py-4 text-gray-500\">\r\n                    No exports found.\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                exports.map((exp) => (\r\n                  <tr key={exp.id} className=\"border-b\">\r\n                    <td className=\"py-2 px-4\">{exp.type}</td>\r\n                    <td className=\"py-2 px-4\">{exp.date}</td>\r\n                    <td className=\"py-2 px-4\">{exp.status}</td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ExportModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\FeatureGuard.jsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":73,"column":22,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3047,3100],"text":"\r\n              You don&apos;t have permission to access \""},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3047,3100],"text":"\r\n              You don&lsquo;t have permission to access \""},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3047,3100],"text":"\r\n              You don&#39;t have permission to access \""},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3047,3100],"text":"\r\n              You don&rsquo;t have permission to access \""},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":73,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3047,3100],"text":"\r\n              You don't have permission to access &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3047,3100],"text":"\r\n              You don't have permission to access &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3047,3100],"text":"\r\n              You don't have permission to access &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3047,3100],"text":"\r\n              You don't have permission to access &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":73,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3109,3192],"text":"&quot;. Please contact your administrator if you believe this is an error.\r\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3109,3192],"text":"&ldquo;. Please contact your administrator if you believe this is an error.\r\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3109,3192],"text":"&#34;. Please contact your administrator if you believe this is an error.\r\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3109,3192],"text":"&rdquo;. Please contact your administrator if you believe this is an error.\r\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { usePermission } from '../usePermission';\r\n\r\nconst FeatureGuard = ({ \r\n  feature, \r\n  children, \r\n  fallback = null, \r\n  showMessage = true,\r\n  debug = false\r\n}) => {\r\n  const { hasFeatureAccess, isAuthenticated, isMasterAdmin, loading } = usePermission();\r\n\r\n  // Debug logging during development\r\n  if (debug && process.env.NODE_ENV === 'development') {\r\n    // ...removed for production...\r\n    console.debug({\r\n      isAuthenticated,\r\n      isMasterAdmin,\r\n      hasAccess: hasFeatureAccess(feature),\r\n      loading\r\n    });\r\n  }\r\n\r\n  // Show loading state while permissions are being checked\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[200px]\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n        <span className=\"ml-3 text-gray-600\">Loading...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Check authentication first\r\n  if (!isAuthenticated) {\r\n    if (showMessage) {\r\n      return (\r\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n          <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-6 text-center\">\r\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n              <svg className=\"w-8 h-8 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\r\n              </svg>\r\n            </div>\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Authentication Required</h3>\r\n            <p className=\"text-gray-600 mb-4\">Please sign in to access this feature.</p>\r\n            <a \r\n              href=\"/login\" \r\n              className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\r\n            >\r\n              Sign In\r\n            </a>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return fallback;\r\n  }\r\n\r\n  // Check feature access using the permission system\r\n  if (!hasFeatureAccess(feature)) {\r\n    if (showMessage) {\r\n      return (\r\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n          <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-6 text-center\">\r\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n              <svg className=\"w-8 h-8 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728\" />\r\n              </svg>\r\n            </div>\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Access Restricted</h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              You don't have permission to access \"{feature}\". Please contact your administrator if you believe this is an error.\r\n            </p>\r\n            <a \r\n              href=\"/\" \r\n              className=\"bg-gray-600 text-white px-6 py-2 rounded-lg hover:bg-gray-700 transition-colors\"\r\n            >\r\n              Go to Dashboard\r\n            </a>\r\n            {debug && process.env.NODE_ENV === 'development' && (\r\n              <details className=\"mt-4 text-left\">\r\n                <summary className=\"text-sm text-gray-500 cursor-pointer\">Debug Info</summary>\r\n                <pre className=\"mt-2 text-xs bg-gray-100 p-2 rounded overflow-auto\">\r\n                  {JSON.stringify({\r\n                    feature,\r\n                    isAuthenticated,\r\n                    isMasterAdmin,\r\n                    hasAccess: hasFeatureAccess(feature)\r\n                  }, null, 2)}\r\n                </pre>\r\n              </details>\r\n            )}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return fallback;\r\n  }\r\n\r\n  // Access granted - render the protected content\r\n  return children;\r\n};\r\n\r\nexport default FeatureGuard;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\FeatureTutorial.jsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":12,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[449,587],"text":"Browse all CleverCRM features below. Click &quot;Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[449,587],"text":"Browse all CleverCRM features below. Click &ldquo;Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[449,587],"text":"Browse all CleverCRM features below. Click &#34;Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[449,587],"text":"Browse all CleverCRM features below. Click &rdquo;Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":12,"column":98,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[449,587],"text":"Browse all CleverCRM features below. Click \"Show Tutorial&quot; to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[449,587],"text":"Browse all CleverCRM features below. Click \"Show Tutorial&ldquo; to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[449,587],"text":"Browse all CleverCRM features below. Click \"Show Tutorial&#34; to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[449,587],"text":"Browse all CleverCRM features below. Click \"Show Tutorial&rdquo; to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { FEATURES } from \"../features\";\r\nimport FeatureTutorial from \"../components/FeatureTutorial\";\r\nimport { usePermission } from \"../usePermission\";\r\n\r\nconst FeaturesTutorials = () => {\r\n  const { hasFeatureAccess } = usePermission();\r\n  \r\n  return (\r\n    <div className=\"max-w-3xl mx-auto py-10 px-4\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Features & Tutorials</h1>\r\n      <p className=\"mb-8 text-gray-600\">Browse all CleverCRM features below. Click \"Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to.</p>\r\n      <div className=\"space-y-6\">\r\n        {FEATURES.map((feature) => {\r\n          const hasPermission = hasFeatureAccess(feature.id);\r\n          return (\r\n            <div key={feature.id} className=\"bg-white rounded-lg shadow p-5 flex flex-col md:flex-row md:items-center md:justify-between opacity-100\">\r\n              <div>\r\n                <div className=\"text-xl font-semibold\">{feature.label}</div>\r\n                {/* Optionally add a description here if available */}\r\n              </div>\r\n              <div className=\"mt-3 md:mt-0\">\r\n                {hasPermission ? (\r\n                  <FeatureTutorial featureId={feature.id} steps={feature.tutorialSteps || []} showResetButton />\r\n                ) : (\r\n                  <span className=\"text-gray-400 italic\">No access</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeaturesTutorials;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\FileUpload.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\FirebaseCheck.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Footer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\GoogleCalendarConnect.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Home.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userRole' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":8,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":52},{"ruleId":"no-unused-vars","severity":1,"message":"'isDarkMode' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'setIsDarkMode' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { usePermission } from '../usePermission';\r\nimport { useAuth } from '../authContext';\r\n\r\nconst Home = () => {\r\n  const { hasFeatureAccess, isMasterAdmin, userRole } = usePermission();\r\n  const { user, userProfile } = useAuth();\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n  // Update time every second\r\n  useEffect(() => {\r\n    const timer = setInterval(() => setCurrentTime(new Date()), 1000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  // Enhanced mock data for impressive stats\r\n  const stats = {\r\n    totalClients: 1247,\r\n    activeDisputes: 189,\r\n    resolvedThisMonth: 134,\r\n    successRate: 94.7,\r\n    revenue: 187650,\r\n    newLeads: 67,\r\n    clientSatisfaction: 98.2,\r\n    avgCreditIncrease: 127\r\n  };\r\n\r\n  const recentActivity = [\r\n    { type: 'success', icon: '🎉', message: 'Credit score increased by 45 points for John D.', time: '2 min ago', color: 'green' },\r\n    { type: 'dispute', icon: '⚖️', message: 'New dispute filed against Experian', time: '5 min ago', color: 'blue' },\r\n    { type: 'client', icon: '👤', message: 'Sarah M. signed new credit repair contract', time: '12 min ago', color: 'purple' },\r\n    { type: 'ai', icon: '🤖', message: 'AI generated 3 challenge letters', time: '18 min ago', color: 'orange' },\r\n    { type: 'payment', icon: '💰', message: 'Payment received: $495 from Mike R.', time: '25 min ago', color: 'green' }\r\n  ];\r\n\r\n  const topClients = [\r\n    { name: 'John Davis', score: '+127 pts', status: 'excellent', avatar: '👨‍💼' },\r\n    { name: 'Sarah Miller', score: '+89 pts', status: 'very-good', avatar: '👩‍💻' },\r\n    { name: 'Mike Rodriguez', score: '+156 pts', status: 'excellent', avatar: '👨‍🔬' },\r\n    { name: 'Lisa Chen', score: '+78 pts', status: 'good', avatar: '👩‍🎨' }\r\n  ];\r\n\r\n  const PremiumStatCard = ({ title, value, icon, gradient, trend, subtitle, isLoading = false }) => (\r\n    <div className={`relative overflow-hidden rounded-3xl bg-gradient-to-br ${gradient} p-8 text-white shadow-2xl hover:shadow-3xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 group`}>\r\n      {/* Background Pattern */}\r\n      <div className=\"absolute inset-0 bg-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\r\n        <div className=\"absolute -right-8 -top-8 w-32 h-32 bg-white/10 rounded-full\"></div>\r\n        <div className=\"absolute -right-16 -top-16 w-48 h-48 bg-white/5 rounded-full\"></div>\r\n      </div>\r\n      \r\n      <div className=\"relative z-10\">\r\n        <div className=\"flex items-start justify-between mb-6\">\r\n          <div className=\"flex-1\">\r\n            <p className=\"text-white/80 text-sm font-medium uppercase tracking-wider\">{title}</p>\r\n            <div className=\"mt-2\">\r\n              {isLoading ? (\r\n                <div className=\"animate-pulse bg-white/20 rounded-lg h-10 w-24\"></div>\r\n              ) : (\r\n                <p className=\"text-4xl font-bold leading-none\">{value}</p>\r\n              )}\r\n              {subtitle && <p className=\"text-white/90 text-sm mt-1\">{subtitle}</p>}\r\n            </div>\r\n            {trend && (\r\n              <div className=\"flex items-center mt-4 text-white/90 text-sm\">\r\n                <span className=\"mr-2 text-lg\">↗</span>\r\n                <span className=\"font-semibold\">+{trend}%</span>\r\n                <span className=\"ml-1\">this month</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"text-6xl opacity-80 group-hover:scale-110 transition-transform duration-500\">\r\n            {icon}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Shine effect */}\r\n      <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-1000\"></div>\r\n    </div>\r\n  );\r\n\r\n  const FeatureCard = ({ title, description, icon, gradient, link, badge, comingSoon = false, stats = null }) => (\r\n    <Link\r\n      to={comingSoon ? '#' : link}\r\n      className={`group relative block overflow-hidden rounded-2xl bg-white shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 ${comingSoon ? 'cursor-not-allowed opacity-75' : ''}`}\r\n    >\r\n      {/* Header with gradient */}\r\n      <div className={`h-32 bg-gradient-to-br ${gradient} relative overflow-hidden`}>\r\n        <div className=\"absolute inset-0 bg-black/10\"></div>\r\n        <div className=\"absolute -right-8 -top-8 w-32 h-32 bg-white/10 rounded-full\"></div>\r\n        <div className=\"relative z-10 p-6 flex items-center justify-between h-full\">\r\n          <div className=\"text-4xl\">{icon}</div>\r\n          {badge && (\r\n            <span className={`px-3 py-1 rounded-full text-xs font-bold ${\r\n              badge === 'AI-Powered' ? 'bg-green-400/20 text-green-100 border border-green-400/30' :\r\n              badge === 'Coming Soon' ? 'bg-yellow-400/20 text-yellow-100 border border-yellow-400/30' :\r\n              badge === 'Admin Only' ? 'bg-red-400/20 text-red-100 border border-red-400/30' :\r\n              'bg-blue-400/20 text-blue-100 border border-blue-400/30'\r\n            }`}>\r\n              {badge}\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Content */}\r\n      <div className=\"p-6\">\r\n        <h3 className=\"text-xl font-bold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors\">\r\n          {title}\r\n        </h3>\r\n        <p className=\"text-gray-600 text-sm leading-relaxed mb-4\">{description}</p>\r\n        \r\n        {stats && (\r\n          <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-gray-100\">\r\n            {stats.map((stat, idx) => (\r\n              <div key={idx} className=\"text-center\">\r\n                <div className=\"text-lg font-bold text-gray-900\">{stat.value}</div>\r\n                <div className=\"text-xs text-gray-500\">{stat.label}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"flex items-center justify-between mt-4\">\r\n          <span className=\"text-sm font-medium text-blue-600 group-hover:text-blue-700\">\r\n            {comingSoon ? 'Coming Soon' : 'Open →'}\r\n          </span>\r\n          <div className=\"w-8 h-8 bg-blue-50 rounded-full flex items-center justify-center group-hover:bg-blue-100 transition-colors\">\r\n            <svg className=\"w-4 h-4 text-blue-600 group-hover:translate-x-1 transition-transform\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5l7 7-7 7\" />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n\r\n  const ActivityItem = ({ activity }) => (\r\n    <div className=\"flex items-start space-x-4 p-4 rounded-xl hover:bg-gray-50 transition-colors group\">\r\n      <div className={`w-10 h-10 rounded-full bg-${activity.color}-100 flex items-center justify-center flex-shrink-0`}>\r\n        <span className=\"text-lg\">{activity.icon}</span>\r\n      </div>\r\n      <div className=\"flex-1 min-w-0\">\r\n        <p className=\"text-sm font-medium text-gray-900 group-hover:text-blue-600 transition-colors\">\r\n          {activity.message}\r\n        </p>\r\n        <p className=\"text-xs text-gray-500 mt-1\">{activity.time}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const ClientItem = ({ client }) => (\r\n    <div className=\"flex items-center justify-between p-4 rounded-xl hover:bg-gray-50 transition-colors group\">\r\n      <div className=\"flex items-center space-x-3\">\r\n        <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center text-white font-bold\">\r\n          {client.avatar}\r\n        </div>\r\n        <div>\r\n          <p className=\"font-medium text-gray-900 group-hover:text-blue-600 transition-colors\">{client.name}</p>\r\n          <p className=\"text-sm text-green-600 font-semibold\">{client.score}</p>\r\n        </div>\r\n      </div>\r\n      <div className={`px-3 py-1 rounded-full text-xs font-medium ${\r\n        client.status === 'excellent' ? 'bg-green-100 text-green-800' :\r\n        client.status === 'very-good' ? 'bg-blue-100 text-blue-800' :\r\n        'bg-yellow-100 text-yellow-800'\r\n      }`}>\r\n        {client.status.replace('-', ' ')}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\r\n      {/* Hero Header */}\r\n      <div className=\"relative overflow-hidden\">\r\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600\"></div>\r\n        <div className=\"absolute inset-0 bg-white bg-opacity-5\"></div>\r\n        \r\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\r\n          <div className=\"text-center\">\r\n            {/* Logo Area */}\r\n            <div className=\"flex items-center justify-center mb-8\">\r\n              <div className=\"p-6 bg-white/20 rounded-3xl backdrop-blur-sm border border-white/30 shadow-2xl\">\r\n                <div className=\"w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-2xl flex items-center justify-center shadow-lg\">\r\n                  <svg className=\"w-10 h-10 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\r\n              Speedy Credit Repair\r\n              <span className=\"block text-4xl md:text-5xl bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent\">\r\n                CRM Dashboard\r\n              </span>\r\n            </h1>\r\n            \r\n            <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">\r\n              Welcome back, <span className=\"font-bold text-yellow-300\">{userProfile?.displayName || user?.email?.split('@')[0] || 'User'}</span>! \r\n              Transform lives, one credit score at a time.\r\n            </p>\r\n            \r\n            <div className=\"flex flex-wrap justify-center gap-4\">\r\n              <div className={`px-6 py-3 rounded-full backdrop-blur-sm border border-white/30 ${\r\n                isMasterAdmin ? 'bg-red-500/20 text-red-100' : 'bg-white/20 text-white'\r\n              }`}>\r\n                <span className=\"font-semibold\">🔑 {userProfile?.role || 'user'}</span>\r\n              </div>\r\n              \r\n              {isMasterAdmin && (\r\n                <div className=\"px-6 py-3 rounded-full bg-gradient-to-r from-yellow-400/20 to-orange-400/20 backdrop-blur-sm border border-yellow-400/30 text-yellow-100\">\r\n                  <span className=\"font-semibold\">⚡ Master Admin</span>\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"px-6 py-3 rounded-full bg-white/20 backdrop-blur-sm border border-white/30 text-white\">\r\n                <span className=\"font-semibold\">🕒 {currentTime.toLocaleTimeString()}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Floating orbs animation */}\r\n        <div className=\"absolute top-20 left-10 w-20 h-20 bg-white/10 rounded-full animate-pulse\"></div>\r\n        <div className=\"absolute top-40 right-20 w-16 h-16 bg-yellow-300/20 rounded-full animate-bounce\"></div>\r\n        <div className=\"absolute bottom-20 left-1/4 w-12 h-12 bg-orange-300/20 rounded-full animate-pulse\"></div>\r\n      </div>\r\n\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 -mt-16 relative z-10\">\r\n        {/* Premium Stats Grid */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12\">\r\n          <PremiumStatCard\r\n            title=\"Total Clients\"\r\n            value={stats.totalClients.toLocaleString()}\r\n            icon=\"👥\"\r\n            gradient=\"from-blue-500 via-blue-600 to-blue-700\"\r\n            trend=\"12\"\r\n            subtitle=\"Growing strong\"\r\n          />\r\n          <PremiumStatCard\r\n            title=\"Active Disputes\"\r\n            value={stats.activeDisputes}\r\n            icon=\"⚖️\"\r\n            gradient=\"from-emerald-500 via-green-600 to-emerald-700\"\r\n            trend=\"8\"\r\n            subtitle=\"In progress\"\r\n          />\r\n          <PremiumStatCard\r\n            title=\"Success Rate\"\r\n            value={`${stats.successRate}%`}\r\n            icon=\"🎯\"\r\n            gradient=\"from-purple-500 via-purple-600 to-indigo-700\"\r\n            trend=\"2.3\"\r\n            subtitle=\"Industry leading\"\r\n          />\r\n          <PremiumStatCard\r\n            title=\"Monthly Revenue\"\r\n            value={`$${(stats.revenue / 1000).toFixed(0)}K`}\r\n            icon=\"�\"\r\n            gradient=\"from-orange-500 via-red-500 to-pink-600\"\r\n            trend=\"23\"\r\n            subtitle=\"Record breaking\"\r\n          />\r\n        </div>\r\n\r\n        {/* Feature Cards Grid */}\r\n        <div className=\"mb-12\">\r\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">\r\n            Powerful Features at Your Fingertips\r\n          </h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\r\n            {hasFeatureAccess('dispute_center') && (\r\n              <FeatureCard\r\n                title=\"AI Dispute Center\"\r\n                description=\"Automated dispute generation, document analysis, and intelligent challenge letter creation powered by advanced AI.\"\r\n                icon=\"🤖\"\r\n                gradient=\"from-green-400 to-emerald-600\"\r\n                link=\"/dispute-center\"\r\n                badge=\"AI-Powered\"\r\n                stats={[\r\n                  { label: 'Active Disputes', value: '189' },\r\n                  { label: 'Success Rate', value: '94%' }\r\n                ]}\r\n              />\r\n            )}\r\n\r\n            {hasFeatureAccess('progress_portal') && (\r\n              <FeatureCard\r\n                title=\"Progress Analytics\"\r\n                description=\"Real-time credit score tracking, predictive analytics, and comprehensive progress visualization.\"\r\n                icon=\"📊\"\r\n                gradient=\"from-blue-400 to-indigo-600\"\r\n                link=\"/progress-portal\"\r\n                badge=\"Coming Soon\"\r\n                comingSoon={true}\r\n                stats={[\r\n                  { label: 'Avg Increase', value: '+127' },\r\n                  { label: 'Client Satisfaction', value: '98%' }\r\n                ]}\r\n              />\r\n            )}\r\n\r\n            {hasFeatureAccess('page_leads') && (\r\n              <FeatureCard\r\n                title=\"Lead Management\"\r\n                description=\"Advanced lead scoring, automated follow-ups, and conversion optimization with built-in CRM tools.\"\r\n                icon=\"🎯\"\r\n                gradient=\"from-purple-400 to-pink-600\"\r\n                link=\"/leads\"\r\n                stats={[\r\n                  { label: 'New Leads', value: '67' },\r\n                  { label: 'Conversion', value: '31%' }\r\n                ]}\r\n              />\r\n            )}\r\n\r\n            {hasFeatureAccess('admin_panel') && (\r\n              <FeatureCard\r\n                title=\"Admin Command Center\"\r\n                description=\"Complete system control, user management, role assignments, and comprehensive analytics dashboard.\"\r\n                icon=\"🛡️\"\r\n                gradient=\"from-red-400 to-pink-600\"\r\n                link=\"/admin\"\r\n                badge=\"Admin Only\"\r\n                stats={[\r\n                  { label: 'Total Users', value: '1.2K' },\r\n                  { label: 'System Health', value: '99%' }\r\n                ]}\r\n              />\r\n            )}\r\n\r\n            <FeatureCard\r\n              title=\"Smart Reports\"\r\n              description=\"Automated reporting, business intelligence, and customizable dashboards with export capabilities.\"\r\n              icon=\"�\"\r\n              gradient=\"from-yellow-400 to-orange-600\"\r\n              link=\"#\"\r\n              badge=\"Coming Soon\"\r\n              comingSoon={true}\r\n              stats={[\r\n                { label: 'Reports Generated', value: '450' },\r\n                { label: 'Data Points', value: '50K+' }\r\n              ]}\r\n            />\r\n\r\n            <FeatureCard\r\n              title=\"Client Portal\"\r\n              description=\"Branded client experience with progress tracking, document uploads, and communication tools.\"\r\n              icon=\"🏠\"\r\n              gradient=\"from-cyan-400 to-blue-600\"\r\n              link=\"#\"\r\n              badge=\"Coming Soon\"\r\n              comingSoon={true}\r\n              stats={[\r\n                { label: 'Active Clients', value: '890' },\r\n                { label: 'Engagement', value: '87%' }\r\n              ]}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Activity & Insights */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n          {/* Recent Activity */}\r\n          <div className=\"bg-white rounded-3xl shadow-xl p-8\">\r\n            <div className=\"flex items-center justify-between mb-6\">\r\n              <h3 className=\"text-2xl font-bold text-gray-900\">Recent Activity</h3>\r\n              <div className=\"w-12 h-12 bg-blue-100 rounded-2xl flex items-center justify-center\">\r\n                <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                </svg>\r\n              </div>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              {recentActivity.map((activity, idx) => (\r\n                <ActivityItem key={idx} activity={activity} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Top Performing Clients */}\r\n          <div className=\"bg-white rounded-3xl shadow-xl p-8\">\r\n            <div className=\"flex items-center justify-between mb-6\">\r\n              <h3 className=\"text-2xl font-bold text-gray-900\">Top Performers</h3>\r\n              <div className=\"w-12 h-12 bg-green-100 rounded-2xl flex items-center justify-center\">\r\n                <svg className=\"w-6 h-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                </svg>\r\n              </div>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              {topClients.map((client, idx) => (\r\n                <ClientItem key={idx} client={client} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* System Status Bar */}\r\n        <div className=\"mt-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-3xl p-8 text-white\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h3 className=\"text-2xl font-bold mb-2\">System Performance</h3>\r\n              <p className=\"text-blue-100\">All systems operational • Last updated: {currentTime.toLocaleString()}</p>\r\n            </div>\r\n            <div className=\"grid grid-cols-4 gap-8 text-center\">\r\n              <div>\r\n                <div className=\"text-2xl font-bold\">99.9%</div>\r\n                <div className=\"text-blue-200 text-sm\">Uptime</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"text-2xl font-bold\">47ms</div>\r\n                <div className=\"text-blue-200 text-sm\">Response</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"text-2xl font-bold\">Active</div>\r\n                <div className=\"text-blue-200 text-sm\">AI Engine</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"text-2xl font-bold\">Secure</div>\r\n                <div className=\"text-blue-200 text-sm\">Data</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\HotLeadsWidget.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IDIQIntegration\\ClientCreditCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'client' is defined but never used. Allowed unused args must match /^_/u.","line":3,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\n\r\nconst ClientCreditCard = ({ client }) => {\r\n  // Mock credit score for demo\r\n  const score = 687;\r\n  return (\r\n    <div className=\"mt-2 p-2 bg-blue-50 rounded text-blue-800 text-xs\">\r\n      <span>Credit Score: {score}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientCreditCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IDIQIntegration\\ClientCreditPortal.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\n\r\nconst ClientCreditPortal = ({ clientData }) => {\r\n  const [creditScore, setCreditScore] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchCreditScore = async () => {\r\n    setLoading(true);\r\n    // Mock data while functions resolve IAM\r\n    const mockScore = {\r\n      score: 687,\r\n      bureaus: {\r\n        experian: 692,\r\n        equifax: 685,\r\n        transunion: 684\r\n      },\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n    setCreditScore(mockScore);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"credit-portal p-6\">\r\n      <h3>Credit Monitoring - {clientData?.name}</h3>\r\n      <button onClick={fetchCreditScore} className=\"btn-primary\">\r\n        Get Credit Score\r\n      </button>\r\n      {creditScore && (\r\n        <div className=\"credit-display mt-4\">\r\n          <h4>Current Score: {creditScore.score}</h4>\r\n          {/* Add score visualization */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientCreditPortal;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IDIQIntegration\\CreditAnalytics.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IDIQIntegration\\CreditReportViewer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IDIQIntegration\\IDIQDashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IDIQ\\AddClientForm.jsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../lib/firebase'.","line":2,"column":20,"nodeType":"Literal","endLine":2,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { db } from \"../lib/firebase\";\r\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\r\n\r\nconst initialState = {\r\n  firstName: '',\r\n  lastName: '',\r\n  email: '',\r\n  phone: '',\r\n  ssnLast4: '',\r\n  score: '',\r\n  enrolled: false,\r\n  initialScore: '',\r\n  activeDisputes: 0,\r\n  resolvedDisputes: 0\r\n};\r\n\r\nconst AddClientForm = ({ onClose, onSuccess }) => {\r\n  const [form, setForm] = useState(initialState);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleChange = e => {\r\n    const { name, value, type, checked } = e.target;\r\n    setForm(f => ({ ...f, [name]: type === 'checkbox' ? checked : value }));\r\n    setError('');\r\n  };\r\n\r\n  const validate = () => {\r\n    if (!form.firstName || !form.lastName || !form.email || !form.phone || !form.ssnLast4 || !form.score || !form.initialScore) {\r\n      setError('All fields except disputes are required.');\r\n      return false;\r\n    }\r\n    if (!/^\\d{4}$/.test(form.ssnLast4)) {\r\n      setError('SSN must be last 4 digits.');\r\n      return false;\r\n    }\r\n    if (!/^\\d{1,3}$/.test(form.score) || !/^\\d{1,3}$/.test(form.initialScore)) {\r\n      setError('Scores must be numbers.');\r\n      return false;\r\n    }\r\n    if (isNaN(form.activeDisputes) || isNaN(form.resolvedDisputes)) {\r\n      setError('Dispute counts must be numbers.');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    if (!validate()) return;\r\n    setLoading(true);\r\n    try {\r\n      await addDoc(collection(db, 'clients'), {\r\n        firstName: form.firstName,\r\n        lastName: form.lastName,\r\n        email: form.email,\r\n        phone: form.phone,\r\n        ssnLast4: form.ssnLast4,\r\n        score: parseInt(form.score),\r\n        enrolled: !!form.enrolled,\r\n        initialScore: parseInt(form.initialScore),\r\n        activeDisputes: parseInt(form.activeDisputes),\r\n        resolvedDisputes: parseInt(form.resolvedDisputes),\r\n        createdAt: serverTimestamp()\r\n      });\r\n      setSuccess(true);\r\n      setForm(initialState);\r\n      if (onSuccess) onSuccess();\r\n    } catch (err) {\r\n      setError('Failed to save client.');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.25)', zIndex: 1000, display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n      <div style={{background: '#fff', padding: 32, borderRadius: 10, minWidth: 340, boxShadow: '0 2px 16px #aaa', position: 'relative'}}>\r\n        <h2 style={{fontSize: 22, fontWeight: 'bold', marginBottom: 18}}>Add New Client</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div style={{marginBottom: 12}}>\r\n            <input name=\"firstName\" value={form.firstName} onChange={handleChange} placeholder=\"First Name\" style={{width: '100%', padding: 8, fontSize: 15, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          <div style={{marginBottom: 12}}>\r\n            <input name=\"lastName\" value={form.lastName} onChange={handleChange} placeholder=\"Last Name\" style={{width: '100%', padding: 8, fontSize: 15, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          <div style={{marginBottom: 12}}>\r\n            <input name=\"email\" value={form.email} onChange={handleChange} placeholder=\"Email\" type=\"email\" style={{width: '100%', padding: 8, fontSize: 15, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          <div style={{marginBottom: 12}}>\r\n            <input name=\"phone\" value={form.phone} onChange={handleChange} placeholder=\"Phone\" style={{width: '100%', padding: 8, fontSize: 15, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          <div style={{marginBottom: 12}}>\r\n            <input name=\"ssnLast4\" value={form.ssnLast4} onChange={handleChange} placeholder=\"SSN (last 4)\" maxLength={4} style={{width: '100%', padding: 8, fontSize: 15, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          <div style={{marginBottom: 12}}>\r\n            <input name=\"score\" value={form.score} onChange={handleChange} placeholder=\"Current Score\" style={{width: '100%', padding: 8, fontSize: 15, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          <div style={{marginBottom: 12}}>\r\n            <input name=\"initialScore\" value={form.initialScore} onChange={handleChange} placeholder=\"Initial Score\" style={{width: '100%', padding: 8, fontSize: 15, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          <div style={{marginBottom: 12}}>\r\n            <label style={{marginRight: 8}}>\r\n              <input type=\"checkbox\" name=\"enrolled\" checked={form.enrolled} onChange={handleChange} /> Enrolled\r\n            </label>\r\n          </div>\r\n          <div style={{marginBottom: 12}}>\r\n            <input name=\"activeDisputes\" value={form.activeDisputes} onChange={handleChange} placeholder=\"Active Disputes\" type=\"number\" min={0} style={{width: '100%', padding: 8, fontSize: 15, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          <div style={{marginBottom: 12}}>\r\n            <input name=\"resolvedDisputes\" value={form.resolvedDisputes} onChange={handleChange} placeholder=\"Resolved Disputes\" type=\"number\" min={0} style={{width: '100%', padding: 8, fontSize: 15, borderRadius: 6, border: '1px solid #ccc'}} />\r\n          </div>\r\n          {error && <div style={{color: '#d32f2f', marginBottom: 10}}>{error}</div>}\r\n          {success && <div style={{color: '#388e3c', marginBottom: 10}}>Client added successfully!</div>}\r\n          <div style={{display: 'flex', gap: 12, marginTop: 10}}>\r\n            <button type=\"submit\" disabled={loading} style={{padding: '8px 18px', fontSize: 16, background: '#1976d2', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer', fontWeight: 'bold'}}>\r\n              {loading ? 'Saving...' : 'Save'}\r\n            </button>\r\n            <button type=\"button\" onClick={onClose} style={{padding: '8px 18px', fontSize: 16, background: '#aaa', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer', fontWeight: 'bold'}}>Cancel</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddClientForm;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IDIQ\\ClientDetailView.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'onEdit' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport EditClientForm from '@/components/IDIQ/EditClientForm';\r\nimport CreateDisputeForm from '@/components/disputes/CreateDisputeForm';\r\nimport AddScoreUpdate from '@/components/Scores/AddScoreUpdate';\r\nimport { collection, getDocs, query, orderBy } from 'firebase/firestore';\r\nimport { db } from '@/lib/firebase';\r\n\r\nconst ClientDetailView = ({ client, onClose, onEdit, onDelete, onRefresh }) => {\r\n  // All hooks at the top\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [editing, setEditing] = useState(false);\r\n  const [showDisputeForm, setShowDisputeForm] = useState(false);\r\n  const [disputes, setDisputes] = useState([]);\r\n  const [loadingDisputes, setLoadingDisputes] = useState(true);\r\n  const [showScoreForm, setShowScoreForm] = useState(false);\r\n  const [scoreHistory, setScoreHistory] = useState([]);\r\n  const [loadingScores, setLoadingScores] = useState(true);\r\n\r\n  // Fetch score history for client\r\n  useEffect(() => {\r\n    if (!client?.id) return;\r\n    const fetchScores = async () => {\r\n      setLoadingScores(true);\r\n      try {\r\n        const q = query(collection(db, 'clients', client.id, 'scoreHistory'), orderBy('date', 'asc'));\r\n        const snap = await getDocs(q);\r\n        const scoreList = [];\r\n        snap.forEach(docSnap => {\r\n          scoreList.push({ id: docSnap.id, ...docSnap.data() });\r\n        });\r\n        setScoreHistory(scoreList);\r\n      } catch (err) {\r\n        setScoreHistory([]);\r\n      } finally {\r\n        setLoadingScores(false);\r\n      }\r\n    };\r\n    fetchScores();\r\n  }, [client, showScoreForm]);\r\n\r\n  // Fetch disputes for client\r\n  useEffect(() => {\r\n    if (!client?.id) return;\r\n    const fetchDisputes = async () => {\r\n      setLoadingDisputes(true);\r\n      try {\r\n        const q = query(collection(db, 'clients', client.id, 'disputes'), orderBy('createdAt', 'desc'));\r\n        const snap = await getDocs(q);\r\n        const disputeList = [];\r\n        snap.forEach(docSnap => {\r\n          disputeList.push({ id: docSnap.id, ...docSnap.data() });\r\n        });\r\n        setDisputes(disputeList);\r\n      } catch (err) {\r\n        setDisputes([]);\r\n      } finally {\r\n        setLoadingDisputes(false);\r\n      }\r\n    };\r\n    fetchDisputes();\r\n  }, [client, showDisputeForm]);\r\n\r\n  const handleAddScore = () => {\r\n    setShowScoreForm(true);\r\n  };\r\n  const handleCloseScoreForm = () => {\r\n    setShowScoreForm(false);\r\n  };\r\n  const handleScoreAdded = () => {\r\n    setShowScoreForm(false);\r\n    // Will auto-refresh score history via useEffect\r\n  };\r\n  const handleCreateDispute = () => {\r\n    setShowDisputeForm(true);\r\n  };\r\n  const handleCloseDisputeForm = () => {\r\n    setShowDisputeForm(false);\r\n  };\r\n  const handleDisputeCreated = () => {\r\n    setShowDisputeForm(false);\r\n    // Will auto-refresh disputes via useEffect\r\n  };\r\n\r\n  const handleEditClick = () => {\r\n    setEditing(true);\r\n  };\r\n  const handleEditClose = () => {\r\n    setEditing(false);\r\n  };\r\n  const handleEditSuccess = () => {\r\n    setEditing(false);\r\n    if (onRefresh) onRefresh();\r\n  };\r\n\r\n  if (!client) return null;\r\n\r\n  return (\r\n    <div style={{position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.25)', zIndex: 1000, display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n      <div style={{background: '#fff', padding: 32, borderRadius: 10, minWidth: 340, boxShadow: '0 2px 16px #aaa', position: 'relative'}}>\r\n        <h2 style={{fontSize: 22, fontWeight: 'bold', marginBottom: 18}}>Client Details</h2>\r\n        {editing ? (\r\n          <EditClientForm client={client} onClose={handleEditClose} onSuccess={handleEditSuccess} />\r\n        ) : (\r\n          <>\r\n            <div style={{marginBottom: 16}}>\r\n              <div><strong>Name:</strong> {client.firstName} {client.lastName}</div>\r\n              <div><strong>Email:</strong> {client.email}</div>\r\n              <div><strong>Phone:</strong> {client.phone}</div>\r\n              <div><strong>SSN (last 4):</strong> {client.ssnLast4}</div>\r\n              <div><strong>Score:</strong> {client.score}</div>\r\n              <div style={{marginTop: 10, display: 'flex', gap: 12}}>\r\n                <button onClick={handleCreateDispute} style={{padding: '8px 18px', fontSize: 16, background: '#ffa726', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer', fontWeight: 'bold'}}>Create Dispute</button>\r\n                <button onClick={handleAddScore} style={{padding: '8px 18px', fontSize: 16, background: '#388e3c', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer', fontWeight: 'bold'}}>Update Scores</button>\r\n              </div>\r\n            </div>\r\n            {showScoreForm && (\r\n              <AddScoreUpdate clientId={client.id} onClose={handleCloseScoreForm} onSuccess={handleScoreAdded} />\r\n            )}\r\n            <div style={{marginTop: 18}}>\r\n              <h3 style={{fontWeight: 'bold', fontSize: 17}}>Score History ({scoreHistory.length})</h3>\r\n              {loadingScores ? (\r\n                <div style={{color: '#888'}}>Loading score history...</div>\r\n              ) : scoreHistory.length === 0 ? (\r\n                <div style={{color: '#888'}}>No score history found.</div>\r\n              ) : (\r\n                <ul style={{marginTop: 8}}>\r\n                  {scoreHistory.map(s => (\r\n                    <li key={s.id} style={{marginBottom: 8, background: '#e8f5e9', padding: 10, borderRadius: 6}}>\r\n                      <div><strong>Date:</strong> {s.date}</div>\r\n                      <div><strong>Experian:</strong> {s.experian}</div>\r\n                      <div><strong>Equifax:</strong> {s.equifax}</div>\r\n                      <div><strong>TransUnion:</strong> {s.transunion}</div>\r\n                      <div><strong>Avg Score:</strong> {s.avgScore}</div>\r\n                      <div><strong>Notes:</strong> {s.notes}</div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </div>\r\n            {showDisputeForm && (\r\n              <CreateDisputeForm clientId={client.id} onClose={handleCloseDisputeForm} onSuccess={handleDisputeCreated} />\r\n            )}\r\n            <div style={{marginTop: 18}}>\r\n              <h3 style={{fontWeight: 'bold', fontSize: 17}}>Disputes ({disputes.length})</h3>\r\n              {loadingDisputes ? (\r\n                <div style={{color: '#888'}}>Loading disputes...</div>\r\n              ) : disputes.length === 0 ? (\r\n                <div style={{color: '#888'}}>No disputes found.</div>\r\n              ) : (\r\n                <ul style={{marginTop: 8}}>\r\n                  {disputes.map(d => (\r\n                    <li key={d.id} style={{marginBottom: 8, background: '#f6f6ff', padding: 10, borderRadius: 6}}>\r\n                      <div><strong>Creditor:</strong> {d.creditor}</div>\r\n                      <div><strong>Account #:</strong> {d.accountNumber}</div>\r\n                      <div><strong>Type:</strong> {d.type}</div>\r\n                      <div><strong>Status:</strong> {d.status}</div>\r\n                      <div><strong>Date:</strong> {d.dateSubmitted ? new Date(d.dateSubmitted).toLocaleDateString() : ''}</div>\r\n                      <div><strong>Reason:</strong> {d.reason}</div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </div>\r\n            <div style={{display: 'flex', gap: 12, marginTop: 10}}>\r\n              <button onClick={handleEditClick} style={{padding: '8px 18px', fontSize: 16, background: '#1976d2', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer', fontWeight: 'bold'}}>Edit</button>\r\n              <button onClick={() => setShowConfirm(true)} style={{padding: '8px 18px', fontSize: 16, background: '#d32f2f', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer', fontWeight: 'bold'}}>Delete</button>\r\n              <button onClick={onClose} style={{padding: '8px 18px', fontSize: 16, background: '#aaa', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer', fontWeight: 'bold'}}>Close</button>\r\n            </div>\r\n            {showConfirm && (\r\n              <div style={{marginTop: 18, background: '#fff7f7', padding: 12, borderRadius: 6, boxShadow: '0 1px 4px #eee'}}>\r\n                <div style={{marginBottom: 10}}>Are you sure you want to delete this client?</div>\r\n                <button onClick={() => { setShowConfirm(false); onDelete(); }} style={{padding: '6px 16px', background: '#d32f2f', color: '#fff', border: 'none', borderRadius: 4, fontWeight: 'bold', marginRight: 8}}>Yes, Delete</button>\r\n                <button onClick={() => setShowConfirm(false)} style={{padding: '6px 16px', background: '#aaa', color: '#fff', border: 'none', borderRadius: 4, fontWeight: 'bold'}}>Cancel</button>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientDetailView;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IDIQ\\EditClientForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IDIQ\\IDIQDashboard.jsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../lib/firebase'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'totalClients' is not defined.","line":166,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":166,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'enrolledClients' is not defined.","line":167,"column":44,"nodeType":"Identifier","messageId":"undef","endLine":167,"endColumn":59},{"ruleId":"no-undef","severity":2,"message":"'activeDisputes' is not defined.","line":168,"column":51,"nodeType":"Identifier","messageId":"undef","endLine":168,"endColumn":65},{"ruleId":"no-undef","severity":2,"message":"'resolvedDisputes' is not defined.","line":169,"column":44,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":60},{"ruleId":"no-undef","severity":2,"message":"'avgScoreGain' is not defined.","line":170,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":170,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'recentActivity' is not defined.","line":184,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":184,"endColumn":28}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport CreditAnalytics from '../IDIQIntegration/CreditAnalytics';\r\nimport ClientCreditCard from '../IDIQIntegration/ClientCreditCard';\r\nimport AddClientForm from './AddClientForm';\r\nimport ClientDetailView from './ClientDetailView';\r\nimport { collection, getDocs, query, orderBy, deleteDoc, doc } from 'firebase/firestore';\r\nimport { db } from \"../lib/firebase\";\r\n\r\n// --- Real Metrics ---\r\n// These must be inside the component, after clients is defined\r\n\r\nconst IDIQDashboard = () => {\r\n  const [mode, setMode] = useState(() => localStorage.getItem('idiqMode') || 'mock');\r\n  const [clients, setClients] = useState([]); // <-- Initialize clients state\r\n  const [loadingClients, setLoadingClients] = useState(true);\r\n  const [selectedClient, setSelectedClient] = useState(null);\r\n  const [disputePipeline, setDisputePipeline] = useState(initialDisputePipeline);\r\n  const [scoreDistribution, setScoreDistribution] = useState(initialScoreDistribution);\r\n  const [showAddClient, setShowAddClient] = useState(false);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('idiqMode', mode);\r\n  }, [mode]);\r\n\r\n  // Fetch clients from Firestore\r\n  useEffect(() => {\r\n    const fetchClients = async () => {\r\n      setLoadingClients(true);\r\n      try {\r\n        const q = query(collection(db, 'clients'), orderBy('createdAt', 'desc'));\r\n        const snap = await getDocs(q);\r\n        const clientList = [];\r\n        snap.forEach(docSnap => {\r\n          clientList.push({ id: docSnap.id, ...docSnap.data() });\r\n        });\r\n        setClients(clientList);\r\n      } catch (err) {\r\n        console.error('Error fetching clients:', err);\r\n      } finally {\r\n        setLoadingClients(false);\r\n      }\r\n    };\r\n    fetchClients();\r\n  }, [showAddClient]);\r\n\r\n  const isLive = mode === 'live';\r\n\r\n  // --- Interactivity Handlers ---\r\n  const handleClientClick = (client) => {\r\n    setSelectedClient(client);\r\n  };\r\n  const handleCloseDetail = () => {\r\n    setSelectedClient(null);\r\n  };\r\n  const handleEditClient = () => {\r\n    alert('Edit feature coming soon');\r\n  };\r\n  const handleDeleteClient = async () => {\r\n    if (!selectedClient) return;\r\n    try {\r\n      await deleteDoc(doc(db, 'clients', selectedClient.id));\r\n      setSelectedClient(null);\r\n      // Refresh client list\r\n      const q = query(collection(db, 'clients'), orderBy('createdAt', 'desc'));\r\n      const snap = await getDocs(q);\r\n      const clientList = [];\r\n      snap.forEach(docSnap => {\r\n        clientList.push({ id: docSnap.id, ...docSnap.data() });\r\n      });\r\n      setClients(clientList);\r\n    } catch (err) {\r\n      alert('Failed to delete client');\r\n      console.error(err);\r\n    }\r\n  };\r\n  const handleRefresh = () => {\r\n    // Slightly change mock numbers for demo\r\n    setClients(clients.map(c => ({ ...c, score: c.score + (Math.random() > 0.5 ? 1 : -1) * Math.floor(Math.random() * 10) })));\r\n    setDisputePipeline(disputePipeline.map(d => ({ ...d, count: d.count + (Math.random() > 0.5 ? 1 : -1) * Math.floor(Math.random() * 2) })));\r\n    setScoreDistribution(scoreDistribution.map(s => ({ ...s, count: Math.max(0, s.count + (Math.random() > 0.5 ? 1 : -1) * Math.floor(Math.random() * 2)) })));\r\n  };\r\n  const handleViewDetails = (status) => {\r\n    console.log('View Details for status:', status);\r\n  };\r\n  const handleScoreBarClick = (range, count) => {\r\n    alert(`${count} clients in ${range} range`);\r\n  };\r\n  const handleAddClient = () => {\r\n    setShowAddClient(true);\r\n  };\r\n  const handleCloseAddClient = () => {\r\n    setShowAddClient(false);\r\n  };\r\n  const handleClientAdded = async () => {\r\n    // Simulate refresh: In real app, fetch from Firestore\r\n    setShowAddClient(false);\r\n    // Optionally, you could fetch updated clients from Firestore here\r\n    // For demo, just refresh mock data\r\n    setClients([...clients]);\r\n  };\r\n\r\n  // --- Styles ---\r\n  const clientStyle = {\r\n    cursor: 'pointer',\r\n    color: '#176c2f',\r\n    textDecoration: 'underline',\r\n    fontWeight: 'bold',\r\n    transition: 'color 0.2s',\r\n  };\r\n\r\n  return (\r\n    <div style={{padding: 32}}>\r\n      <h1 style={{fontSize: 28, fontWeight: 'bold'}}>IDIQ Integration Dashboard</h1>\r\n      <button onClick={handleAddClient} style={{marginBottom: 16, padding: '8px 18px', fontSize: 16, background: '#1976d2', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer', fontWeight: 'bold'}}>\r\n        Add New Client\r\n      </button>\r\n      {showAddClient && (\r\n        <AddClientForm onClose={handleCloseAddClient} onSuccess={handleClientAdded} />\r\n      )}\r\n      {selectedClient && (\r\n        <ClientDetailView\r\n          client={selectedClient}\r\n          onClose={handleCloseDetail}\r\n          onEdit={handleEditClient}\r\n          onDelete={handleDeleteClient}\r\n          onRefresh={async () => {\r\n            // Refresh client list and detail view after edit\r\n            const q = query(collection(db, 'clients'), orderBy('createdAt', 'desc'));\r\n            const snap = await getDocs(q);\r\n            const clientList = [];\r\n            snap.forEach(docSnap => {\r\n              clientList.push({ id: docSnap.id, ...docSnap.data() });\r\n            });\r\n            setClients(clientList);\r\n            // Update selectedClient with latest data\r\n            const updated = clientList.find(c => c.id === selectedClient.id);\r\n            if (updated) setSelectedClient(updated);\r\n          }}\r\n        />\r\n      )}\r\n      <div style={{marginBottom: 16}}>\r\n        <label style={{fontWeight: 'bold', marginRight: 12}}>Mode:</label>\r\n        <select\r\n          value={mode}\r\n          onChange={e => setMode(e.target.value)}\r\n          style={{padding: '4px 12px', fontSize: 16}}\r\n        >\r\n          <option value=\"mock\">Mock Mode</option>\r\n          <option value=\"live\" disabled>Live Mode (IAM not configured)</option>\r\n        </select>\r\n      </div>\r\n      {isLive ? (\r\n        <div style={{background: '#d4f7d4', color: '#176c2f', padding: 12, borderRadius: 6, marginBottom: 16, fontWeight: 'bold'}}>\r\n          Connected to IDIQ API (Live Mode)\r\n        </div>\r\n      ) : (\r\n        <div style={{background: '#fff7d4', color: '#a67c00', padding: 12, borderRadius: 6, marginBottom: 16, fontWeight: 'bold'}}>\r\n          Using Mock Data (Mock Mode)\r\n        </div>\r\n      )}\r\n\r\n      {/* --- Analytics Section --- */}\r\n      <div style={{marginBottom: 24, background: '#e3f2fd', borderRadius: 8, padding: 20, boxShadow: '0 2px 8px #eee'}}>\r\n        <h2 style={{fontSize: 20, fontWeight: 'bold', marginBottom: 12}}>Analytics</h2>\r\n        <div style={{display: 'flex', gap: 32}}>\r\n          <div><strong>Total Clients:</strong> {totalClients}</div>\r\n          <div><strong>Enrolled:</strong> {enrolledClients}</div>\r\n          <div><strong>Active Disputes:</strong> {activeDisputes}</div>\r\n          <div><strong>Resolved:</strong> {resolvedDisputes}</div>\r\n          <div><strong>Avg Score Gain:</strong> {avgScoreGain}</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* --- Recent Activity Section --- */}\r\n      <div style={{marginBottom: 24, background: '#f9f9f9', borderRadius: 8, padding: 20, boxShadow: '0 2px 8px #eee'}}>\r\n        <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\r\n          <h2 style={{fontSize: 22, fontWeight: 'bold'}}>Recent Activity</h2>\r\n          <button onClick={handleRefresh} style={{padding: '6px 16px', fontSize: 15, background: '#ffa726', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer', fontWeight: 'bold'}}>Refresh Data</button>\r\n        </div>\r\n        {loadingClients ? (\r\n          <div style={{marginTop: 16, color: '#888'}}>Loading clients...</div>\r\n        ) : (\r\n          <ul style={{marginTop: 12}}>\r\n            {recentActivity.map((act, idx) => (\r\n              <li key={idx} style={{marginBottom: 8}}>\r\n                <span\r\n                  style={clientStyle}\r\n                  onClick={() => handleClientClick(act.client)}\r\n                  onMouseOver={e => (e.target.style.color = '#1976d2')}\r\n                  onMouseOut={e => (e.target.style.color = '#176c2f')}\r\n                >\r\n                  {act.name}\r\n                </span>\r\n                {` - ${act.action} (${act.ago})`}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n\r\n      <div style={{marginBottom: 24, background: '#f6f6ff', borderRadius: 8, padding: 20, boxShadow: '0 2px 8px #eee'}}>\r\n        <h2 style={{fontSize: 20, fontWeight: 'bold'}}>Dispute Pipeline</h2>\r\n        <div style={{display: 'flex', gap: 24, marginTop: 12}}>\r\n          {disputePipeline.map(dp => (\r\n            <div key={dp.status} style={{background: '#fff', borderRadius: 6, padding: 16, boxShadow: '0 1px 4px #ddd', minWidth: 120, textAlign: 'center'}}>\r\n              <div style={{fontSize: 18, fontWeight: 'bold'}}>{dp.count}</div>\r\n              <div style={{fontSize: 15, color: '#555'}}>{dp.status}</div>\r\n              <button onClick={() => handleViewDetails(dp.status)} style={{marginTop: 8, padding: '4px 10px', fontSize: 13, background: '#1976d2', color: '#fff', border: 'none', borderRadius: 4, cursor: 'pointer'}}>View Details</button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{marginBottom: 24, background: '#e8f5e9', borderRadius: 8, padding: 20, boxShadow: '0 2px 8px #eee'}}>\r\n        <h2 style={{fontSize: 20, fontWeight: 'bold'}}>Score Distribution</h2>\r\n        <div style={{display: 'flex', gap: 18, marginTop: 12}}>\r\n          {scoreDistribution.map(sd => (\r\n            <div\r\n              key={sd.range}\r\n              style={{background: '#fff', borderRadius: 6, padding: 16, boxShadow: '0 1px 4px #ddd', minWidth: 100, textAlign: 'center', cursor: 'pointer'}}\r\n              onClick={() => handleScoreBarClick(sd.range, sd.count)}\r\n            >\r\n              <div style={{fontSize: 17, fontWeight: 'bold'}}>{sd.count} ({sd.percent}%)</div>\r\n              <div style={{fontSize: 14, color: '#388e3c'}}>{sd.range}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Conditional data fetching based on mode */}\r\n      <CreditAnalytics mode={mode} />\r\n      <ClientCreditCard mode={mode} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Add safe fallbacks for initialDisputePipeline and initialScoreDistribution\r\nconst initialDisputePipeline = { new: 0, investigating: 0, resolved: 0 };\r\nconst initialScoreDistribution = [0, 0, 0];\r\n\r\nexport default IDIQDashboard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\IdiqApiIntegration.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ImportContactsModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'csvFile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport Papa from 'papaparse';\r\nimport { db } from '@/lib/firebase';\r\nimport { collection, addDoc } from 'firebase/firestore';\r\n\r\nexport default function ImportContactsModal({ isOpen, onClose, onImport }) {\r\n  const [csvFile, setCsvFile] = useState(null);\r\n  const [csvPreview, setCsvPreview] = useState([]);\r\n  const [importProgress, setImportProgress] = useState(0);\r\n  const [importError, setImportError] = useState('');\r\n\r\n  const handleCsvFileChange = e => {\r\n    setImportError('');\r\n    const file = e.target.files[0];\r\n    setCsvFile(file);\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        header: true,\r\n        skipEmptyLines: true,\r\n        complete: results => {\r\n          setCsvPreview(results.data);\r\n        },\r\n        error: err => {\r\n          setImportError('CSV parsing error: ' + err.message);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleImport = async () => {\r\n    setImportProgress(0);\r\n    let imported = 0;\r\n    for (let i = 0; i < csvPreview.length; i++) {\r\n      try {\r\n        await addDoc(collection(db, 'contacts'), { ...csvPreview[i], createdAt: new Date().toISOString() });\r\n        imported++;\r\n        setImportProgress(Math.round(((i + 1) / csvPreview.length) * 100));\r\n      } catch (err) {\r\n        setImportError('Error importing row ' + (i + 1) + ': ' + err.message);\r\n        break;\r\n      }\r\n    }\r\n    if (imported === csvPreview.length) {\r\n      if (onImport) onImport();\r\n      setCsvPreview([]);\r\n      setCsvFile(null);\r\n      setImportProgress(100);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-2xl overflow-y-auto max-h-[90vh]\">\r\n        <h2 className=\"text-2xl font-bold mb-4\">Import Contacts (CSV)</h2>\r\n        <input type=\"file\" accept=\".csv\" onChange={handleCsvFileChange} className=\"mb-4\" />\r\n        {importError && <div className=\"text-red-600 font-semibold mb-2\">{importError}</div>}\r\n        {csvPreview.length > 0 && (\r\n          <div className=\"mb-4\">\r\n            <div className=\"font-semibold mb-2\">Preview ({csvPreview.length} rows):</div>\r\n            <div className=\"overflow-x-auto max-h-48 border rounded\">\r\n              <table className=\"min-w-full text-xs\">\r\n                <thead>\r\n                  <tr>{Object.keys(csvPreview[0]).map(h => <th key={h} className=\"border px-2 py-1\">{h}</th>)}</tr>\r\n                </thead>\r\n                <tbody>\r\n                  {csvPreview.slice(0, 10).map((row, i) => (\r\n                    <tr key={i}>{Object.values(row).map((v, j) => <td key={j} className=\"border px-2 py-1\">{v}</td>)}</tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              {csvPreview.length > 10 && <div className=\"text-xs text-gray-500 px-2 py-1\">Showing first 10 rows</div>}\r\n            </div>\r\n            <button type=\"button\" className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded\" onClick={handleImport}>Import Contacts</button>\r\n            {importProgress > 0 && <div className=\"mt-2\">Progress: <span className=\"font-bold\">{importProgress}%</span></div>}\r\n          </div>\r\n        )}\r\n        <div className=\"flex justify-end mt-6\">\r\n          <button type=\"button\" onClick={onClose} className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\LazyLoading.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\LeadMigrationTool.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\LeadRevenueDetailWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'decayFactor' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":17,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport RevenuePredictionEngine from '../utils/RevenuePredictionEngine';\r\n\r\nexport default function LeadRevenueDetailWidget({ lead, month = new Date().getMonth() + 1, year = new Date().getFullYear() }) {\r\n  // Calculate prediction data for this lead\r\n  const engine = new RevenuePredictionEngine({ leads: [lead], month, year });\r\n  const probability = engine.calculateConversionProbability(lead);\r\n  const revenueConservative = engine.estimateLeadRevenue(lead, 'conservative');\r\n  const revenueRealistic = engine.estimateLeadRevenue(lead, 'realistic');\r\n  const revenueOptimistic = engine.estimateLeadRevenue(lead, 'optimistic');\r\n\r\n  // Factors (user-friendly)\r\n  const aiScore = Number(lead.leadScore) || 5;\r\n  const weeksSinceIntro = engine._weeksSince(lead.createdAt);\r\n  const followUpCount = lead?.conversionTracking?.followUpCount || 0;\r\n  const seasonal = lead?.predictionData?.seasonalMultiplier || 1.0;\r\n  const decayFactor = lead?.predictionData?.weeklyDecayFactor || 0.95;\r\n\r\n  // Lead Quality\r\n  let qualityLabel = 'Average';\r\n  let qualityIcon = '⚡';\r\n  if (aiScore >= 8) { qualityLabel = 'Excellent'; qualityIcon = '🌟'; }\r\n  else if (aiScore >= 6) { qualityLabel = 'Good'; qualityIcon = '👍'; }\r\n  else if (aiScore <= 4) { qualityLabel = 'Poor'; qualityIcon = '⚠️'; }\r\n\r\n  // Lead Age\r\n  let ageLabel = 'Fresh';\r\n  let ageIcon = '🟢';\r\n  if (weeksSinceIntro >= 8) { ageLabel = 'Stale'; ageIcon = '🔴'; }\r\n  else if (weeksSinceIntro >= 4) { ageLabel = 'Aging'; ageIcon = '🟡'; }\r\n\r\n  // Seasonal\r\n  let seasonalLabel = 'Neutral';\r\n  let seasonalIcon = '📅';\r\n  let seasonalBoost = Math.round((seasonal - 1) * 100);\r\n  if (seasonalBoost > 0) { seasonalLabel = `Good (${seasonalBoost}% boost)`; seasonalIcon = '☀️'; }\r\n  else if (seasonalBoost < 0) { seasonalLabel = `Challenging (${seasonalBoost}% drop)`; seasonalIcon = '❄️'; }\r\n\r\n  // Follow-up\r\n  let followUpLabel = `${followUpCount} contact${followUpCount === 1 ? '' : 's'} made`;\r\n  let followUpIcon = '📞';\r\n\r\n  // Confidence calculation\r\n  const spread = revenueOptimistic - revenueConservative;\r\n  const confidence = spread < 0.2 * revenueRealistic ? 'High' : spread < 0.4 * revenueRealistic ? 'Medium' : 'Low';\r\n\r\n  // Actionable insights (business-focused)\r\n  let priority = 'Medium';\r\n  let priorityIcon = '⚡';\r\n  if (probability >= 0.8) { priority = 'High'; priorityIcon = '🔥'; }\r\n  else if (probability <= 0.4) { priority = 'Low'; priorityIcon = '⏳'; }\r\n\r\n  let followUpAdvice = '';\r\n  let strategyAdvice = '';\r\n  let timingAdvice = '';\r\n  if (probability >= 0.8) {\r\n    followUpAdvice = `${priorityIcon} Priority Action: Call within 24 hours - highest conversion window.`;\r\n    strategyAdvice = '💡 Strategy: Lead is hot - act fast to close.';\r\n    timingAdvice = '⏰ Optimal timing: Contact before 2 PM for best response rates.';\r\n  } else if (weeksSinceIntro > 4) {\r\n    followUpAdvice = '📞 Recommended: Schedule follow-up call Tuesday morning.';\r\n    strategyAdvice = '💡 Strategy: Lead is warm but aging - act fast to maintain interest.';\r\n    timingAdvice = '⏰ Optimal timing: Contact this week to revive interest.';\r\n  } else if (probability < 0.6) {\r\n    followUpAdvice = `📞 Increase follow-ups (currently ${followUpCount}) to boost conversion.`;\r\n    strategyAdvice = '💡 Strategy: Nurture with value-driven communication.';\r\n    timingAdvice = '⏰ Try contacting late morning for best results.';\r\n  } else {\r\n    followUpAdvice = '📞 Maintain regular contact for best results.';\r\n    strategyAdvice = '💡 Strategy: Keep engagement high.';\r\n    timingAdvice = '⏰ Contact every 3-5 days to stay top-of-mind.';\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow p-6 mb-6 max-w-xl mx-auto\">\r\n      <h2 className=\"text-2xl font-bold mb-2 text-blue-700\">Lead Revenue Prediction</h2>\r\n      <div className=\"mb-4\">\r\n        <div className=\"text-lg font-semibold text-gray-800\">{lead.firstName} {lead.lastName}</div>\r\n        <div className=\"text-sm text-gray-500\">{lead.email}</div>\r\n      </div>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div className=\"bg-blue-50 rounded p-3 flex flex-col items-center\">\r\n          <div className=\"text-xl font-bold text-blue-700\">{(probability * 100).toFixed(0)}%</div>\r\n          <div className=\"text-xs text-gray-600\">Conversion Probability</div>\r\n        </div>\r\n        <div className=\"bg-green-50 rounded p-3 flex flex-col items-center\">\r\n          <div className=\"text-lg text-green-700\">${revenueRealistic.toLocaleString()}</div>\r\n          <div className=\"text-xs text-gray-600\">Realistic Revenue</div>\r\n        </div>\r\n        <div className=\"bg-purple-50 rounded p-3 flex flex-col items-center\">\r\n          <div className=\"text-sm text-purple-700\">Confidence: {confidence}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div className=\"bg-yellow-50 rounded p-3 flex flex-col items-center\">\r\n          <div className=\"text-sm text-yellow-700\">Conservative: ${revenueConservative.toLocaleString()}</div>\r\n        </div>\r\n        <div className=\"bg-green-100 rounded p-3 flex flex-col items-center\">\r\n          <div className=\"text-sm text-green-700\">Optimistic: ${revenueOptimistic.toLocaleString()}</div>\r\n        </div>\r\n        <div className=\"bg-gray-100 rounded p-3 flex flex-col items-center\">\r\n          <div className=\"text-sm text-gray-700\">{priorityIcon} Priority: {priority}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"mb-4\">\r\n        <h3 className=\"font-semibold text-gray-800 mb-2\">Prediction Factors</h3>\r\n        <ul className=\"ml-2 text-sm text-gray-700\">\r\n          <li className=\"mb-1\">{qualityIcon} Lead Quality: <span className=\"font-semibold\">{qualityLabel}</span> ({aiScore}/10)</li>\r\n          <li className=\"mb-1\">{ageIcon} Lead Age: <span className=\"font-semibold\">{ageLabel}</span> ({weeksSinceIntro} week{weeksSinceIntro === 1 ? '' : 's'} old)</li>\r\n          <li className=\"mb-1\">{followUpIcon} Follow-up History: <span className=\"font-semibold\">{followUpLabel}</span></li>\r\n          <li className=\"mb-1\">{seasonalIcon} Seasonal Timing: <span className=\"font-semibold\">{seasonalLabel}</span></li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"mb-2\">\r\n        <h3 className=\"font-semibold text-gray-800 mb-2\">Actionable Insights</h3>\r\n        <div className=\"text-sm text-blue-700 mb-1\">{followUpAdvice}</div>\r\n        <div className=\"text-sm text-green-700 mb-1\">{strategyAdvice}</div>\r\n        <div className=\"text-sm text-purple-700 mb-1\">{timingAdvice}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\LeadUrgencyIndicator.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Leads.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'getDocs' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'Particles' as identifier for default import.","line":5,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":5,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":33,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'playSuccess' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'setCollaborators' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":41,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":41},{"ruleId":"no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused args must match /^_/u.","line":51,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, onSnapshot } from \"firebase/firestore\";\r\nimport { motion } from \"framer-motion\";\r\nimport Particles from \"@tsparticles/react\";\r\nimport Fuse from \"fuse.js\";\r\nimport useSound from \"use-sound\";\r\nimport { FaUserTie, FaSearch, FaSyncAlt, FaRobot, FaStar, FaUsers } from \"react-icons/fa\";\r\nimport LeadUrgencyIndicator from \"@/components/LeadUrgencyIndicator\";\r\nimport LeadRevenueDetailWidget from \"@/components/LeadRevenueDetailWidget\";\r\nimport LeadMigrationTool from \"@/components/LeadMigrationTool\";\r\n\r\n// Firestore collection name\r\nconst LEADS_COLLECTION = \"leads\";\r\n\r\nconst statusOptions = [\"New\", \"Contacted\", \"Qualified\", \"Converted\", \"Unqualified\"];\r\nconst filterOptions = [\"All\", ...statusOptions];\r\n\r\nfunction Leads() {\r\n  const [leads, setLeads] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [form, setForm] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    source: \"\",\r\n    status: \"New\",\r\n    score: 50,\r\n    assignedTo: \"\",\r\n    nextFollowUp: \"\",\r\n  });\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const [filter, setFilter] = useState(\"All\");\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [playClick] = useSound(\"/sounds/click.mp3\", { volume: 0.3 });\r\n  const [playSuccess] = useSound(\"/sounds/success.mp3\", { volume: 0.3 });\r\n  const [aiScoring, setAiScoring] = useState(false);\r\n  const [collaborators, setCollaborators] = useState([\"Chris\", \"Alex\"]);\r\n  const fuse = useRef(null);\r\n\r\n  // Real-time Firestore sync\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const unsub = onSnapshot(collection(db, LEADS_COLLECTION), snapshot => {\r\n      const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      setLeads(data);\r\n      setLoading(false);\r\n    }, err => {\r\n      setError(\"Failed to load leads.\");\r\n      setLoading(false);\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  // Metrics\r\n  const metrics = {\r\n    new: leads.filter(l => l.status === \"New\").length,\r\n    contacted: leads.filter(l => l.status === \"Contacted\").length,\r\n    qualified: leads.filter(l => l.status === \"Qualified\").length,\r\n    converted: leads.filter(l => l.status === \"Converted\").length,\r\n    total: leads.length,\r\n    avgScore: leads.length ? Math.round(leads.reduce((sum, l) => sum + (l.score || 0), 0) / leads.length) : 0,\r\n  };\r\n\r\n  // CRUD operations\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n    // Always store as string, fallback to empty string if undefined\r\n    setForm(f => ({ ...f, [name]: value !== undefined && value !== null ? String(value) : \"\" }));\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    // Validate required fields\r\n    if (!form.name || !form.email) {\r\n      setError(\"Name and Email are required.\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    try {\r\n      // Ensure all fields are present and strings\r\n      const safeForm = {\r\n        name: form.name || \"\",\r\n        email: form.email || \"\",\r\n        phone: form.phone || \"\",\r\n        source: form.source || \"\",\r\n        status: form.status || \"New\",\r\n        score: typeof form.score === \"number\" ? form.score : 50,\r\n        assignedTo: form.assignedTo || \"\",\r\n        nextFollowUp: form.nextFollowUp || \"\",\r\n      };\r\n      if (editingId) {\r\n        const leadRef = doc(db, LEADS_COLLECTION, editingId);\r\n        await updateDoc(leadRef, safeForm);\r\n        setLeads(leads.map(l => l.id === editingId ? { ...safeForm, id: editingId } : l));\r\n        setEditingId(null);\r\n      } else {\r\n        const docRef = await addDoc(collection(db, LEADS_COLLECTION), safeForm);\r\n        setLeads([...leads, { ...safeForm, id: docRef.id }]);\r\n      }\r\n      setForm({\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        source: \"\",\r\n        status: \"New\",\r\n        score: 50,\r\n        assignedTo: \"\",\r\n        nextFollowUp: \"\",\r\n      });\r\n      setError(\"\");\r\n    } catch (err) {\r\n      setError(\"Failed to save lead.\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleEdit = lead => {\r\n    setForm(lead);\r\n    setEditingId(lead.id);\r\n  };\r\n\r\n  const handleDelete = async id => {\r\n    setLoading(true);\r\n    try {\r\n      await deleteDoc(doc(db, LEADS_COLLECTION, id));\r\n      setLeads(leads.filter(l => l.id !== id));\r\n      setError(\"\");\r\n    } catch (err) {\r\n      setError(\"Failed to delete lead.\");\r\n    }\r\n    setLoading(false);\r\n    if (editingId === id) {\r\n      setEditingId(null);\r\n      setForm({\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        source: \"\",\r\n        status: \"New\",\r\n        score: 50,\r\n        assignedTo: \"\",\r\n        nextFollowUp: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Smart fuzzy search & filter\r\n  useEffect(() => {\r\n    fuse.current = new Fuse(leads, {\r\n      keys: [\"name\", \"email\", \"phone\", \"source\", \"assignedTo\"],\r\n      threshold: 0.3,\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- fuse instance only needs leads\r\n  }, [leads]);\r\n\r\n  let filteredLeads = leads;\r\n  if (search.trim() && fuse.current) {\r\n    filteredLeads = fuse.current.search(search).map(r => r.item);\r\n  }\r\n  if (filter !== \"All\") {\r\n    filteredLeads = filteredLeads.filter(l => l.status === filter);\r\n  }\r\n\r\n  return (\r\n    <motion.section\r\n      initial={{ opacity: 0, y: 40 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.8 }}\r\n      className={`relative ${darkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'} bg-opacity-80 backdrop-blur-lg rounded-2xl shadow-2xl p-8 mb-8 w-full max-w-7xl mx-auto border border-gray-200`}\r\n      style={{\r\n        background: darkMode\r\n          ? 'linear-gradient(135deg, #222 0%, #333 100%)'\r\n          : 'linear-gradient(135deg, rgba(37,99,235,0.12) 0%, rgba(16,185,129,0.12) 100%)',\r\n        boxShadow: darkMode\r\n          ? '0 8px 32px rgba(37,99,235,0.12), 0 1.5px 8px rgba(16,185,129,0.08)'\r\n          : '0 8px 32px rgba(37,99,235,0.12), 0 1.5px 8px rgba(16,185,129,0.08)',\r\n        overflow: 'hidden',\r\n        transition: 'background 0.5s, color 0.5s',\r\n      }}\r\n      aria-label=\"Lead Management\"\r\n    >\r\n      {/* Particle Animation */}\r\n      <Particles options={{\r\n        background: { color: { value: 'transparent' } },\r\n        fpsLimit: 60,\r\n        particles: {\r\n          color: { value: darkMode ? '#6366f1' : '#2563eb' },\r\n          links: { enable: true, color: darkMode ? '#6366f1' : '#2563eb', distance: 120 },\r\n          move: { enable: true, speed: 1, direction: 'none', outModes: 'bounce' },\r\n          number: { value: 18 },\r\n          opacity: { value: 0.3 },\r\n          shape: { type: 'circle' },\r\n          size: { value: { min: 2, max: 6 } },\r\n        },\r\n        detectRetina: true,\r\n      }} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', zIndex: 0 }} />\r\n\r\n      {/* Dark Mode Toggle */}\r\n      <button\r\n        className=\"absolute top-4 left-4 z-30 p-2 rounded-full bg-white dark:bg-gray-800 shadow hover:bg-blue-100 dark:hover:bg-gray-700 transition\"\r\n        onClick={() => setDarkMode(dm => !dm)}\r\n        title={darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\r\n      >\r\n        {darkMode ? <FaStar className=\"h-5 w-5 text-yellow-400\" /> : <FaStar className=\"h-5 w-5 text-blue-600\" />}\r\n      </button>\r\n\r\n      {/* Collaborators (real-time presence) */}\r\n      <div className=\"absolute top-4 right-4 z-30 flex gap-2\">\r\n        {collaborators.map((c, i) => (\r\n          <span key={i} className=\"flex items-center gap-1 px-2 py-1 rounded-full bg-gradient-to-r from-blue-500 to-green-500 text-white shadow text-xs font-bold animate-pulse\"><FaUsers /> {c}</span>\r\n        ))}\r\n      </div>\r\n\r\n      <h1 className=\"text-3xl font-bold mb-6 flex items-center gap-2\">Lead Management <FaUserTie className=\"text-blue-500\" /></h1>\r\n\r\n      {/* Metrics Cards - Glassmorphism */}\r\n      <div className=\"relative z-10 grid grid-cols-2 md:grid-cols-5 gap-4 mb-6\">\r\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} className=\"bg-gradient-to-r from-blue-500 to-green-500 text-white rounded-xl p-4 shadow-lg\">\r\n          <div className=\"text-lg font-bold dark:text-white\">New</div>\r\n          <motion.div animate={{ scale: [1, 1.2, 1] }} transition={{ repeat: Infinity, duration: 1 }} className=\"text-2xl dark:text-gray-100\">{metrics.new}</motion.div>\r\n        </motion.div>\r\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className=\"bg-gradient-to-r from-green-500 to-purple-500 text-white rounded-xl p-4 shadow-lg\">\r\n          <div className=\"text-lg font-bold dark:text-white\">Contacted</div>\r\n          <div className=\"text-2xl dark:text-gray-100\">{metrics.contacted}</div>\r\n        </motion.div>\r\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.7 }} className=\"bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-xl p-4 shadow-lg\">\r\n          <div className=\"text-lg font-bold dark:text-white\">Qualified</div>\r\n          <div className=\"text-2xl dark:text-gray-100\">{metrics.qualified}</div>\r\n        </motion.div>\r\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }} className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-xl p-4 shadow-lg\">\r\n          <div className=\"text-lg font-bold dark:text-white\">Converted</div>\r\n          <div className=\"text-2xl dark:text-gray-100\">{metrics.converted}</div>\r\n        </motion.div>\r\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.9 }} className=\"bg-gradient-to-r from-green-500 to-yellow-500 text-white rounded-xl p-4 shadow-lg\">\r\n          <div className=\"text-lg font-bold dark:text-white\">Avg. Score</div>\r\n          <div className=\"text-2xl dark:text-gray-100\">{metrics.avgScore}</div>\r\n        </motion.div>\r\n      </div>\r\n\r\n      {/* Lead Capture Form - Glassmorphism */}\r\n      <motion.form className=\"bg-white bg-opacity-80 backdrop-blur-lg rounded-2xl shadow-xl p-6 mb-8 border border-gray-200\" onSubmit={handleSubmit} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.7 }}>\r\n        <h2 className=\"text-xl font-bold mb-4 flex items-center gap-2\">{editingId ? \"Edit Lead\" : \"Add New Lead\"} <FaRobot className=\"text-green-500\" /></h2>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n          <label className=\"block mb-1 font-semibold\" htmlFor=\"lead-name\">Name *</label>\r\n          <input id=\"lead-name\" type=\"text\" name=\"name\" value={form.name} onChange={handleInputChange} placeholder=\"Full Name\" className=\"border rounded-xl px-3 py-2 w-full shadow\" required aria-label=\"Lead Name\" />\r\n          <label className=\"block mb-1 font-semibold\" htmlFor=\"lead-email\">Email *</label>\r\n          <input id=\"lead-email\" type=\"email\" name=\"email\" value={form.email} onChange={handleInputChange} placeholder=\"Email Address\" className=\"border rounded-xl px-3 py-2 w-full shadow\" required aria-label=\"Lead Email\" />\r\n          <label className=\"block mb-1 font-semibold\" htmlFor=\"lead-phone\">Phone</label>\r\n          <input id=\"lead-phone\" type=\"text\" name=\"phone\" value={form.phone} onChange={handleInputChange} placeholder=\"Phone Number\" className=\"border rounded-xl px-3 py-2 w-full shadow\" aria-label=\"Lead Phone\" />\r\n          <label className=\"block mb-1 font-semibold\" htmlFor=\"lead-source\">Source</label>\r\n          <input id=\"lead-source\" type=\"text\" name=\"source\" value={form.source} onChange={handleInputChange} placeholder=\"Lead Source (e.g. Website, Referral)\" className=\"border rounded-xl px-3 py-2 w-full shadow\" aria-label=\"Lead Source\" />\r\n          <label className=\"block mb-1 font-semibold\" htmlFor=\"lead-status\">Status</label>\r\n          <select id=\"lead-status\" name=\"status\" value={form.status} onChange={handleInputChange} className=\"border rounded-xl px-3 py-2 w-full shadow\" aria-label=\"Lead Status\">\r\n            {statusOptions.map(opt => (<option key={opt} value={opt}>{opt}</option>))}\r\n          </select>\r\n          <label className=\"block mb-1 font-semibold\" htmlFor=\"lead-score\">Score</label>\r\n          <input id=\"lead-score\" type=\"number\" name=\"score\" value={form.score} onChange={handleInputChange} placeholder=\"Lead Score (0-100)\" className=\"border rounded-xl px-3 py-2 w-full shadow\" min={0} max={100} aria-label=\"Lead Score\" />\r\n          <label className=\"block mb-1 font-semibold\" htmlFor=\"lead-assigned\">Assigned To</label>\r\n          <input id=\"lead-assigned\" type=\"text\" name=\"assignedTo\" value={form.assignedTo} onChange={handleInputChange} placeholder=\"Assigned To (user)\" className=\"border rounded-xl px-3 py-2 w-full shadow\" aria-label=\"Assigned To\" />\r\n          <label className=\"block mb-1 font-semibold\" htmlFor=\"lead-followup\">Next Follow Up</label>\r\n          <input id=\"lead-followup\" type=\"date\" name=\"nextFollowUp\" value={form.nextFollowUp} onChange={handleInputChange} className=\"border rounded-xl px-3 py-2 w-full shadow\" aria-label=\"Next Follow Up\" />\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <button type=\"submit\" className=\"bg-blue-600 text-white px-4 py-2 rounded-xl shadow hover:bg-blue-700 transition-all duration-200\" aria-label={editingId ? \"Update Lead\" : \"Add Lead\"}>\r\n            {editingId ? \"Update Lead\" : \"Add Lead\"}\r\n          </button>\r\n          {editingId && (\r\n            <button type=\"button\" className=\"bg-gray-300 px-4 py-2 rounded-xl shadow\" onClick={() => { setEditingId(null); setForm({ name: \"\", email: \"\", phone: \"\", source: \"\", status: \"New\", score: 50, assignedTo: \"\", nextFollowUp: \"\" }); }} aria-label=\"Cancel Edit\">Cancel</button>\r\n          )}\r\n        </div>\r\n        {error && <div className=\"text-red-600 mt-2 font-semibold\">{error}</div>}\r\n      </motion.form>\r\n\r\n      {/* Smart Search & Filter - Glassmorphism */}\r\n      <div className=\"mb-4 flex flex-col md:flex-row gap-2 items-center\">\r\n        <div className=\"flex gap-2 w-full md:w-1/2\">\r\n          <div className=\"relative w-full\">\r\n            <input type=\"text\" value={search} onChange={e => setSearch(e.target.value)} placeholder=\"Smart Search...\" className=\"border rounded-xl px-3 py-2 w-full shadow\" aria-label=\"Smart Search\" />\r\n            <FaSearch className=\"absolute right-3 top-3 text-blue-500\" />\r\n          </div>\r\n          <select value={filter} onChange={e => setFilter(e.target.value)} className=\"border rounded-xl px-3 py-2 shadow\" aria-label=\"Status Filter\">\r\n            {filterOptions.map(opt => (<option key={opt} value={opt}>{opt}</option>))}\r\n          </select>\r\n        </div>\r\n        <button className=\"px-3 py-2 rounded-xl font-semibold border bg-green-600 text-white border-green-600 shadow-lg ml-2 flex items-center gap-2\" onClick={() => { setRefreshing(true); playClick(); setTimeout(() => setRefreshing(false), 1000); }} aria-label=\"Refresh Data\">\r\n          <FaSyncAlt /> {refreshing ? \"Refreshing...\" : \"Refresh\"}\r\n        </button>\r\n        <button className=\"px-3 py-2 rounded-xl font-semibold border bg-purple-600 text-white border-purple-600 shadow-lg ml-2 flex items-center gap-2\" onClick={() => { setAiScoring(a => !a); playClick(); }} aria-label=\"AI Scoring\">\r\n          <FaRobot /> {aiScoring ? \"AI Scoring On\" : \"AI Scoring\"}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Lead Card Grid - Glassmorphism, BI, Animations */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {filteredLeads.length === 0 ? (\r\n          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} className=\"col-span-full text-center py-8 text-gray-500 bg-white bg-opacity-60 rounded-2xl shadow-xl\">\r\n            No leads found.\r\n          </motion.div>\r\n        ) : (\r\n          filteredLeads.map(lead => (\r\n            <motion.div\r\n              key={lead.id}\r\n              initial={{ opacity: 0, y: 40 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              whileHover={{ scale: 1.03, boxShadow: '0 0 32px #6366f1' }}\r\n              transition={{ duration: 0.7 }}\r\n              className={`relative bg-gradient-to-br from-blue-50 via-white to-green-50 rounded-2xl p-6 shadow-xl glassmorphism border border-gray-200 flex flex-col gap-2`}\r\n              tabIndex={0}\r\n              aria-label={`Lead card for ${lead.name}`}\r\n            >\r\n              <div className=\"flex justify-between items-center mb-2\">\r\n                <span className=\"font-bold text-lg text-blue-700 dark:text-white\">{lead.name}</span>\r\n                <LeadUrgencyIndicator score={lead.score} status={lead.status} />\r\n              </div>\r\n              <div className=\"text-sm text-gray-700 dark:text-gray-200 mb-1\"><FaUserTie className=\"inline mr-1\" /> {lead.email}</div>\r\n              <div className=\"text-sm text-gray-700 dark:text-gray-200 mb-1\">📞 {lead.phone}</div>\r\n              <div className=\"text-xs text-gray-500 dark:text-gray-300 mb-1\">Source: {lead.source}</div>\r\n              <div className=\"flex gap-2 items-center mb-2\">\r\n                <span className={`px-2 py-1 rounded-full text-xs font-bold ${lead.status === 'Converted' ? 'bg-green-500 text-white' : 'bg-blue-200 text-blue-800'}`}>{lead.status}</span>\r\n                <span className=\"px-2 py-1 rounded-full text-xs font-bold bg-yellow-100 text-yellow-800\">Score: {aiScoring ? Math.round(lead.score * 1.1 + 7) : lead.score}</span>\r\n                <span className=\"px-2 py-1 rounded-full text-xs font-bold bg-purple-100 text-purple-800\">Assigned: {lead.assignedTo}</span>\r\n              </div>\r\n              <div className=\"text-xs text-gray-500 dark:text-gray-300 mb-2\">Next Follow-Up: {lead.nextFollowUp}</div>\r\n              {/* BI Widget */}\r\n              <LeadRevenueDetailWidget lead={lead} />\r\n              {/* Migration Tool (wow factor) */}\r\n              <LeadMigrationTool lead={lead} />\r\n              <div className=\"flex gap-2 mt-2\">\r\n                <button className=\"bg-yellow-500 text-white px-3 py-1 rounded-xl text-xs shadow hover:bg-yellow-600 transition-all duration-200\" onClick={() => handleEdit(lead)} aria-label=\"Edit Lead\">Edit</button>\r\n                <button className=\"bg-red-500 text-white px-3 py-1 rounded-xl text-xs shadow hover:bg-red-600 transition-all duration-200\" onClick={() => handleDelete(lead.id)} aria-label=\"Delete Lead\">Delete</button>\r\n              </div>\r\n            </motion.div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </motion.section>\r\n  );\r\n}\r\n\r\nexport default Leads;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Letters.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useDemo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState , useEffect } from \"react\";\r\n\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, query, onSnapshot } from 'firebase/firestore';\r\nimport { demoLetters } from \"../data/demoData\";\r\n\r\nexport default function Letters() {\r\n  const [templates, setTemplates] = useState(demoLetters);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'letters'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setTemplates(firebaseData);\r\n          setUseDemo(false);\r\n        },\r\n        (error) => {\r\n          setTemplates(demoLetters);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setTemplates(demoLetters);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Letters</h1>\r\n        <div className=\"overflow-x-auto mb-8\">\r\n          <table className=\"min-w-full bg-white rounded shadow\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"py-2 px-4 text-left\">Client</th>\r\n                <th className=\"py-2 px-4 text-left\">Type</th>\r\n                <th className=\"py-2 px-4 text-left\">Status</th>\r\n                <th className=\"py-2 px-4 text-left\">Date Sent</th>\r\n                <th className=\"py-2 px-4 text-left\">Bureau</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {templates.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan={5} className=\"text-center py-4 text-gray-500\">\r\n                    No letters found.\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                templates.map((letter) => (\r\n                  <tr key={letter.id} className=\"border-b\">\r\n                    <td className=\"py-2 px-4\">{letter.clientName}</td>\r\n                    <td className=\"py-2 px-4\">{letter.type}</td>\r\n                    <td className=\"py-2 px-4\">{letter.status}</td>\r\n                    <td className=\"py-2 px-4\">{letter.dateSent}</td>\r\n                    <td className=\"py-2 px-4\">{letter.bureau}</td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\LoadingStates.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Login.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\MasterAdminDiagnostic.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\MessageThread.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\MobileOptimizedUserList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ModernDashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ModernDashboardGlass.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Navigation.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":112,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Moved console.log after navSections declaration to fix initialization error\r\n\r\nimport React, { useState } from \"react\";\r\nimport { FaBars ,\r\n  FaHome,\r\n  FaUsers,\r\n  FaUser,\r\n  FaRocket,\r\n  FaLayerGroup,\r\n  FaFileAlt,\r\n  FaChartBar,\r\n  FaTools,\r\n  FaMoneyBill,\r\n  FaCalendarAlt,\r\n  FaEnvelope,\r\n  FaCogs,\r\n  FaShieldAlt,\r\n  FaQuestionCircle\r\n} from \"react-icons/fa\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { useAuth } from \"../auth/AuthProvider\";\r\n\r\n\r\nconst navSections = [\r\n  {\r\n    label: \"Dashboard\",\r\n    icon: <FaHome className=\"mr-2\" />,\r\n    links: [\r\n      { label: \"Dashboard\", to: \"/dashboard\", icon: <FaHome /> },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Client Management\",\r\n    icon: <FaUsers className=\"mr-2\" />,\r\n    links: [\r\n      { label: \"Contacts\", to: \"/contacts\", icon: <FaUser /> },\r\n      { label: \"Clients\", to: \"/client-management\", icon: <FaUsers /> },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Credit Services\",\r\n    icon: <FaLayerGroup className=\"mr-2\" />,\r\n    links: [\r\n      { label: \"IDIQ Integration\", to: \"/idiq\", icon: <FaRocket /> },\r\n      { label: \"Dispute Center\", to: \"/dispute-center\", icon: <FaFileAlt /> },\r\n      { label: \"Progress Portal\", to: \"/progress-portal\", icon: <FaChartBar /> },\r\n      { label: \"Credit Scores\", to: \"/credit-scores\", icon: <FaChartBar /> },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Communications & Letters\",\r\n    icon: <FaEnvelope className=\"mr-2\" />,\r\n    links: [\r\n      { label: \"Letters\", to: \"/letters\", icon: <FaFileAlt /> },\r\n      { label: \"Dispute Letters\", to: \"/dispute-letters\", icon: <FaFileAlt /> },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Analytics & Reports\",\r\n    icon: <FaChartBar className=\"mr-2\" />,\r\n    links: [\r\n      { label: \"Analytics\", to: \"/analytics\", icon: <FaChartBar /> },\r\n      { label: \"Contact Reports\", to: \"/contact-reports\", icon: <FaChartBar /> },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Business Tools\",\r\n    icon: <FaTools className=\"mr-2\" />,\r\n    links: [\r\n      { label: \"Billing\", to: \"/billing\", icon: <FaMoneyBill /> },\r\n      { label: \"Calendar\", to: \"/calendar\", icon: <FaCalendarAlt /> },\r\n      { label: \"Export\", to: \"/export\", icon: <FaFileAlt /> },\r\n      { label: \"Bulk\", to: \"/bulk\", icon: <FaLayerGroup /> },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Automation & AI\",\r\n    icon: <FaCogs className=\"mr-2\" />,\r\n    links: [\r\n      { label: \"Automation\", to: \"/automation\", icon: <FaCogs /> },\r\n      { label: \"Drip Campaigns\", to: \"/drip-campaigns\", icon: <FaRocket /> },\r\n      { label: \"OpenAI Integration\", to: \"/openai\", icon: <FaRocket /> },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Administration\",\r\n    icon: <FaShieldAlt className=\"mr-2\" />,\r\n    links: [\r\n      { label: \"Permissions\", to: \"/permissions\", icon: <FaShieldAlt /> },\r\n      { label: \"Setup\", to: \"/setup\", icon: <FaCogs /> },\r\n      { label: \"Location\", to: \"/location\", icon: <FaUser /> },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Support\",\r\n    icon: <FaQuestionCircle className=\"mr-2\" />,\r\n    links: [\r\n      { label: \"Help\", to: \"/help\", icon: <FaQuestionCircle /> },\r\n    ],\r\n  },\r\n];\r\n\r\nimport { useNotification } from '../contexts/NotificationContext';\r\nimport NotificationPanel from './NotificationPanel';\r\n\r\nexport default function Navigation() {\r\n  const location = useLocation();\r\n  const [openSection, setOpenSection] = useState(null);\r\n  const [showPanel, setShowPanel] = useState(false);\r\n  const [mobileOpen, setMobileOpen] = useState(false);\r\n  const { urgentCount } = useNotification();\r\n  const { user, loading, claims } = useAuth();\r\n\r\n  if (loading) return null; // don’t render menu until ready\r\n\r\n  const handleAccordion = idx => {\r\n    setOpenSection(openSection === idx ? null : idx);\r\n  };\r\n\r\n  // Responsive: show hamburger on mobile\r\n  return (\r\n    <>\r\n      <div className=\"md:hidden fixed top-4 left-4 z-50\">\r\n        <button\r\n          aria-label=\"Open menu\"\r\n          className=\"p-2 rounded-full bg-blue-700 text-white shadow-lg\"\r\n          onClick={() => setMobileOpen(true)}\r\n        >\r\n          <FaBars size={24} />\r\n        </button>\r\n      </div>\r\n      <nav\r\n        className={`h-full w-64 bg-gradient-to-b from-blue-900 to-blue-800 text-white flex flex-col py-6 px-4 shadow-2xl overflow-y-auto fixed top-0 left-0 z-40 transition-transform duration-300 md:relative md:translate-x-0 ${mobileOpen ? 'translate-x-0' : '-translate-x-full'} md:block`}\r\n        style={{ minHeight: '100vh' }}\r\n      >\r\n        {/* Mobile close button */}\r\n        <div className=\"md:hidden flex justify-end mb-2\">\r\n          <button\r\n            aria-label=\"Close menu\"\r\n            className=\"p-2 rounded-full bg-blue-700 text-white shadow-lg\"\r\n            onClick={() => setMobileOpen(false)}\r\n          >\r\n            ✕\r\n          </button>\r\n        </div>\r\n        {/* Branding/Logo Section */}\r\n        <div className=\"flex flex-col items-center mb-6\">\r\n          <img src=\"/logo-brand-128.png\" alt=\"Speedy Credit Repair\" className=\"w-14 h-14 mb-2 rounded-full shadow-lg bg-white\" />\r\n          <div className=\"text-xl font-extrabold tracking-wide mb-1\">Speedy Credit Repair</div>\r\n          <div className=\"text-xs text-blue-200 font-semibold\">CRM Platform</div>\r\n        </div>\r\n\r\n        {/* Notification Bell */}\r\n        <div className=\"flex justify-end mb-4\">\r\n          <div className=\"relative\">\r\n            <span className=\"text-2xl cursor-pointer\" title=\"Urgent Notifications\" onClick={() => setShowPanel(v => !v)}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" className=\"w-7 h-7 text-yellow-400\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\" />\r\n              </svg>\r\n              {urgentCount > 0 && (\r\n                <span className=\"absolute -top-2 -right-2 bg-red-600 text-white rounded-full px-2 py-1 text-xs font-bold\">{urgentCount}</span>\r\n              )}\r\n            </span>\r\n            {showPanel && <NotificationPanel isOpen={showPanel} onClose={() => setShowPanel(false)} />}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Accordion Sidebar */}\r\n        <div className=\"flex-1\">\r\n          {navSections.map((section, idx) => (\r\n            <div key={section.label} className=\"mb-2\">\r\n              <button\r\n                className={`w-full flex items-center justify-between px-3 py-2 font-semibold text-left rounded transition-colors duration-350 focus:outline-none ${openSection === idx ? 'bg-blue-800' : 'bg-blue-900 hover:bg-blue-800'}`}\r\n                onClick={() => handleAccordion(idx)}\r\n                aria-expanded={openSection === idx}\r\n              >\r\n                <span className=\"flex items-center\">{section.icon}{section.label}</span>\r\n                <span className={`ml-2 transition-transform duration-350 ${openSection === idx ? 'rotate-90' : ''}`}>▶</span>\r\n              </button>\r\n              <div\r\n                className={`overflow-hidden transition-all duration-350 ${openSection === idx ? 'max-h-96 py-2' : 'max-h-0 py-0'}`}\r\n              >\r\n                <ul className=\"pl-6\">\r\n                  {section.links\r\n                    .filter(link => link.label !== \"IDIQ Integration\" || claims?.idiq)\r\n                    .map(link => (\r\n                      <li key={link.label} className=\"mb-1\">\r\n                        <Link\r\n                          to={link.to}\r\n                          className={`flex items-center px-2 py-2 rounded text-sm font-medium transition-colors duration-350 ${location.pathname === link.to ? 'bg-blue-700 text-white' : 'text-blue-100 hover:bg-blue-700 hover:text-white'}`}\r\n                          onClick={() => setMobileOpen(false)}\r\n                        >\r\n                          <span className=\"mr-2\">{link.icon}</span>\r\n                          {link.label}\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\NotificationPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'sendNotification' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":5,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { useNotification } from '../contexts/NotificationContext';\r\n\r\nconst NotificationPanel = ({ isOpen, onClose }) => {\r\n  const { notifications, sendNotification } = useNotification();\r\n  const [now, setNow] = useState(Date.now());\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => setNow(Date.now()), 1000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`fixed top-0 right-0 h-full w-96 bg-white shadow-lg z-50 transition-transform duration-300 ${isOpen ? 'translate-x-0' : 'translate-x-full'}`}>\r\n      <div className=\"flex justify-between items-center p-4 border-b\">\r\n        <h2 className=\"text-lg font-bold\">Urgent Notifications</h2>\r\n        <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">✕</button>\r\n      </div>\r\n      <div className=\"p-4 overflow-y-auto h-full\">\r\n        {notifications.length === 0 ? (\r\n          <div className=\"text-gray-500\">No urgent contacts.</div>\r\n        ) : (\r\n          notifications.map(contact => {\r\n            const timeLeft = contact.responseRequiredBy ? Math.max(0, Math.floor((new Date(contact.responseRequiredBy) - now) / 1000)) : null;\r\n            return (\r\n              <div key={contact.id} className=\"mb-4 p-3 bg-yellow-50 rounded shadow flex flex-col gap-2\">\r\n                <div className=\"font-semibold text-lg\">{contact.firstName} {contact.lastName}</div>\r\n                <div className=\"text-sm text-gray-700\">Source: {contact.source}</div>\r\n                <div className=\"text-sm text-red-600\">Time Remaining: {timeLeft !== null ? `${Math.floor(timeLeft/60)}m ${timeLeft%60}s` : 'N/A'}</div>\r\n                <div className=\"flex gap-2 mt-2\">\r\n                  <button className=\"px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => window.open(`tel:${contact.phone}`)}>Call</button>\r\n                  <button className=\"px-3 py-1 bg-green-500 text-white rounded\" onClick={() => window.open(`mailto:${contact.email}`)}>Email</button>\r\n                  <button className=\"px-3 py-1 bg-gray-300 rounded\" onClick={() => {/* Mark handled logic */}}>Mark Handled</button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotificationPanel;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\NotificationSystem.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { CheckCircleIcon, XCircleIcon, InformationCircleIcon, ExclamationTriangleIcon, XMarkIcon } from '@heroicons/react/24/outline';\r\n\r\nexport const useNotifications = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  \r\n  const addNotification = (message, type = 'info', duration = 5000) => {\r\n    const id = Date.now();\r\n    setNotifications(prev => [...prev, { id, message, type }]);\r\n    \r\n    if (duration) {\r\n      setTimeout(() => {\r\n        removeNotification(id);\r\n      }, duration);\r\n    }\r\n  };\r\n  \r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(n => n.id !== id));\r\n  };\r\n  \r\n  return { notifications, addNotification, removeNotification };\r\n};\r\n\r\nconst NotificationSystem = ({ notifications = [], onRemove }) => {\r\n  const icons = {\r\n    success: <CheckCircleIcon className=\"h-5 w-5 text-green-500\" />,\r\n    error: <XCircleIcon className=\"h-5 w-5 text-red-500\" />,\r\n    warning: <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-500\" />,\r\n    info: <InformationCircleIcon className=\"h-5 w-5 text-blue-500\" />\r\n  };\r\n  \r\n  const colors = {\r\n    success: 'bg-green-50 border-green-200',\r\n    error: 'bg-red-50 border-red-200',\r\n    warning: 'bg-yellow-50 border-yellow-200',\r\n    info: 'bg-blue-50 border-blue-200'\r\n  };\r\n  \r\n  return (\r\n    <div className=\"fixed top-4 right-4 z-50 space-y-2\">\r\n      {notifications.map(notification => (\r\n        <div\r\n          key={notification.id}\r\n          className={`flex items-center gap-3 p-4 rounded-lg border shadow-lg ${colors[notification.type]} animate-slide-in`}\r\n        >\r\n          {icons[notification.type]}\r\n          <span className=\"flex-1\">{notification.message}</span>\r\n          <button onClick={() => onRemove(notification.id)}>\r\n            <XMarkIcon className=\"h-4 w-4 text-gray-500 hover:text-gray-700\" />\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotificationSystem;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\OnboardingModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\PdfGenerator.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\PieChart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ProgressPortal.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useDemo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState , useEffect } from \"react\";\r\n\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, query, onSnapshot } from 'firebase/firestore';\r\n\r\nconst demoProgress = [\r\n  { id: 1, client: \"John Doe\", status: \"In Progress\", percent: 65 },\r\n  { id: 2, client: \"Jane Smith\", status: \"Completed\", percent: 100 },\r\n];\r\n\r\nexport default function ProgressPortal() {\r\n  const [progress, setProgress] = useState(demoProgress);\r\n  const [useDemo, setUseDemo] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = null;\r\n    try {\r\n      const q = query(collection(db, 'progress'));\r\n      unsubscribe = onSnapshot(q,\r\n        (snapshot) => {\r\n          const firebaseData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n          setProgress(firebaseData);\r\n          setUseDemo(false);\r\n        },\r\n        (error) => {\r\n          setProgress(demoProgress);\r\n          setUseDemo(true);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      setProgress(demoProgress);\r\n      setUseDemo(true);\r\n    }\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Progress Portal</h1>\r\n        <div className=\"overflow-x-auto mb-8\">\r\n          <table className=\"min-w-full bg-white rounded shadow\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"py-2 px-4 text-left\">Client</th>\r\n                <th className=\"py-2 px-4 text-left\">Status</th>\r\n                <th className=\"py-2 px-4 text-left\">Progress</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {progress.length === 0 ? (\r\n                <tr>\r\n                  <td\r\n                    colSpan={3}\r\n                    className=\"text-center py-4 text-gray-500\"\r\n                  >\r\n                    No progress data found.\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                progress.map((row) => (\r\n                  <tr key={row.id} className=\"border-b\">\r\n                    <td className=\"py-2 px-4\">{row.client}</td>\r\n                    <td className=\"py-2 px-4\">{row.status}</td>\r\n                    <td className=\"py-2 px-4\">{row.percent}%</td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ProtectedRoute.jsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":33,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1266,1312],"text":"You don&apos;t have permission to access this area."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1266,1312],"text":"You don&lsquo;t have permission to access this area."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1266,1312],"text":"You don&#39;t have permission to access this area."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1266,1312],"text":"You don&rsquo;t have permission to access this area."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { usePermission } from '../usePermission';\r\n\r\nexport const ProtectedRoute = ({ children, requireAdmin = false }) => {\r\n  const { isAuthenticated, isMasterAdmin, userRole, loading } = usePermission();\r\n  // userProfile is not needed, use userRole instead\r\n  const location = useLocation();\r\n\r\n  // Show loading spinner while checking auth\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-900\">\r\n        <div className=\"text-white text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\r\n          <p>Authenticating...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Redirect to login if not authenticated\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  // Check admin requirement\r\n  if (requireAdmin && !isMasterAdmin && userRole !== 'admin') {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-900\">\r\n        <div className=\"text-white text-center\">\r\n          <h1 className=\"text-2xl font-bold mb-4\">Access Denied</h1>\r\n          <p>You don't have permission to access this area.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return children;\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Register.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ResponsiveLayout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\RevenueEstimator.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":50,"column":7,"nodeType":"CallExpression","endLine":50,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// scr-admin-vite/src/components/RevenueEstimator.jsx\r\nimport React, { useEffect, useState } from 'react'; // NEW: Added useState and useEffect for dynamic chart colors\r\nimport Card from './ui/card';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nfunction RevenueEstimator() {\r\n  // NEW: State for chart colors to update dynamically with dark/light mode toggle\r\n  const [chartColors, setChartColors] = useState({\r\n    textColor: '#343a40', // speedy-dark-neutral-700 (light mode default)\r\n    secondaryTextColor: '#6c757d', // speedy-dark-neutral-500 (light mode default)\r\n    gridColor: 'rgba(108, 117, 125, 0.2)', // speedy-dark-neutral-500 alpha\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Update chart colors when dark mode changes\r\n    if (document.body.classList.contains('dark-mode')) {\r\n      setChartColors({\r\n        textColor: '#f0f4f8', // primary dark text color\r\n        secondaryTextColor: '#adb5bd', // speedy-dark-neutral-400\r\n        gridColor: 'rgba(173, 181, 189, 0.2)', // speedy-dark-neutral-400 alpha\r\n      });\r\n    } else {\r\n      setChartColors({\r\n        textColor: '#343a40',\r\n        secondaryTextColor: '#6c757d',\r\n        gridColor: 'rgba(108, 117, 125, 0.2)',\r\n      });\r\n    }\r\n  }, [document.body.classList.contains('dark-mode')]); // Dependency on dark-mode class\r\n\r\n  const data = {\r\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\r\n    datasets: [\r\n      {\r\n        label: 'Actual Revenue',\r\n        data: [10000, 12000, 11000, 13000, 15000, 14500],\r\n        borderColor: '#007bff', // speedy-blue-500\r\n        backgroundColor: 'rgba(0, 123, 255, 0.5)', // speedy-blue-500 with alpha\r\n        tension: 0.1,\r\n      },\r\n      {\r\n        label: 'Estimated Revenue',\r\n        data: [11000, 12500, 11500, 13500, 16000, 15500],\r\n        borderColor: '#28a745', // speedy-green-500\r\n        backgroundColor: 'rgba(40, 167, 69, 0.5)', // speedy-green-500 with alpha\r\n        borderDash: [5, 5],\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n        labels: {\r\n          color: chartColors.textColor, // Use dynamic color\r\n        },\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Revenue Performance',\r\n        color: chartColors.textColor, // Use dynamic color\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n          color: chartColors.secondaryTextColor, // Use dynamic color\r\n        },\r\n        grid: {\r\n          color: chartColors.gridColor, // Use dynamic color\r\n        },\r\n      },\r\n      y: {\r\n        ticks: {\r\n          color: chartColors.secondaryTextColor, // Use dynamic color\r\n        },\r\n        grid: {\r\n          color: chartColors.gridColor, // Use dynamic color\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Card className=\"h-96 flex flex-col\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Revenue Estimator</h3>\r\n      <div className=\"flex-1\">\r\n        <Line data={data} options={options} />\r\n      </div>\r\n      <p className=\"text-sm text-speedy-dark-neutral-500 dark:text-speedy-dark-neutral-400 mt-4\">\r\n        Projected vs. Actual Revenue.\r\n      </p>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RevenueEstimator;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\RevenueForecastWidget.jsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":10,"column":17,"nodeType":"Identifier","endLine":10,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\r\nimport RevenuePredictionEngine from '../utils/RevenuePredictionEngine';\r\n\r\nexport default function RevenueForecastWidget({ leads, month, year }) {\r\n  // Debug: Log when component is called and what leads data is received\r\n  // ...removed for production...\r\n\r\n  let forecasts;\r\n  try {\r\n    forecasts = useMemo(() => {\r\n      if (!leads || leads.length === 0) {\r\n        // ...removed for production...\r\n        return null;\r\n      }\r\n      const engine = new RevenuePredictionEngine({ leads, month, year });\r\n      const result = {\r\n        conservative: engine.generateMonthlyForecast('conservative'),\r\n        realistic: engine.generateMonthlyForecast('realistic'),\r\n        optimistic: engine.generateMonthlyForecast('optimistic'),\r\n      };\r\n      // ...removed for production...\r\n      return result;\r\n    }, [leads, month, year]);\r\n  } catch (err) {\r\n    console.error('[RevenueForecastWidget] error in useMemo:', err);\r\n    forecasts = null;\r\n  }\r\n\r\n  if (!forecasts) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow p-4 mb-8\">\r\n        <h2 className=\"text-xl font-semibold mb-2\">Revenue Forecast (DEBUG)</h2>\r\n        <div className=\"text-red-500\">Widget loaded, but no forecast available.</div>\r\n        <div className=\"text-xs text-gray-500\">Check console for debug info.</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Confidence: based on spread between scenarios\r\n  const spread = forecasts.optimistic.totalForecast - forecasts.conservative.totalForecast;\r\n  const confidence = spread < 0.2 * forecasts.realistic.totalForecast ? 'High' : spread < 0.4 * forecasts.realistic.totalForecast ? 'Medium' : 'Low';\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow p-4 mb-8\">\r\n      <h2 className=\"text-xl font-semibold mb-2\">Revenue Forecast ({month}/{year})</h2>\r\n      <div className=\"flex flex-col md:flex-row gap-6 items-center mb-2\">\r\n        <div className=\"flex flex-col items-center\">\r\n          <div className=\"text-2xl font-bold text-blue-700\">${forecasts.realistic.totalForecast.toLocaleString()}</div>\r\n          <div className=\"text-sm text-gray-600\">Realistic</div>\r\n        </div>\r\n        <div className=\"flex flex-col items-center\">\r\n          <div className=\"text-xl text-green-700\">${forecasts.optimistic.totalForecast.toLocaleString()}</div>\r\n          <div className=\"text-xs text-gray-500\">Optimistic</div>\r\n        </div>\r\n        <div className=\"flex flex-col items-center\">\r\n          <div className=\"text-xl text-yellow-700\">${forecasts.conservative.totalForecast.toLocaleString()}</div>\r\n          <div className=\"text-xs text-gray-500\">Conservative</div>\r\n        </div>\r\n        <div className=\"flex flex-col items-center\">\r\n          <div className=\"text-lg font-semibold text-purple-700\">Confidence: {confidence}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"text-xs text-gray-500 mb-2\">Based on {leads.length} leads, scenario spread: ${spread.toLocaleString()}</div>\r\n      <div className=\"mt-2\">\r\n        <strong>Key Metrics:</strong>\r\n        <ul className=\"list-disc ml-6 text-sm text-gray-700\">\r\n          <li>Avg Conversion Probability: {\r\n            leads.length\r\n              ? (\r\n                  leads\r\n                    .map(l => (new RevenuePredictionEngine({ leads: [l], month, year })).calculateConversionProbability(l))\r\n                    .reduce((a, b) => a + b, 0) / leads.length\r\n                ).toFixed(2)\r\n              : '0.00'\r\n          }</li>\r\n          <li>Avg Estimated Revenue per Lead: {\r\n            leads.length\r\n              ? (forecasts.realistic.totalForecast / leads.length).toFixed(2)\r\n              : '0.00'\r\n          }</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\SampleIconsFontAwesome.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\SampleIconsHeroicons.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\SampleIconsMaterial.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\SampleIconsRemix.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Scores\\AddScoreUpdate.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\Settings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'getApiKey' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'activeTab' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'setActiveTab' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":33},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":96,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":96,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2696,2696],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { getApiKey, setApiKey } from \"../openaiConfig\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Simple encryption/decryption for demo (replace with robust solution in production)\r\nfunction encrypt(text) {\r\n  return btoa(text);\r\n}\r\nfunction decrypt(text) {\r\n  try { return atob(text); } catch { return \"\"; }\r\n}\r\n\r\nfunction saveKeyToStorage(key) {\r\n  localStorage.setItem(\"openai_api_key\", encrypt(key));\r\n}\r\nfunction loadKeyFromStorage() {\r\n  const enc = localStorage.getItem(\"openai_api_key\");\r\n  return enc ? decrypt(enc) : \"\";\r\n}\r\nfunction removeKeyFromStorage() {\r\n  localStorage.removeItem(\"openai_api_key\");\r\n}\r\n\r\nasync function validateApiKey(key) {\r\n  try {\r\n    const response = await fetch(\"https://api.openai.com/v1/models\", {\r\n      headers: { \"Authorization\": `Bearer ${key}` }\r\n    });\r\n    return response.ok;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default function Settings() {\r\n  const [apiKey, setApiKeyState] = useState(\"\");\r\n  const [showKey, setShowKey] = useState(false);\r\n  const [status, setStatus] = useState(\"not_configured\");\r\n  const [usage, setUsage] = useState(null);\r\n  const [testLoading, setTestLoading] = useState(false);\r\n  const [testError, setTestError] = useState(\"\");\r\n  const [activeTab, setActiveTab] = useState(\"openai\");\r\n\r\n  useEffect(() => {\r\n    const stored = loadKeyFromStorage();\r\n    if (stored) {\r\n      setApiKeyState(stored);\r\n      setApiKey(stored);\r\n      setStatus(\"connected\");\r\n    }\r\n  }, []);\r\n\r\n  const handleKeyChange = e => {\r\n    setApiKeyState(e.target.value);\r\n    setStatus(\"not_configured\");\r\n  };\r\n\r\n  const handleSaveKey = () => {\r\n    saveKeyToStorage(apiKey);\r\n    setApiKey(apiKey);\r\n    setStatus(\"not_configured\");\r\n  };\r\n\r\n  const handleRemoveKey = () => {\r\n    removeKeyFromStorage();\r\n    setApiKeyState(\"\");\r\n    setApiKey(\"\");\r\n    setStatus(\"not_configured\");\r\n  };\r\n\r\n  const handleTestKey = async () => {\r\n    setTestLoading(true);\r\n    setTestError(\"\");\r\n    const valid = await validateApiKey(apiKey);\r\n    setTestLoading(false);\r\n    if (valid) {\r\n      setStatus(\"connected\");\r\n    } else {\r\n      setStatus(\"invalid\");\r\n      setTestError(\"API key is invalid or connection failed.\");\r\n    }\r\n  };\r\n\r\n  // Usage tracking (demo: fetch usage from OpenAI API)\r\n  useEffect(() => {\r\n    async function fetchUsage() {\r\n      if (!apiKey) return;\r\n      try {\r\n        const resp = await fetch(\"https://api.openai.com/v1/dashboard/billing/usage\", {\r\n          headers: { \"Authorization\": `Bearer ${apiKey}` }\r\n        });\r\n        if (resp.ok) {\r\n          const data = await resp.json();\r\n          setUsage(data);\r\n        }\r\n      } catch {}\r\n    }\r\n    fetchUsage();\r\n  }, [apiKey, status]);\r\n\r\n  // Backup/Recovery\r\n  const handleBackup = () => {\r\n    const backup = encrypt(apiKey);\r\n    navigator.clipboard.writeText(backup);\r\n    alert(\"API key backup copied to clipboard.\");\r\n  };\r\n  const handleRestore = () => {\r\n    const backup = prompt(\"Paste your encrypted API key backup:\");\r\n    if (backup) {\r\n      const key = decrypt(backup);\r\n      setApiKeyState(key);\r\n      saveKeyToStorage(key);\r\n      setApiKey(key);\r\n      setStatus(\"not_configured\");\r\n    }\r\n  };\r\n\r\n  // Security warning\r\n  const securityWarning = (\r\n    <div className=\"bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4\">\r\n      <strong>Security Warning:</strong> Never share your API key. Store it securely. For production, use environment variables and server-side storage.\r\n    </div>\r\n  );\r\n\r\n  // Status indicator\r\n  const statusIndicator = (\r\n    <span className={`inline-block px-2 py-1 rounded text-xs font-semibold ${status === \"connected\" ? \"bg-green-100 text-green-700\" : status === \"invalid\" ? \"bg-red-100 text-red-700\" : \"bg-gray-100 text-gray-700\"}`}>\r\n      {status === \"connected\" ? \"Connected\" : status === \"invalid\" ? \"Invalid\" : \"Not Configured\"}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white text-gray-900\">\r\n      <main className=\"mx-auto max-w-4xl px-6 py-10\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Settings</h1>\r\n        <p className=\"mb-8 text-lg text-gray-700\">Manage your CRM settings here.</p>\r\n        <div className=\"bg-white rounded-lg border shadow p-6\">\r\n          {securityWarning}\r\n          <div className=\"mb-4 flex items-center gap-2\">\r\n            <label className=\"font-semibold\">OpenAI API Key:</label>\r\n            {statusIndicator}\r\n          </div>\r\n          <div className=\"mb-4 flex gap-2 items-center\">\r\n            <input\r\n              type={showKey ? \"text\" : \"password\"}\r\n              value={apiKey}\r\n              onChange={handleKeyChange}\r\n              className=\"border rounded px-3 py-2 w-full max-w-md\"\r\n              placeholder=\"Enter your OpenAI API key\"\r\n            />\r\n            <button className=\"px-2 py-1 bg-gray-200 rounded\" onClick={() => setShowKey(s => !s)}>\r\n              {showKey ? \"Hide\" : \"Show\"}\r\n            </button>\r\n          </div>\r\n          <div className=\"mb-4 flex gap-2\">\r\n            <button className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\" onClick={handleSaveKey}>Save Key</button>\r\n            <button className=\"bg-gray-300 px-4 py-2 rounded\" onClick={handleRemoveKey}>Remove Key</button>\r\n            <button className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\" onClick={handleTestKey} disabled={testLoading}>{testLoading ? \"Testing...\" : \"Test Connection\"}</button>\r\n            <button className=\"bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700\" onClick={handleBackup}>Backup Key</button>\r\n            <button className=\"bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700\" onClick={handleRestore}>Restore Key</button>\r\n          </div>\r\n          {testError && <div className=\"text-red-600 mb-2\">{testError}</div>}\r\n          <div className=\"mb-4\">\r\n            <h3 className=\"font-semibold mb-2\">Usage & Rate Limits</h3>\r\n            {usage ? (\r\n              <div className=\"bg-gray-100 p-4 rounded text-sm\">\r\n                <div><strong>Usage:</strong> ${usage.total_usage || \"N/A\"}</div>\r\n                <div><strong>Rate Limit:</strong> {usage.rate_limit || \"N/A\"}</div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-gray-500\">No usage data available.</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\TemplateEngine\\TemplateEditor.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\n\r\n// Simple rich text editor (can be replaced with a full-featured editor later)\r\nconst TemplateEditor = ({ value, onChange }) => {\r\n  return (\r\n    <textarea\r\n      className=\"w-full h-64 p-3 border rounded resize-none font-mono text-sm\"\r\n      value={value}\r\n      onChange={e => onChange(e.target.value)}\r\n      placeholder=\"Write your template here... Use {variables} for dynamic fields.\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default TemplateEditor;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\TemplateEngine\\TemplateLibrary.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\TemplateEngine\\TemplatePreview.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\TemplateEngine\\VariableManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\TestAnalytics.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ThemeSamplesSidebarLink.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ToastProvider.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\UpsellBanner.jsx","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":22,"column":56,"nodeType":"BlockStatement","messageId":"unexpected","endLine":22,"endColumn":58,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[807,807],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { useBranding } from \"../branding/theme.jsx\";\r\n\r\nconst HIDE_KEY = \"mcc_hide_upsell\";\r\n\r\nexport default function UpsellBanner() {\r\n  const { theme } = useBranding();\r\n  const [hidden, setHidden] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const flag = (import.meta.env.VITE_UPSELL_ENABLED ?? \"true\").toString().toLowerCase();\r\n    const enabled = flag !== \"false\";\r\n    const dismissed = typeof window !== \"undefined\" && localStorage.getItem(HIDE_KEY) === \"1\";\r\n    // Only show if speedy + enabled + not dismissed\r\n    if (theme === \"speedy\" && enabled && !dismissed) setHidden(false);\r\n    else setHidden(true);\r\n  }, [theme]);\r\n\r\n  if (hidden) return null;\r\n\r\n  const onClose = () => {\r\n    try { localStorage.setItem(HIDE_KEY, \"1\"); } catch {}\r\n    setHidden(true);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"mx-auto max-w-7xl px-4 pt-3\"\r\n      role=\"region\"\r\n      aria-label=\"Upsell notice\"\r\n    >\r\n      <div\r\n        className=\"flex items-center justify-between gap-3 rounded-2xl px-4 py-3 ring-1 text-white\"\r\n        style={{\r\n          background: \"linear-gradient(135deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02))\",\r\n          borderColor: \"rgba(255,255,255,0.15)\"\r\n        }}\r\n      >\r\n        <div className=\"flex items-center gap-2\">\r\n          <span className=\"text-lg\">✨</span>\r\n          <div className=\"text-sm md:text-base\">\r\n            Offer your clients a <span className=\"font-semibold\">white-label, fully branded</span> CRM experience.\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <a\r\n            href=\"/pricing\"\r\n            className=\"rounded-xl px-3 py-1.5 bg-white/90 text-slate-900 text-sm font-medium hover:bg-white\"\r\n          >\r\n            Learn More\r\n          </a>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"rounded-xl px-3 py-1.5 bg-white/10 text-white/80 text-sm hover:bg-white/20\"\r\n            aria-label=\"Dismiss upsell\"\r\n          >\r\n            Dismiss\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\UserActivityTimeline.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\UserAnalyticsChart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\UserManagementPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUsers]","fix":{"range":[978,980],"text":"[fetchUsers]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext.jsx';\r\nimport { UserService } from '../services/userService.js';\r\nimport CreateUserModal from './CreateUserModal.jsx';\r\nimport EditUserModal from './EditUserModal.jsx';\r\nimport UserStatsWidget from './UserStatsWidget.jsx';\r\nimport UserAnalyticsChart from './UserAnalyticsChart.jsx';\r\nimport AdminNotificationCenter from './AdminNotificationCenter.jsx';\r\nimport UserActivityTimeline from './UserActivityTimeline.jsx';\r\n\r\nconst UserManagementPanel = ({ db, auth, darkMode }) => {\r\n  const [users, setUsers] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [showCreate, setShowCreate] = useState(false);\r\n  const [showEdit, setShowEdit] = useState(false);\r\n  const [stats, setStats] = useState(null);\r\n  const [search, setSearch] = useState('');\r\n  const userService = new UserService(db, auth);\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const fetchUsers = async () => {\r\n    const allUsers = await userService.getUsers();\r\n    setUsers(allUsers);\r\n    setStats({\r\n      totalUsers: allUsers.length,\r\n      admins: allUsers.filter(u => u.role === 'admin' || u.role === 'master').length,\r\n      activeUsers: allUsers.filter(u => u.status === 'active').length,\r\n      pendingInvites: allUsers.filter(u => u.status === 'pending').length,\r\n    });\r\n  };\r\n\r\n  const handleCreate = async (form) => {\r\n    await userService.createUser(form, 'admin');\r\n    setShowCreate(false);\r\n    fetchUsers();\r\n  };\r\n\r\n  const handleEdit = async (form) => {\r\n    await userService.updateUserProfile(form.uid, form);\r\n    setShowEdit(false);\r\n    fetchUsers();\r\n  };\r\n\r\n  const filteredUsers = users.filter(u =>\r\n    u.email.toLowerCase().includes(search.toLowerCase()) ||\r\n    u.displayName.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className={`p-8 rounded-2xl shadow-2xl ${darkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'} w-full max-w-5xl mx-auto`}>\r\n      <h2 className=\"text-2xl font-bold mb-6\">User Management</h2>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\r\n        <UserStatsWidget stats={stats} darkMode={darkMode} />\r\n        <AdminNotificationCenter darkMode={darkMode} />\r\n      </div>\r\n      <div className=\"mb-8\">\r\n        <UserAnalyticsChart data={users.map(u => ({\r\n          date: u.createdAt ? new Date(u.createdAt).toLocaleDateString() : 'N/A',\r\n          totalUsers: stats?.totalUsers || 0,\r\n          activeUsers: stats?.activeUsers || 0,\r\n          admins: stats?.admins || 0,\r\n        }))} darkMode={darkMode} />\r\n      </div>\r\n      <div className=\"mb-8\">\r\n        <UserActivityTimeline darkMode={darkMode} />\r\n      </div>\r\n      <div className=\"flex justify-between items-center mt-8 mb-4\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search users...\"\r\n          value={search}\r\n          onChange={e => setSearch(e.target.value)}\r\n          className=\"px-3 py-2 rounded border w-64\"\r\n        />\r\n        <button\r\n          className=\"bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700\"\r\n          onClick={() => setShowCreate(true)}\r\n        >\r\n          + Add User\r\n        </button>\r\n      </div>\r\n      <div className=\"overflow-x-auto rounded-xl shadow-lg\">\r\n        <table className=\"min-w-full bg-transparent\">\r\n          <thead>\r\n            <tr className=\"bg-gradient-to-r from-blue-500 to-green-500 text-white\">\r\n              <th className=\"px-4 py-2 text-left\">Email</th>\r\n              <th className=\"px-4 py-2 text-left\">Display Name</th>\r\n              <th className=\"px-4 py-2 text-left\">Role</th>\r\n              <th className=\"px-4 py-2 text-left\">Status</th>\r\n              <th className=\"px-4 py-2 text-left\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filteredUsers.map(user => (\r\n              <tr key={user.uid} className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                <td className=\"px-4 py-2\">{user.email}</td>\r\n                <td className=\"px-4 py-2\">{user.displayName}</td>\r\n                <td className=\"px-4 py-2\">\r\n                  <span className={`px-2 py-1 rounded text-xs font-bold ${user.role === 'master' ? 'bg-purple-600 text-white' : user.role === 'admin' ? 'bg-green-600 text-white' : 'bg-gray-400 text-white'}`}>{user.role}</span>\r\n                </td>\r\n                <td className=\"px-4 py-2\">{user.status}</td>\r\n                <td className=\"px-4 py-2\">\r\n                  <button className=\"bg-green-600 text-white px-3 py-1 rounded shadow hover:bg-green-700 mr-2\" onClick={() => { setSelectedUser(user); setShowEdit(true); }}>Edit</button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <CreateUserModal isOpen={showCreate} onClose={() => setShowCreate(false)} onCreate={handleCreate} darkMode={darkMode} />\r\n      <EditUserModal isOpen={showEdit} onClose={() => setShowEdit(false)} user={selectedUser} onUpdate={handleEdit} darkMode={darkMode} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagementPanel;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\UserRoleManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\UserStatsWidget.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\WidgetPermissionsManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\admin\\AdminDashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\admin\\FeatureManagement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\admin\\RoleManagement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\admin\\UserManagement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\ACHAuthorization.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\AISampleAddendumFlow.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\AddendumACH.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\AddendumFullExtension.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\AddendumItemOnly.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\AddendumPOA.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\AdminAddendumFlow.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\FullAgreement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\InformationSheet.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\agreements\\PowerOfAttorney.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\disputes\\ActiveDisputes.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'PropTypes' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'setSortDir' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { subscribeToDisputes, updateDispute, getStatusOptions, exportDisputeReports } from '../../services/disputeService';\r\nimport { disputeStatusColors } from '../../utils/disputeUtils';\r\n\r\nconst PAGE_SIZE = 10;\r\n\r\nexport default function ActiveDisputes() {\r\n  const [disputes, setDisputes] = useState([]);\r\n  const [filtered, setFiltered] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [sortBy, setSortBy] = useState('dateCreated');\r\n  const [sortDir, setSortDir] = useState('desc');\r\n  const [page, setPage] = useState(1);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [selected, setSelected] = useState([]);\r\n  const [bulkStatus, setBulkStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const unsubscribe = subscribeToDisputes(\r\n      data => {\r\n        setDisputes(data.filter(d => d.status !== 'Resolved'));\r\n        setLoading(false);\r\n      },\r\n      err => {\r\n        setError(err.message || 'Failed to load disputes');\r\n        setLoading(false);\r\n      }\r\n    );\r\n    return () => unsubscribe && unsubscribe();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let result = disputes.filter(d =>\r\n      d.clientName.toLowerCase().includes(search.toLowerCase()) ||\r\n      d.bureau.toLowerCase().includes(search.toLowerCase()) ||\r\n      d.status.toLowerCase().includes(search.toLowerCase())\r\n    );\r\n    result = result.sort((a, b) => {\r\n      if (sortDir === 'asc') {\r\n        return a[sortBy] > b[sortBy] ? 1 : -1;\r\n      } else {\r\n        return a[sortBy] < b[sortBy] ? 1 : -1;\r\n      }\r\n    });\r\n    setFiltered(result);\r\n    setPage(1);\r\n  }, [disputes, search, sortBy, sortDir]);\r\n\r\n  const paginated = filtered.slice((page - 1) * PAGE_SIZE, page * PAGE_SIZE);\r\n  const totalPages = Math.ceil(filtered.length / PAGE_SIZE);\r\n\r\n  const handleStatusChange = async (id, status) => {\r\n    try {\r\n      await updateDispute(id, { status });\r\n    } catch (err) {\r\n      setError('Failed to update status');\r\n    }\r\n  };\r\n\r\n  const handleBulkStatusUpdate = async () => {\r\n    for (const id of selected) {\r\n      await handleStatusChange(id, bulkStatus);\r\n    }\r\n    setBulkStatus('');\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleExport = async () => {\r\n    try {\r\n      await exportDisputeReports(disputes.filter(d => selected.includes(d.id)));\r\n      alert('Exported selected disputes!');\r\n    } catch (err) {\r\n      setError('Failed to export disputes');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto py-8 px-4\">\r\n      <h2 className=\"text-2xl font-bold mb-6\">Active Disputes</h2>\r\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-2\">\r\n        <input\r\n          type=\"text\"\r\n          value={search}\r\n          onChange={e => setSearch(e.target.value)}\r\n          placeholder=\"Search by client, bureau, or status...\"\r\n          className=\"border px-3 py-2 rounded w-full md:w-1/3\"\r\n        />\r\n        <div className=\"flex gap-2\">\r\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700 font-semibold\" onClick={handleExport} disabled={selected.length === 0}>\r\n            Export Selected\r\n          </button>\r\n          <select value={bulkStatus} onChange={e => setBulkStatus(e.target.value)} className=\"border px-2 py-1 rounded\">\r\n            <option value=\"\">Bulk Status Update</option>\r\n            {getStatusOptions().map(s => <option key={s} value={s}>{s}</option>)}\r\n          </select>\r\n          <button className=\"bg-green-600 text-white px-4 py-2 rounded shadow hover:bg-green-700 font-semibold\" onClick={handleBulkStatusUpdate} disabled={!bulkStatus || selected.length === 0}>\r\n            Update Selected\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {loading ? (\r\n        <div className=\"animate-pulse bg-gray-100 rounded h-32 w-full mb-4\" />\r\n      ) : error ? (\r\n        <div className=\"text-red-500 font-semibold mb-4\">{error}</div>\r\n      ) : (\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full bg-white rounded shadow\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"py-2 px-4 text-left\"><input type=\"checkbox\" checked={selected.length === paginated.length && paginated.length > 0} onChange={e => setSelected(e.target.checked ? paginated.map(d => d.id) : [])} /></th>\r\n                <th className=\"py-2 px-4 text-left cursor-pointer\" onClick={() => setSortBy('clientName')}>Client Name</th>\r\n                <th className=\"py-2 px-4 text-left cursor-pointer\" onClick={() => setSortBy('bureau')}>Bureau</th>\r\n                <th className=\"py-2 px-4 text-left cursor-pointer\" onClick={() => setSortBy('disputeType')}>Dispute Type</th>\r\n                <th className=\"py-2 px-4 text-left cursor-pointer\" onClick={() => setSortBy('status')}>Status</th>\r\n                <th className=\"py-2 px-4 text-left cursor-pointer\" onClick={() => setSortBy('dateCreated')}>Date Created</th>\r\n                <th className=\"py-2 px-4 text-left cursor-pointer\" onClick={() => setSortBy('priority')}>Priority</th>\r\n                <th className=\"py-2 px-4 text-left\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {paginated.map(dispute => (\r\n                <tr key={dispute.id} className=\"border-b\">\r\n                  <td className=\"py-2 px-4\"><input type=\"checkbox\" checked={selected.includes(dispute.id)} onChange={e => setSelected(e.target.checked ? [...selected, dispute.id] : selected.filter(id => id !== dispute.id))} /></td>\r\n                  <td className=\"py-2 px-4 font-semibold\">{dispute.clientName}</td>\r\n                  <td className=\"py-2 px-4\">{dispute.bureau}</td>\r\n                  <td className=\"py-2 px-4\">{dispute.disputeType}</td>\r\n                  <td className={`py-2 px-4`}><span className={`px-2 py-1 rounded text-xs font-bold ${disputeStatusColors[dispute.status] || 'bg-gray-100 text-gray-700'}`}>{dispute.status}</span></td>\r\n                  <td className=\"py-2 px-4\">{new Date(dispute.dateCreated).toLocaleDateString()}</td>\r\n                  <td className=\"py-2 px-4\">\r\n                    <span className={`px-2 py-1 rounded text-xs font-bold ${dispute.priority === 'High' ? 'bg-red-100 text-red-700' : dispute.priority === 'Medium' ? 'bg-yellow-100 text-yellow-700' : 'bg-green-100 text-green-700'}`}>{dispute.priority}</span>\r\n                  </td>\r\n                  <td className=\"py-2 px-4 flex gap-2\">\r\n                    <button className=\"bg-blue-500 text-white px-2 py-1 rounded text-xs hover:bg-blue-600\" onClick={() => alert('View Details')}>View</button>\r\n                    <button className=\"bg-yellow-500 text-white px-2 py-1 rounded text-xs hover:bg-yellow-600\" onClick={() => alert('Edit')}>Edit</button>\r\n                    <button className=\"bg-purple-500 text-white px-2 py-1 rounded text-xs hover:bg-purple-600\" onClick={() => alert('Send Letter')}>Send Letter</button>\r\n                    <button className=\"bg-green-500 text-white px-2 py-1 rounded text-xs hover:bg-green-600\" onClick={() => handleStatusChange(dispute.id, 'Resolved')}>Mark Complete</button>\r\n                    <select value={dispute.status} onChange={e => handleStatusChange(dispute.id, e.target.value)} className=\"border px-2 py-1 rounded text-xs\">\r\n                      {getStatusOptions().map(s => <option key={s} value={s}>{s}</option>)}\r\n                    </select>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      {/* Pagination */}\r\n      {totalPages > 1 && (\r\n        <div className=\"flex justify-center items-center gap-2 mt-6\">\r\n          <button className=\"px-3 py-1 rounded bg-gray-200\" disabled={page === 1} onClick={() => setPage(page - 1)}>Prev</button>\r\n          <span className=\"font-semibold\">Page {page} of {totalPages}</span>\r\n          <button className=\"px-3 py-1 rounded bg-gray-200\" disabled={page === totalPages} onClick={() => setPage(page + 1)}>Next</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nActiveDisputes.propTypes = {\r\n  // No props for now, but ready for future extension\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\disputes\\CreateDisputeForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\layout\\TopNav.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\skin\\SkinSwitcher.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ui\\Modal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ui\\Widget.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'color' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":5,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport FeatureTutorial from '../FeatureTutorial';\r\nimport { usePermission } from '../../usePermission';\r\n\r\nconst Widget = ({ title, value, icon, color = \"card\", loading }) => {\r\n  const hasPermission = usePermission('widget_leads');\r\n  return (\r\n    <div className=\"card flex items-center p-4 min-w-[180px] text-blue-700 font-bold\">\r\n      {icon && <div className=\"mr-4 text-3xl text-brand-primary\">{icon}</div>}\r\n      <div>\r\n        <div className=\"text-lg font-bold text-brand-primary\">{title}</div>\r\n        <div className=\"text-2xl font-bold text-brand-secondary\">{loading ? \"...\" : value}</div>\r\n      </div>\r\n      {hasPermission && (\r\n        <FeatureTutorial\r\n          featureId=\"widget_leads\"\r\n          steps={[\r\n            { title: \"Total Leads Widget\", content: \"This widget shows the total number of leads in your CRM. You can click for more details or filter by date.\" },\r\n          ]}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Widget;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ui\\button.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ui\\card.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\components\\ui\\loader.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\config\\appConfig.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\config\\firebase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\contexts\\AuthContext.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\contexts\\NotificationContext.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\data\\demoData.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\data\\testDisputeData.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\dev\\beacon.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":6,"column":44,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/dev/beacon.tsx\r\nimport React from \"react\";\r\n\r\nconst DEV_BEACONS = import.meta.env.VITE_DEV_BEACONS === 'true';\r\n\r\nexport default function DevBeacon({ label }: { label: string }) {\r\n  if (!DEV_BEACONS) return null;\r\n  return (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      zIndex: 9999,\r\n      background: '#fbbf24',\r\n      color: '#1f2937',\r\n      fontSize: 12,\r\n      fontWeight: 'bold',\r\n      padding: '2px 8px',\r\n      borderBottomRightRadius: 8,\r\n      boxShadow: '0 2px 8px #0002',\r\n    }}>\r\n      {label}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\domainPortalConfig.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\features.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\features\\CustomerIntake.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\features\\EmailSystem.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\firebaseConfig.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\hooks\\useFirestore.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'options.orderByField', 'options.orderDirection', 'options.realtime', and 'options.whereConditions'. Either include them or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [collectionName, options.orderByField, options.orderDirection, options.realtime, options.whereConditions]","fix":{"range":[1531,1572],"text":"[collectionName, options.orderByField, options.orderDirection, options.realtime, options.whereConditions]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":45,"column":23,"nodeType":"CallExpression","endLine":45,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useCallback } from \"react\";\r\nimport { collection, query, where, orderBy, onSnapshot, addDoc, getDocs } from \"firebase/firestore\";\r\nimport { db } from \"../lib/firebase\";\r\n\r\nexport function useFirestore(collectionName, options = {}) {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchData = useCallback(() => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      let ref = collection(db, collectionName);\r\n      let q = ref;\r\n      if (options.whereConditions) {\r\n        options.whereConditions.forEach(cond => {\r\n          q = query(q, where(cond.field, cond.operator, cond.value));\r\n        });\r\n      }\r\n      if (options.orderByField) {\r\n        q = query(q, orderBy(options.orderByField, options.orderDirection || \"asc\"));\r\n      }\r\n      if (options.realtime) {\r\n        return onSnapshot(q, (snapshot) => {\r\n          setData(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n          setLoading(false);\r\n        }, (err) => {\r\n          setError(err.message);\r\n          setLoading(false);\r\n        });\r\n      } else {\r\n        getDocs(q).then(snapshot => {\r\n          setData(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n          setLoading(false);\r\n        }).catch(err => {\r\n          setError(err.message);\r\n          setLoading(false);\r\n        });\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setLoading(false);\r\n    }\r\n  }, [collectionName, JSON.stringify(options)]);\r\n\r\n  useEffect(() => {\r\n    let unsub;\r\n    if (options.realtime) {\r\n      unsub = fetchData();\r\n      return () => unsub && unsub();\r\n    } else {\r\n      fetchData();\r\n    }\r\n  }, [fetchData, options.realtime]);\r\n\r\n  const add = async (doc) => {\r\n    try {\r\n      await addDoc(collection(db, collectionName), {\r\n        ...doc,\r\n        createdAt: new Date()\r\n      });\r\n      if (!options.realtime) fetchData();\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  return { data, loading, error, add };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\hooks\\useRealtimeLeads.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\r\nimport { db } from \"@/lib/firebase\";\r\nimport { collection, query, where, orderBy, onSnapshot } from 'firebase/firestore';\r\n\r\nexport default function useRealtimeLeads() {\r\n  const [hotLeads, setHotLeads] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError('');\r\n    const callsRef = collection(db, 'aiReceptionistCalls');\r\n    const q = query(callsRef, where('leadScore', '>=', 8), orderBy('processedAt', 'desc'));\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      const leads = [];\r\n      snapshot.forEach(doc => {\r\n        leads.push({ id: doc.id, ...doc.data() });\r\n      });\r\n      setHotLeads(leads);\r\n      setLoading(false);\r\n    }, (err) => {\r\n      setError('Error loading hot leads');\r\n      setLoading(false);\r\n    });\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  return { hotLeads, loading, error };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\hooks\\useUserManagement.js","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":35,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":42,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":48,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":54,"endColumn":6},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUsers, isMasterAdmin]","fix":{"range":[1961,1976],"text":"[fetchUsers, isMasterAdmin]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useAuth } from '@/authContext';\r\nimport { collection, getDocs, doc, updateDoc, deleteDoc } from 'firebase/firestore';\r\nimport { db } from \"@/lib/firebase\";\r\n\r\nexport const useUserManagement = () => {\r\n  const { isMasterAdmin, user } = useAuth();\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch all users (admin only)\r\n  const fetchUsers = async () => {\r\n    if (!isMasterAdmin()) {\r\n      setError('Access denied: Admin privileges required');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const usersRef = collection(db, 'users');\r\n      const snapshot = await getDocs(usersRef);\r\n      const usersList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      setUsers(usersList);\r\n    } catch (err) {\r\n      setError('Failed to fetch users');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update user role/permissions\r\n  const updateUser = async (userId, updates) => {\r\n    if (!isMasterAdmin()) throw new Error('Access denied');\r\n    try {\r\n      const userRef = doc(db, 'users', userId);\r\n      await updateDoc(userRef, { ...updates, updatedAt: new Date().toISOString(), updatedBy: user?.uid });\r\n      await fetchUsers();\r\n      return true;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Delete user\r\n  const deleteUser = async (userId) => {\r\n    if (!isMasterAdmin()) throw new Error('Access denied');\r\n    try {\r\n      await deleteDoc(doc(db, 'users', userId));\r\n      await fetchUsers();\r\n      return true;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Disable/Enable user\r\n  const toggleUserStatus = async (userId, status) => {\r\n    return updateUser(userId, { status, role: status === 'disabled' ? 'disabled' : 'user' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isMasterAdmin()) fetchUsers();\r\n  }, [isMasterAdmin]);\r\n\r\n  return { users, loading, error, fetchUsers, updateUser, deleteUser, toggleUserStatus };\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\layout\\AuthenticatedLayout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\layout\\DashboardLayout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\layout\\ProtectedLayout.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { NavLink, Outlet } from \"react-router-dom\";\r\nimport { useAuth } from \"@/auth/AuthProvider\";\r\nimport { navItems } from \"@/layout/navConfig\";\r\nimport BrandLogo from \"@/components/BrandLogo\";\r\nimport { useTheme } from '@/theme/ThemeProvider';\r\n\r\n// --- ON-SCREEN BEACON ---\r\nconst Beacon = () => (\r\n  <div style={{background:'#fee2e2',color:'#b91c1c',padding:'4px 0',textAlign:'center',fontWeight:'bold',letterSpacing:1,marginBottom:12,zIndex:9999}}>\r\n    [BEACON: ProtectedLayout.jsx]\r\n  </div>\r\n);\r\n\r\nexport default function ProtectedLayout() {\r\n  const { user } = useAuth();\r\n  const { theme, setTheme } = useTheme();\r\n\r\n  const linkClass = ({ isActive }) =>\r\n    `flex items-center gap-2 px-3 py-2 rounded-lg transition\r\n     ${isActive ? \"bg-blue-600 text-white\" : \"text-gray-700 hover:bg-gray-100\"}`;\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 text-gray-900\">\r\n      {import.meta.env.DEV && <Beacon />}\r\n      <div className=\"grid grid-cols-[240px_1fr]\">\r\n        {/* Sidebar */}\r\n        <aside className=\"h-screen sticky top-0 bg-white border-r p-4 space-y-4 overflow-y-auto\">\r\n          <BrandLogo variant=\"admin\" theme={theme === 'dark' ? 'dark' : 'light'} style={{height:40}} />\r\n          <nav className=\"space-y-1\">\r\n            {navItems.map(({ label, to, icon: Icon }) => (\r\n              <NavLink key={to} to={to} className={linkClass} end={to === \"/dashboard\"}>\r\n                {Icon ? <Icon className=\"h-5 w-5\" /> : null}\r\n                <span>{label}</span>\r\n              </NavLink>\r\n            ))}\r\n            {/* keep logout visible */}\r\n            <NavLink to=\"/logout\" className={linkClass}>Logout</NavLink>\r\n          </nav>\r\n        </aside>\r\n\r\n        {/* Main area */}\r\n        <main className=\"min-h-screen\">\r\n          {/* Top bar */}\r\n          <header className=\"bg-white border-b px-6 py-3 flex items-center justify-between\">\r\n            <div className=\"font-semibold\">Speedy Credit Repair CRM</div>\r\n            <div className=\"flex items-center text-sm opacity-80\">\r\n              {user?.email ?? \"Signed in\"}\r\n              <button\r\n                className=\"ml-4 px-3 py-2 rounded bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200\"\r\n                onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\r\n                aria-label=\"Toggle theme\"\r\n              >\r\n                {theme === 'dark' ? '🌙' : '☀️'}\r\n              </button>\r\n            </div>\r\n          </header>\r\n\r\n          <div className=\"p-6\">\r\n            <Outlet />\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\layout\\Sidebar.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'SmartBadge' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":176,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'ProgressRing' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":206,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":206,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'stats' is defined but never used. Allowed unused args must match /^_/u.","line":303,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":303,"endColumn":49},{"ruleId":"no-unused-vars","severity":1,"message":"'location' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":452,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":452,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'isAuthenticated' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":455,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":455,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'isMasterAdmin' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":455,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":455,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'getUserRole' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":455,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":455,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'signOut' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":456,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":456,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setIsCollapsed'. Either include it or remove the dependency array.","line":479,"column":6,"nodeType":"ArrayExpression","endLine":479,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [filteredItems, navigate, setIsCollapsed]","fix":{"range":[15158,15183],"text":"[filteredItems, navigate, setIsCollapsed]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { User, LogOut, Shield ,\r\n  LayoutDashboard,\r\n  Users,\r\n  UserPlus,\r\n  FileText,\r\n  Settings,\r\n  TrendingUp,\r\n  AlertTriangle,\r\n  Activity,\r\n  BookOpen,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  Star,\r\n  Calendar,\r\n  Bell,\r\n  Search,\r\n  Plus,\r\n  Eye,\r\n  X\r\n} from 'lucide-react';\r\n// import { useAuth } from '../authContext';\r\n// import { usePermission } from '../usePermission';\r\nimport { usePermission } from '../usePermission';\r\nimport { useAuth } from '../authContext';\r\n// ...existing code...\r\n// Sidebar user section for authentication UI\r\nconst SidebarUserSection = () => {\r\n  const { user, userProfile, signOut } = useAuth();\r\n  const { isAuthenticated, isMasterAdmin } = usePermission();\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className=\"p-4 border-t border-slate-700\">\r\n        <div className=\"text-center text-sm text-slate-400\">Not authenticated</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleSignOut = async () => {\r\n    if (confirm('Are you sure you want to sign out?')) {\r\n      try {\r\n        await signOut();\r\n      } catch (error) {\r\n        console.error('Logout failed:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 border-t border-slate-700\">\r\n      <div className=\"flex items-center space-x-3 mb-3\">\r\n        <div className=\"w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center\">\r\n          <User size={18} className=\"text-white\" />\r\n        </div>\r\n        <div className=\"flex-1 min-w-0\">\r\n          <p className=\"text-sm font-medium text-white truncate\">{user?.email}</p>\r\n          <p className=\"text-xs text-slate-400 flex items-center\">\r\n            {isMasterAdmin && <Shield size={12} className=\"mr-1\" />}\r\n            {isMasterAdmin ? 'Master Admin' : userProfile?.role || 'User'}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <button\r\n        onClick={handleSignOut}\r\n        className=\"w-full flex items-center justify-center space-x-2 px-3 py-2 text-sm text-slate-300 hover:text-white hover:bg-slate-700 rounded transition-colors\"\r\n      >\r\n        <LogOut size={16} />\r\n        <span>Sign Out</span>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n// src/layout/Sidebar.jsx\r\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\r\n// import { usePermission } from '../usePermission';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\n// import { useAuth } from '../authContext';\r\n\r\n// Persistent state hook\r\nconst usePersistentState = (key, defaultValue) => {\r\n  const [state, setState] = useState(() => {\r\n    try {\r\n      const saved = localStorage.getItem(key);\r\n      return saved ? JSON.parse(saved) : defaultValue;\r\n    } catch {\r\n      return defaultValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(key, JSON.stringify(state));\r\n    } catch (error) {\r\n      console.warn('Failed to save to localStorage:', error);\r\n    }\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n};\r\n\r\n// Real-time stats hook\r\nconst useRealTimeStats = () => {\r\n  const [stats, setStats] = useState({\r\n    activeClients: 24,\r\n    pendingClients: 6,\r\n    archivedClients: 12,\r\n    hotLeads: 3,\r\n    warmLeads: 5,\r\n    followupLeads: 2,\r\n    disputesWon: 156,\r\n    monthlyGrowth: 18,\r\n    urgentDisputes: 3,\r\n    totalNotifications: 5\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchStats = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call - replace with your actual endpoint\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setStats(prev => ({\r\n        ...prev,\r\n        activeClients: Math.floor(Math.random() * 10) + 20,\r\n        urgentDisputes: Math.floor(Math.random() * 5) + 1\r\n      }));\r\n    } catch (error) {\r\n      console.warn('Failed to fetch stats:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchStats();\r\n    const interval = setInterval(fetchStats, 30000);\r\n    return () => clearInterval(interval);\r\n  }, [fetchStats]);\r\n\r\n  return { stats, loading, refetch: fetchStats };\r\n};\r\n\r\n// Mobile detection hook\r\nconst useMobileDetection = () => {\r\n  const [isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => setIsMobile(window.innerWidth < 768);\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    return () => window.removeEventListener('resize', checkMobile);\r\n  }, []);\r\n\r\n  return isMobile;\r\n};\r\n\r\n// Fuzzy search hook\r\nconst useFuzzySearch = (items, searchTerm) => {\r\n  return useMemo(() => {\r\n    if (!searchTerm.trim()) return items;\r\n    const searchLower = searchTerm.toLowerCase();\r\n    return items.filter(item => {\r\n      const mainMatch = item.label.toLowerCase().includes(searchLower) ||\r\n                       item.description.toLowerCase().includes(searchLower);\r\n      const submenuMatch = item.submenu?.some(sub => \r\n        sub.label.toLowerCase().includes(searchLower)\r\n      );\r\n      return mainMatch || submenuMatch;\r\n    });\r\n  }, [items, searchTerm]);\r\n};\r\n\r\n// Smart Badge Component\r\nconst SmartBadge = ({ type, count, animate = false }) => {\r\n  const getBadgeConfig = () => {\r\n    const configs = {\r\n      count: {\r\n        className: 'bg-blue-500 text-white',\r\n        text: count > 99 ? '99+' : count?.toString() || '0'\r\n      },\r\n      urgent: {\r\n        className: `bg-red-500 text-white ${animate ? 'animate-pulse' : ''}`,\r\n        text: 'URGENT'\r\n      },\r\n      new: {\r\n        className: 'bg-green-500 text-white',\r\n        text: 'NEW'\r\n      }\r\n    };\r\n    return configs[type] || configs.count;\r\n  };\r\n\r\n  if (type === 'count' && (!count || count === 0)) return null;\r\n\r\n  const config = getBadgeConfig();\r\n  return (\r\n    <span className={`px-2 py-1 text-xs rounded-full font-medium ${config.className}`}>\r\n      {config.text}\r\n    </span>\r\n  );\r\n};\r\n\r\n// Progress Ring Component\r\nconst ProgressRing = ({ progress, size = 40, strokeWidth = 3 }) => {\r\n  const radius = (size - strokeWidth) / 2;\r\n  const circumference = radius * 2 * Math.PI;\r\n  const strokeDasharray = `${(progress * circumference) / 100} ${circumference}`;\r\n  return (\r\n    <div className=\"relative\">\r\n      <svg width={size} height={size} className=\"transform -rotate-90\">\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius}\r\n          stroke=\"currentColor\"\r\n          strokeWidth={strokeWidth}\r\n          fill=\"transparent\"\r\n          className=\"text-slate-600\"\r\n        />\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius}\r\n          stroke=\"currentColor\"\r\n          strokeWidth={strokeWidth}\r\n          fill=\"transparent\"\r\n          strokeDasharray={strokeDasharray}\r\n          className=\"text-blue-400 transition-all duration-300\"\r\n          strokeLinecap=\"round\"\r\n        />\r\n      </svg>\r\n      <div className=\"absolute inset-0 flex items-center justify-center\">\r\n        <span className=\"text-xs font-medium\">{Math.round(progress)}%</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Search Bar Component\r\nconst SearchBar = ({ isCollapsed, onSearch }) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  useEffect(() => {\r\n    onSearch(searchTerm);\r\n  }, [searchTerm, onSearch]);\r\n  if (isCollapsed) return null;\r\n  return (\r\n    <div className=\"p-4 border-b border-slate-700\">\r\n      <div className=\"relative\">\r\n        <input\r\n          id=\"sidebar-search\"\r\n          type=\"text\"\r\n          placeholder=\"Search navigation...\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          className=\"w-full px-3 py-2 pl-8 bg-slate-800 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 transition-colors\"\r\n        />\r\n        <Search className=\"absolute left-2 top-2.5 w-4 h-4 text-slate-400\" />\r\n        {searchTerm && (\r\n          <button\r\n            onClick={() => setSearchTerm('')}\r\n            className=\"absolute right-2 top-2.5 text-slate-400 hover:text-white\"\r\n          >\r\n            <X className=\"w-4 h-4\" />\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Quick Actions Component\r\nconst QuickActions = ({ item, navigate, isCollapsed }) => {\r\n  if (!item.quickActions || isCollapsed) return null;\r\n  const iconMap = { Plus, Search, AlertTriangle, Eye };\r\n  return (\r\n    <div className=\"opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex space-x-1\">\r\n      {item.quickActions.map((action, i) => {\r\n        const IconComponent = iconMap[action.icon];\r\n        return (\r\n          <button\r\n            key={i}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              if (action.path) navigate(action.path);\r\n              else if (action.action === 'search') {\r\n                document.getElementById('sidebar-search')?.focus();\r\n              }\r\n            }}\r\n            className=\"p-1 hover:bg-slate-600 rounded text-slate-400 hover:text-white transition-colors\"\r\n            title={action.label}\r\n          >\r\n            {IconComponent && <IconComponent size={12} />}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Notification Center Component\r\nconst NotificationCenter = ({ isCollapsed, stats }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  // Mock notifications - replace with real data\r\n  const notifications = [\r\n    { id: 1, title: 'New Client Added', message: 'John Doe has been added to your client list', read: false },\r\n    { id: 2, title: 'Dispute Update', message: 'Credit report dispute for Jane Smith has been resolved', read: true }\r\n  ];\r\n  const unreadCount = notifications.filter(n => !n.read).length;\r\n  return (\r\n    <div className=\"relative\">\r\n      <button\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className=\"flex items-center space-x-2 w-full text-left hover:bg-slate-700 p-2 rounded transition-colors\"\r\n      >\r\n        <div className=\"relative\">\r\n          <Bell size={16} />\r\n          {unreadCount > 0 && (\r\n            <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center\">\r\n              {unreadCount > 9 ? '9+' : unreadCount}\r\n            </span>\r\n          )}\r\n        </div>\r\n        {!isCollapsed && <span>Notifications</span>}\r\n      </button>\r\n      {isOpen && !isCollapsed && (\r\n        <div className=\"absolute top-full left-0 right-0 bg-slate-800 border border-slate-600 rounded-lg shadow-lg z-50 max-h-64 overflow-y-auto\">\r\n          {notifications.length === 0 ? (\r\n            <div className=\"p-4 text-slate-400 text-center\">No notifications</div>\r\n          ) : (\r\n            notifications.map(notification => (\r\n              <div\r\n                key={notification.id}\r\n                className={`p-3 border-b border-slate-700 last:border-b-0 hover:bg-slate-700 cursor-pointer ${!notification.read ? 'bg-slate-750' : ''}`}\r\n              >\r\n                <div className=\"text-sm font-medium\">{notification.title}</div>\r\n                <div className=\"text-xs text-slate-400 mt-1\">{notification.message}</div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Sidebar Navigation Items\r\nconst navigationItems = [\r\n  {\r\n    id: 'dashboard',\r\n    label: 'Dashboard',\r\n    icon: LayoutDashboard,\r\n    path: '/dashboard',\r\n    description: 'Overview & Analytics'\r\n  },\r\n  {\r\n    id: 'clients',\r\n    label: 'Clients',\r\n    icon: Users,\r\n    path: '/clients',\r\n    badge: '24',\r\n    description: 'Manage Client Accounts',\r\n    submenu: [\r\n      { label: 'Active Clients', path: '/clients/active', count: 18 },\r\n      { label: 'Pending', path: '/clients/pending', count: 6 },\r\n      { label: 'Archived', path: '/clients/archived', count: 12 }\r\n    ],\r\n    quickActions: [\r\n      { icon: 'Plus', label: 'Add Client', path: '/clients/new' },\r\n      { icon: 'Search', label: 'Search Clients', action: 'search' }\r\n    ]\r\n  },\r\n  {\r\n    id: 'leads',\r\n    label: 'Leads',\r\n    icon: UserPlus,\r\n    path: '/leads',\r\n    badge: '8',\r\n    description: 'New Lead Management',\r\n    submenu: [\r\n      { label: 'Hot Leads', path: '/leads/hot', count: 3 },\r\n      { label: 'Warm Leads', path: '/leads/warm', count: 5 },\r\n      { label: 'Follow Up', path: '/leads/followup', count: 2 }\r\n    ]\r\n  },\r\n  {\r\n    id: 'progress',\r\n    label: 'Progress Portal',\r\n    icon: TrendingUp,\r\n    path: '/progress',\r\n    description: 'Client Progress Tracking'\r\n  },\r\n  {\r\n    id: 'disputes',\r\n    label: 'Dispute Center',\r\n    icon: AlertTriangle,\r\n    path: '/disputes',\r\n    badge: 'URGENT',\r\n    badgeColor: 'bg-red-500',\r\n    description: 'Active Disputes & Challenges',\r\n    quickActions: [\r\n      { icon: 'AlertTriangle', label: 'New Dispute', path: '/disputes/new' },\r\n      { icon: 'Eye', label: 'Urgent Items', path: '/disputes?filter=urgent' }\r\n    ]\r\n  },\r\n  {\r\n    id: 'reports',\r\n    label: 'Reports',\r\n    icon: FileText,\r\n    path: '/reports',\r\n    description: 'Analytics & Insights',\r\n    submenu: [\r\n      { label: 'Monthly Reports', path: '/reports/monthly' },\r\n      { label: 'Client Progress', path: '/reports/progress' },\r\n      { label: 'Financial Reports', path: '/reports/financial' }\r\n    ]\r\n  },\r\n  {\r\n    id: 'activity',\r\n    label: 'Activity Log',\r\n    icon: Activity,\r\n    path: '/activity',\r\n    description: 'System Activity & Updates'\r\n  },\r\n  {\r\n    id: 'features',\r\n    label: 'Features & Tutorials',\r\n    icon: BookOpen,\r\n    path: '/features',\r\n    badge: 'NEW',\r\n    badgeColor: 'bg-green-500',\r\n    description: 'Learn & Discover'\r\n  },\r\n  {\r\n    id: 'settings',\r\n    label: 'Settings',\r\n    icon: Settings,\r\n    path: '/settings',\r\n    description: 'App Configuration'\r\n  }\r\n];\r\n\r\n// Sidebar Component\r\nconst Sidebar = () => {\r\n  const [isCollapsed, setIsCollapsed] = usePersistentState('sidebarCollapsed', false);\r\n  const [activeSubmenu, setActiveSubmenu] = useState(null);\r\n  const [activeItem, setActiveItem] = useState('dashboard');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const { stats } = useRealTimeStats();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const isMobile = useMobileDetection();\r\n  const filteredItems = useFuzzySearch(navigationItems, searchTerm);\r\n  const { hasFeatureAccess, isAuthenticated, isMasterAdmin, getUserRole } = usePermission();\r\n  const { signOut } = useAuth();\r\n\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeydown = (e) => {\r\n      if (e.altKey && e.key >= '1' && e.key <= '9') {\r\n        e.preventDefault();\r\n        const index = parseInt(e.key) - 1;\r\n        if (filteredItems[index]) {\r\n          navigate(filteredItems[index].path);\r\n        }\r\n      }\r\n      if (e.altKey && e.key.toLowerCase() === 's') {\r\n        e.preventDefault();\r\n        setIsCollapsed((prev) => !prev);\r\n      }\r\n      if (e.altKey && e.key === '/') {\r\n        e.preventDefault();\r\n        document.getElementById('sidebar-search')?.focus();\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleKeydown);\r\n    return () => window.removeEventListener('keydown', handleKeydown);\r\n  }, [filteredItems, navigate]);\r\n\r\n  // Navigation click handler\r\n  const handleNavigation = (item) => {\r\n    if (item.submenu && !isCollapsed) {\r\n      setActiveSubmenu(activeSubmenu === item.id ? null : item.id);\r\n    } else {\r\n      setActiveItem(item.id);\r\n      setActiveSubmenu(null);\r\n      navigate(item.path);\r\n    }\r\n  };\r\n\r\n  // Submenu click handler\r\n  const handleSubmenuClick = (subItem) => {\r\n    navigate(subItem.path);\r\n  };\r\n\r\n  // Quick stats\r\n  const quickStats = [\r\n    { label: 'Active Clients', value: stats.activeClients, icon: Users, color: 'text-blue-400' },\r\n    { label: 'Disputes Won', value: stats.disputesWon, icon: Star, color: 'text-yellow-400' },\r\n    { label: 'This Month', value: `+${stats.monthlyGrowth}`, icon: Calendar, color: 'text-green-400' }\r\n  ];\r\n\r\n  // Mobile overlay\r\n  const MobileOverlay = ({ isVisible, onClose }) => {\r\n    if (!isVisible) return null;\r\n    return (\r\n      <div\r\n        className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\r\n        onClick={onClose}\r\n        aria-hidden=\"true\"\r\n      />\r\n    );\r\n  };\r\n\r\n  // Filter navigation items by feature access\r\n  const visibleItems = useMemo(() => {\r\n    return filteredItems.filter(item => {\r\n      // Always show dashboard\r\n      if (item.id === 'dashboard') return true;\r\n      // Only show if user has access\r\n      return hasFeatureAccess(item.id);\r\n    });\r\n  }, [filteredItems, hasFeatureAccess]);\r\n\r\n  return (\r\n    <>\r\n      <MobileOverlay isVisible={isMobile && !isCollapsed} onClose={() => setIsCollapsed(true)} />\r\n      <div className={`bg-slate-900 text-white transition-all duration-300 ease-in-out ${isCollapsed ? 'w-16' : 'w-64'} min-h-screen flex flex-col shadow-xl`}>\r\n        {/* Header */}\r\n        <div className=\"p-4 border-b border-slate-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            {!isCollapsed && (\r\n              <div>\r\n                <h1 className=\"text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\r\n                  Speedy Credit\r\n                </h1>\r\n                <p className=\"text-xs text-slate-400\">Repair Dashboard</p>\r\n              </div>\r\n            )}\r\n            <button\r\n              onClick={() => setIsCollapsed(!isCollapsed)}\r\n              className=\"p-2 rounded-lg hover:bg-slate-700 transition-colors\"\r\n            >\r\n              {isCollapsed ? <ChevronRight size={16} /> : <ChevronLeft size={16} />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {/* Quick Stats */}\r\n        {!isCollapsed && (\r\n          <div className=\"p-4 border-b border-slate-700\">\r\n            <div className=\"space-y-2\">\r\n              {quickStats.map((stat, index) => (\r\n                <div key={index} className=\"flex items-center justify-between text-sm\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <stat.icon size={14} className={stat.color} />\r\n                    <span className=\"text-slate-300\">{stat.label}</span>\r\n                  </div>\r\n                  <span className=\"font-semibold\">{stat.value}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* Search Bar */}\r\n        <SearchBar isCollapsed={isCollapsed} onSearch={setSearchTerm} />\r\n        {/* Notification Center */}\r\n        <NotificationCenter isCollapsed={isCollapsed} stats={stats} />\r\n        {/* Navigation */}\r\n        <nav className=\"flex-1 p-4\" role=\"navigation\" aria-label=\"Main navigation\">\r\n          <ul className=\"space-y-2\">\r\n            {visibleItems.map((item) => (\r\n              <li key={item.id}>\r\n                <div\r\n                  className={`group relative flex items-center justify-between p-3 rounded-lg cursor-pointer transition-all duration-200 ${\r\n                    activeItem === item.id\r\n                      ? 'bg-blue-600 text-white shadow-lg'\r\n                      : 'text-slate-300 hover:bg-slate-700 hover:text-white'\r\n                  }`}\r\n                  onClick={() => handleNavigation(item)}\r\n                  tabIndex={0}\r\n                  aria-expanded={activeSubmenu === item.id}\r\n                  aria-describedby={`${item.id}-description`}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === 'Enter' || e.key === ' ') {\r\n                      handleNavigation(item);\r\n                    }\r\n                  }}\r\n                >\r\n                  <div className=\"flex items-center space-x-3 min-w-0\">\r\n                    <item.icon size={20} className=\"flex-shrink-0\" />\r\n                    {!isCollapsed && (\r\n                      <div className=\"min-w-0\">\r\n                        <span className=\"block font-medium truncate\">{item.label}</span>\r\n                        <span className=\"text-xs text-slate-400 truncate\">{item.description}</span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {!isCollapsed && (\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      {item.badge && (\r\n                        <span className={`px-2 py-1 text-xs rounded-full font-medium ${\r\n                          item.badgeColor || 'bg-blue-500'\r\n                        } text-white`}>\r\n                          {item.badge}\r\n                        </span>\r\n                      )}\r\n                      {item.submenu && (\r\n                        <ChevronRight \r\n                          size={14} \r\n                          className={`transition-transform ${activeSubmenu === item.id ? 'rotate-90' : ''}`}\r\n                        />\r\n                      )}\r\n                      <QuickActions item={item} navigate={navigate} isCollapsed={isCollapsed} />\r\n                    </div>\r\n                  )}\r\n                  {/* Tooltip for collapsed state */}\r\n                  {isCollapsed && (\r\n                    <div className=\"absolute left-16 bg-slate-800 text-white px-3 py-2 rounded-lg shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 whitespace-nowrap\">\r\n                      <div className=\"font-medium\">{item.label}</div>\r\n                      <div className=\"text-xs text-slate-400\">{item.description}</div>\r\n                      {item.badge && (\r\n                        <div className={`inline-block px-2 py-1 text-xs rounded-full mt-1 ${\r\n                          item.badgeColor || 'bg-blue-500'\r\n                        } text-white`}>\r\n                          {item.badge}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                {/* Submenu */}\r\n                {item.submenu && !isCollapsed && activeSubmenu === item.id && (\r\n                  <ul className=\"mt-2 ml-6 space-y-1 border-l-2 border-slate-600 pl-4 animate-in slide-in-from-top-2 duration-200\">\r\n                    {item.submenu.map((subItem, subIndex) => (\r\n                      <li key={subIndex}>\r\n                        <div\r\n                          className=\"flex items-center justify-between p-2 text-sm rounded cursor-pointer text-slate-400 hover:text-white hover:bg-slate-700 transition-colors\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleSubmenuClick(subItem);\r\n                          }}\r\n                        >\r\n                          <span>{subItem.label}</span>\r\n                          {subItem.count && (\r\n                            <span className=\"text-xs bg-slate-600 text-slate-300 px-2 py-1 rounded\">\r\n                              {subItem.count}\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n                <span id={`${item.id}-description`} className=\"sr-only\">\r\n                  {item.description}\r\n                </span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </nav>\r\n        {/* Footer: User section with authentication UI */}\r\n        <SidebarUserSection />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\layout\\TopNav.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\layout\\Topbar.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// scr-admin-vite/src/layout/Topbar.jsx\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTheme } from '../themeContext';\r\n\r\nfunction Topbar({ className = '' }) {\r\n  const { mode, setTheme } = useTheme();\r\n  return (\r\n    <header className={`topbar shadow p-4 flex justify-between items-center ${className}`}>\r\n      <h1 className=\"text-xl font-semibold\">Admin Dashboard</h1>\r\n      <div className=\"flex items-center space-x-4\">\r\n        {/* Theme mode segmented control */}\r\n        <div className=\"flex gap-1\">\r\n          <button onClick={() => setTheme('light')} className={`px-2 py-1 rounded text-xs font-bold border ${mode==='light' ? 'bg-blue-500 text-white border-blue-700' : 'bg-white/10 text-blue-900 dark:text-white/80 border-transparent'}`}>Light</button>\r\n          <button onClick={() => setTheme('medium')} className={`px-2 py-1 rounded text-xs font-bold border ${mode==='medium' ? 'bg-cyan-700 text-white border-cyan-900' : 'bg-white/10 text-cyan-900 dark:text-white/80 border-transparent'}`}>Medium</button>\r\n          <button onClick={() => setTheme('dark')} className={`px-2 py-1 rounded text-xs font-bold border ${mode==='dark' ? 'bg-gray-900 text-white border-gray-700' : 'bg-white/10 text-gray-900 dark:text-white/80 border-transparent'}`}>Dark</button>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Topbar;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\layout\\navConfig.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'UsersIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/layout/navConfig.js\r\n// Centralized menu: tweak labels/paths/icons here; ProtectedLayout will render from this list.\r\n\r\nimport {\r\n  HomeIcon,\r\n  UsersIcon,\r\n  UserPlusIcon,\r\n  IdentificationIcon,\r\n  DocumentTextIcon,\r\n  FolderIcon,\r\n  CreditCardIcon,\r\n  ChartBarIcon,\r\n  Cog6ToothIcon,\r\n  WrenchScrewdriverIcon,\r\n  ShieldCheckIcon,\r\n} from \"@heroicons/react/24/outline\";\r\n\r\nconst item = (label, to, icon, opts = {}) => ({ label, to, icon, ...opts });\r\n\r\nexport const navItems = [\r\n  item(\"Dashboard\", \"/dashboard\", HomeIcon),\r\n  item(\"Contacts\", \"/contacts\", IdentificationIcon),\r\n  item(\"Add Client\", \"/add-client\", UserPlusIcon),\r\n  item(\"Disputes\", \"/disputes\", DocumentTextIcon),\r\n  item(\"Documents\", \"/documents\", FolderIcon),\r\n  item(\"Billing\", \"/billing\", CreditCardIcon),\r\n  item(\"Reports\", \"/reports\", ChartBarIcon),\r\n  item(\"IDIQ\", \"/idiq\", ShieldCheckIcon),\r\n  item(\"Admin Tools\", \"/admin-tools\", WrenchScrewdriverIcon),\r\n  item(\"Settings\", \"/settings\", Cog6ToothIcon),\r\n];\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\lib\\ai.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\lib\\api\\askClient.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'mergedSignal' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/lib/api/askClient.js\r\nconst BASE = import.meta.env.VITE_API_BASE?.replace(/\\/$/, \"\") || \"/api\";\r\n\r\nexport async function askChat({ messages, model = \"gpt-4.1-mini\", temperature = 0.4, max_tokens = 500, signal } = {}) {\r\n  if (!Array.isArray(messages) || messages.length === 0) {\r\n    throw new Error(\"askChat: messages[] is required\");\r\n  }\r\n\r\n  const ctrl = new AbortController();\r\n  const timeout = setTimeout(() => ctrl.abort(\"Request timeout\"), 20000);\r\n  const mergedSignal = signal\r\n    ? new AbortController() // merge external + internal signals\r\n    : ctrl;\r\n\r\n  try {\r\n    const res = await fetch(`${BASE}/ask`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ messages, model, temperature, max_tokens }),\r\n      signal: ctrl.signal\r\n    });\r\n\r\n    if (!res.ok) {\r\n      const text = await res.text().catch(() => \"\");\r\n      throw new Error(`askChat: ${res.status} ${res.statusText} ${text}`);\r\n    }\r\n    return await res.json();\r\n  } finally {\r\n    clearTimeout(timeout);\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\lib\\firebase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\lib\\hooks\\useAsk.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\models\\disputeModel.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\modern\\AppShell.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\modern\\ModernDashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'i' is defined but never used. Allowed unused args must match /^_/u.","line":80,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'i' is defined but never used. Allowed unused args must match /^_/u.","line":124,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { useBranding } from \"../branding/theme.jsx\";\r\nimport BrandLogo from \"@/components/BrandLogo\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport \"../branding/brand-globals.css\";\r\n\r\nconst kpiData = [\r\n  { label: \"Leads Today\", value: 42, icon: \"👥\" },\r\n  { label: \"Disputes Open\", value: 17, icon: \"⚡\" },\r\n  { label: \"Credit Reports Pulled\", value: 29, icon: \"📄\" },\r\n  { label: \"Avg. Score Increase\", value: \"+38\", icon: \"⬆️\" },\r\n];\r\n\r\nconst lineChartData = {\r\n  labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"],\r\n  datasets: [\r\n    {\r\n      label: \"Monthly Disputes\",\r\n      data: [12, 19, 14, 23, 20, 28, 25],\r\n      fill: true,\r\n      backgroundColor: \"rgba(0,123,255,0.1)\",\r\n      borderColor: \"#007BFF\",\r\n      tension: 0.4,\r\n    },\r\n  ],\r\n};\r\n\r\nconst barChartData = {\r\n  labels: [\"Web\", \"Referral\", \"Phone\", \"Email\"],\r\n  datasets: [\r\n    {\r\n      label: \"Leads by Source\",\r\n      data: [18, 12, 8, 4],\r\n      backgroundColor: [\"#007BFF\", \"#28D17C\", \"#6A00F4\", \"#FFC107\"],\r\n    },\r\n  ],\r\n};\r\n\r\nconst activityFeed = [\r\n  { time: \"2m ago\", text: \"New lead added: John Doe\" },\r\n  { time: \"10m ago\", text: \"Dispute started for Jane Smith\" },\r\n  { time: \"1h ago\", text: \"Credit report pulled: Mike Lee\" },\r\n  { time: \"2h ago\", text: \"Lead converted: Sarah Kim\" },\r\n];\r\n\r\nconst quickActions = [\r\n  { label: \"New Lead\", color: \"bg-blue-500\" },\r\n  { label: \"Run Credit Report\", color: \"bg-green-500\" },\r\n  { label: \"Start Dispute\", color: \"bg-purple-500\" },\r\n];\r\n\r\nexport default function ModernDashboard() {\r\n  const { theme, setTheme, brand } = useBranding();\r\n  const isSpeedy = theme === \"speedy\";\r\n\r\n  return (\r\n    <div className={`min-h-screen bg-white ${isSpeedy ? \"\" : \"bg-gray-100\"} font-sans`}> \r\n      {/* Top Nav */}\r\n      <nav className=\"flex items-center justify-between px-6 py-4 shadow-sm bg-white/80 backdrop-blur-lg sticky top-0 z-10\">\r\n        <div className=\"flex items-center gap-3\">\r\n          {isSpeedy && <BrandLogo variant=\"dashboard\" />}\r\n          <span className=\"text-2xl font-bold tracking-tight\" style={{ color: isSpeedy ? brand.colors.primary : \"#333\" }}>\r\n            {isSpeedy ? \"Speedy Credit Repair\" : \"CRM Dashboard\"}\r\n          </span>\r\n        </div>\r\n        <div className=\"flex items-center gap-4\">\r\n          <button\r\n            className=\"px-3 py-1 rounded-lg bg-gray-200 hover:bg-gray-300 text-sm font-medium\"\r\n            onClick={() => setTheme(isSpeedy ? \"generic\" : \"speedy\")}\r\n          >\r\n            Switch to {isSpeedy ? \"Generic\" : \"Speedy\"}\r\n          </button>\r\n          <span className=\"material-icons text-gray-500\">account_circle</span>\r\n          <span className=\"material-icons text-gray-500\">settings</span>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* KPI Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 px-6 mt-6\">\r\n        {kpiData.map((kpi, i) => (\r\n          <div\r\n            key={kpi.label}\r\n            className=\"brand-panel rounded-2xl p-6 shadow-lg transition-transform hover:scale-105 hover:shadow-2xl backdrop-blur-md bg-white/60 border border-gray-200\"\r\n            style={{\r\n              borderColor: isSpeedy ? brand.colors.primary : \"#e5e7eb\",\r\n              boxShadow: isSpeedy ? \"0 4px 24px 0 rgba(0,123,255,0.08)\" : undefined,\r\n            }}\r\n          >\r\n            <div className=\"text-3xl mb-2\">{kpi.icon}</div>\r\n            <div className=\"text-2xl font-bold\" style={{ color: isSpeedy ? brand.colors.primary : \"#333\" }}>{kpi.value}</div>\r\n            <div className=\"text-sm text-gray-500 mt-1\">{kpi.label}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Charts Row */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 px-6 mt-8\">\r\n        <div className=\"brand-panel rounded-2xl p-6 shadow-lg backdrop-blur-md bg-white/60 border border-gray-200\">\r\n          <div className=\"font-semibold mb-2\">Monthly Disputes</div>\r\n          <Line data={lineChartData} options={{ animation: { duration: 1200 } }} />\r\n        </div>\r\n        <div className=\"brand-panel rounded-2xl p-6 shadow-lg backdrop-blur-md bg-white/60 border border-gray-200\">\r\n          <div className=\"font-semibold mb-2\">Leads by Source</div>\r\n          <Bar data={barChartData} options={{ animation: { duration: 1200 } }} />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Activity & Actions Row */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 px-6 mt-8 pb-8\">\r\n        <div className=\"brand-panel rounded-2xl p-6 shadow-lg backdrop-blur-md bg-white/60 border border-gray-200\">\r\n          <div className=\"font-semibold mb-2\">Recent Activity</div>\r\n          <ul className=\"space-y-2\">\r\n            {activityFeed.map((item, i) => (\r\n              <li key={i} className=\"flex justify-between text-sm text-gray-700\">\r\n                <span>{item.text}</span>\r\n                <span className=\"text-gray-400\">{item.time}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div className=\"brand-panel rounded-2xl p-6 shadow-lg backdrop-blur-md bg-white/60 border border-gray-200 flex flex-col gap-4\">\r\n          <div className=\"font-semibold mb-2\">Quick Actions</div>\r\n          <div className=\"flex gap-3 flex-wrap\">\r\n            {quickActions.map((action, i) => (\r\n              <button\r\n                key={action.label}\r\n                className={`px-4 py-2 rounded-xl text-white font-semibold shadow-md transition-transform hover:scale-105 ${action.color}`}\r\n              >\r\n                {action.label}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Old Dashboard Link */}\r\n      <div className=\"w-full text-center py-4\">\r\n        <a href=\"/old-dashboard\" className=\"text-blue-500 underline hover:text-blue-700\">View Old Dashboard</a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\modern\\Sidebar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\modern\\Toggle.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\openaiConfig.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\openaiService.demo.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'form' is defined but never used. Allowed unused args must match /^_/u.","line":2,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'clientDetails' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'disputes' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":60},{"ruleId":"no-unused-vars","severity":1,"message":"'disputeDetails' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":54},{"ruleId":"no-unused-vars","severity":1,"message":"'clientDetails' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Demo mode for OpenAI service functions\r\nexport async function generateLetter(form) {\r\n  return 'Demo mode: This is a placeholder dispute letter.';\r\n}\r\n\r\nexport async function analyzeCredit(clientDetails, disputes) {\r\n  return 'Demo mode: Credit analysis placeholder.';\r\n}\r\n\r\nexport async function recommendDispute(disputeDetails) {\r\n  return 'Demo mode: Dispute recommendation placeholder.';\r\n}\r\n\r\nexport async function suggestCommunication(clientDetails) {\r\n  return 'Demo mode: Communication strategy placeholder.';\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\openaiService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\AICommandCenter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\AddClient.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\AdminTools.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Administration.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\AllActivityLog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\AuthDebug.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'initializeApp' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'getAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { initializeApp, getApps } from \"firebase/app\";\r\nimport {\r\n  getAuth,\r\n  setPersistence,\r\n  browserLocalPersistence,\r\n  indexedDBLocalPersistence,\r\n  inMemoryPersistence,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\";\r\n\r\n// IMPORTANT: import from the same single source used in the app\r\nimport { auth } from \"../lib/firebase\";\r\n\r\nfunction testStorage(name, fn) {\r\n  try { fn(); return `${name}: OK`; } catch (e) { return `${name}: FAIL - ${e?.message || e}`; }\r\n}\r\n\r\nexport default function AuthDebug() {\r\n  const [info, setInfo] = useState({});\r\n  const [persistenceResult, setPersistenceResult] = useState(\"Not tested\");\r\n\r\n  useEffect(() => {\r\n    const details = {};\r\n\r\n    // App instances\r\n    details.appsCount = getApps().length;\r\n\r\n    // Origin & document info\r\n    details.locationHref = window.location.href;\r\n    details.origin = window.location.origin;\r\n    details.userAgent = navigator.userAgent;\r\n    details.cookieEnabled = navigator.cookieEnabled;\r\n\r\n    // Storage availability\r\n    details.storageChecks = [\r\n      testStorage(\"localStorage\", () => localStorage.setItem(\"__t\", \"1\")),\r\n      testStorage(\"sessionStorage\", () => sessionStorage.setItem(\"__t\", \"1\")),\r\n      testStorage(\"IndexedDB\", () => indexedDB.open(\"__idbTest\")),\r\n    ];\r\n\r\n    // Headers meta (basic signal)\r\n    const metas = Array.from(document.querySelectorAll(\"meta[http-equiv]\"))\r\n      .map(m => `${m.httpEquiv}: ${m.content}`);\r\n    details.metaHttpEquiv = metas;\r\n\r\n    setInfo(details);\r\n\r\n    const unsub = onAuthStateChanged(auth, (u) => {\r\n      setInfo(prev => ({ ...prev, authUser: u ? (u.email || u.uid) : null }));\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  async function tryPersistence() {\r\n    try {\r\n      await setPersistence(auth, indexedDBLocalPersistence);\r\n      setPersistenceResult(\"indexedDBLocalPersistence: OK\");\r\n    } catch {\r\n      try {\r\n        await setPersistence(auth, browserLocalPersistence);\r\n        setPersistenceResult(\"browserLocalPersistence: OK\");\r\n      } catch {\r\n        await setPersistence(auth, inMemoryPersistence);\r\n        setPersistenceResult(\"inMemoryPersistence: OK (fallback)\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ maxWidth: 720, margin: \"40px auto\", fontFamily: \"system-ui, sans-serif\" }}>\r\n      <h1>Auth Debug</h1>\r\n      <pre style={{ background: \"#f5f5f5\", padding: 16, borderRadius: 8 }}>\r\n        {JSON.stringify(info, null, 2)}\r\n      </pre>\r\n      <button onClick={tryPersistence} style={{ padding: \"10px 14px\", marginTop: 12 }}>\r\n        Test Persistence (IDB → Local → Memory)\r\n      </button>\r\n      <p>{persistenceResult}</p>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientManagement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientPortal\\ClientDashboard.jsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token }","line":194,"column":11,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { doc, getDoc, collection, query, where, orderBy, onSnapshot, getDocs } from 'firebase/firestore';\r\nimport { db } from \"@/lib/firebase\";\r\nimport { \r\n  ChartBarIcon, \r\n  DocumentTextIcon,\r\n  FolderIcon,\r\n  BellIcon,\r\n  ArrowTrendingUpIcon\r\n} from '@heroicons/react/24/outline';\r\n\r\nconst ClientDashboard = () => {\r\n  const { user } = useAuth();\r\n  const [clientData, setClientData] = useState(null);\r\n  const [creditScores, setCreditScores] = useState([]);\r\n  const [disputes, setDisputes] = useState([]);\r\n  const [documents, setDocuments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const loadClientData = async () => {\r\n      try {\r\n        const clientDoc = await getDoc(doc(db, 'clients', user.uid));\r\n        if (clientDoc.exists()) {\r\n          setClientData(clientDoc.data());\r\n        } else {\r\n          const q = query(collection(db, 'contacts'), where('email', '==', user.email));\r\n          const snapshot = await getDocs(q);\r\n          if (!snapshot.empty) {\r\n            setClientData(snapshot.docs[0].data());\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading client data:', error);\r\n      }\r\n    };\r\n\r\n    const scoresQuery = query(\r\n      collection(db, 'creditScores'),\r\n      where('clientEmail', '==', user.email),\r\n      orderBy('date', 'desc')\r\n    );\r\n    \r\n    const unsubscribeScores = onSnapshot(scoresQuery, (snapshot) => {\r\n      const scoresData = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      setCreditScores(scoresData);\r\n    });\r\n\r\n    const disputesQuery = query(\r\n      collection(db, 'disputeLetters'),\r\n      where('recipientEmail', '==', user.email),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n    \r\n    const unsubscribeDisputes = onSnapshot(disputesQuery, (snapshot) => {\r\n      const disputesData = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      setDisputes(disputesData);\r\n    });\r\n\r\n    loadClientData();\r\n    setLoading(false);\r\n\r\n    return () => {\r\n      unsubscribeScores();\r\n      unsubscribeDisputes();\r\n    };\r\n  }, [user]);\r\n\r\n  const getScoreImprovement = () => {\r\n    if (creditScores.length < 2) return 0;\r\n    const latest = creditScores[0]?.score || 0;\r\n    const previous = creditScores[1]?.score || 0;\r\n    return latest - previous;\r\n  };\r\n\r\n  const stats = [\r\n    {\r\n      title: 'Current Credit Score',\r\n      value: creditScores[0]?.score || '---',\r\n      change: getScoreImprovement(),\r\n      icon: ChartBarIcon,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      title: 'Active Disputes',\r\n      value: disputes.filter(d => d.status !== 'resolved').length,\r\n      icon: DocumentTextIcon,\r\n      color: 'green'\r\n    },\r\n    {\r\n      title: 'Documents',\r\n      value: documents.length,\r\n      icon: FolderIcon,\r\n      color: 'purple'\r\n    }\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto px-4 py-8\">\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        className=\"bg-gradient-to-r from-blue-600 to-green-600 rounded-xl p-8 mb-8 text-white\"\r\n      >\r\n        <h1 className=\"text-3xl font-bold mb-2\">\r\n          Welcome back, {clientData?.firstName || user?.displayName || user?.email?.split('@')[0] || 'Client'}!\r\n        </h1>\r\n        <p className=\"text-xl opacity-90\">\r\n          Track your credit repair journey and monitor your progress\r\n        </p>\r\n        {getScoreImprovement() > 0 && (\r\n          <div className=\"mt-4 inline-flex items-center bg-white/20 backdrop-blur rounded-lg px-4 py-2\">\r\n            <ArrowTrendingUpIcon className=\"h-5 w-5 mr-2\" />\r\n            <span>Your score improved by {getScoreImprovement()} points!</span>\r\n          </div>\r\n        )}\r\n      </motion.div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\r\n        {stats.map((stat, index) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <motion.div\r\n              key={stat.title}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: index * 0.1 }}\r\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n            >\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className={`p-3 rounded-lg bg-${stat.color}-100 dark:bg-${stat.color}-900/30`}>\r\n                  <Icon className={`h-6 w-6 text-${stat.color}-600 dark:text-${stat.color}-400`} />\r\n                </div>\r\n                {stat.change > 0 && (\r\n                  <span className=\"text-green-600 text-sm font-semibold\">\r\n                    +{stat.change}\r\n                  </span>\r\n                )}\r\n              </div>\r\n              <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\r\n                {stat.value}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                {stat.title}\r\n              </div>\r\n            </motion.div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ delay: 0.4 }}\r\n        className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n      >\r\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\r\n          Recent Activity\r\n        </h2>\r\n        <div className=\"space-y-4\">\r\n          {disputes.length === 0 ? (\r\n            <div className=\"text-center py-8 text-gray-500\">\r\n              <BellIcon className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\r\n              <p>No recent activity</p>\r\n            </div>\r\n          ) : (\r\n            disputes.slice(0, 3).map((dispute) => (\r\n              <div key={dispute.id} className=\"flex items-start space-x-3\">\r\n                <DocumentTextIcon className=\"h-5 w-5 text-blue-600 mt-1\" />\r\n                <div className=\"flex-1\">\r\n                  <p className=\"font-medium\">Dispute Letter Sent</p>\r\n                  <p className=\"text-sm text-gray-600\">To {dispute.bureau}</p>\r\n                </div>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientDashboard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientPortal\\ClientDisputes.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientPortal\\ClientDocuments.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'doc' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":76,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":79},{"ruleId":"no-unused-vars","severity":1,"message":"'updateDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":81,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":90}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { DocumentIcon, CloudArrowUpIcon, FolderIcon, TrashIcon, EyeIcon , ChartBarIcon } from '@heroicons/react/24/outline';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { storage, db } from \"@/lib/firebase\";\r\nimport { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\r\nimport { collection, addDoc, query, where, orderBy, onSnapshot, deleteDoc, doc, updateDoc } from 'firebase/firestore';\r\nimport { parseCreditReportPDF as parsePDF } from '../../utils/pdfParser';\r\n\r\n\r\n\r\nconst ClientDocuments = () => {\r\n  const { user } = useAuth();\r\n  const [documents, setDocuments] = useState([]);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [dragActive, setDragActive] = useState(false);\r\n  const [parsing, setParsing] = useState({});\r\n  const parseDocument = async (doc) => {\r\n    setParsing(prev => ({ ...prev, [doc.id]: true }));\r\n    try {\r\n      console.log('Starting parse for:', doc.fileName);\r\n      const result = await parsePDF(doc.url);\r\n      console.log('Parse result:', result);\r\n      if (!result) {\r\n        console.log('Result is null/undefined');\r\n        alert('Failed to parse document.');\r\n      } else if (!result.scores) {\r\n        console.log('Result has no scores property');\r\n        alert('No scores property in result.');\r\n      } else if (result.scores.length === 0) {\r\n        console.log('Scores array is empty');\r\n        alert('No credit scores found in this document.');\r\n      } else {\r\n        console.log('Found scores:', result.scores);\r\n        // Save scores to Firestore...\r\n        alert(`Successfully extracted ${result.scores.length} score(s)!`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Parse error:', error);\r\n      alert('Failed to parse document.');\r\n    } finally {\r\n      setParsing(prev => ({ ...prev, [doc.id]: false }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const q = query(\r\n      collection(db, 'documents'),\r\n      where('clientEmail', '==', user.email),\r\n      orderBy('uploadedAt', 'desc')\r\n    );\r\n\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      const docs = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      setDocuments(docs);\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [user]);\r\n\r\n  const handleDrag = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\r\n      setDragActive(true);\r\n    } else if (e.type === \"dragleave\") {\r\n      setDragActive(false);\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDragActive(false);\r\n    \r\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\r\n      handleFiles(e.dataTransfer.files);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    if (e.target.files && e.target.files[0]) {\r\n      handleFiles(e.target.files);\r\n    }\r\n  };\r\n\r\n  const handleFiles = async (files) => {\r\n    const file = files[0];\r\n    \r\n    // Validate file\r\n    const maxSize = 10 * 1024 * 1024; // 10MB\r\n    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];\r\n    \r\n    if (file.size > maxSize) {\r\n      alert('File size must be less than 10MB');\r\n      return;\r\n    }\r\n    \r\n    if (!allowedTypes.includes(file.type)) {\r\n      alert('Only PDF, JPG, and PNG files are allowed');\r\n      return;\r\n    }\r\n\r\n    setUploading(true);\r\n\r\n    try {\r\n      // Create storage reference\r\n      const timestamp = Date.now();\r\n      const fileName = `${user.uid}/${timestamp}_${file.name}`;\r\n      const storageRef = ref(storage, `documents/${fileName}`);\r\n      \r\n      // Upload file\r\n      const snapshot = await uploadBytes(storageRef, file);\r\n      const downloadURL = await getDownloadURL(snapshot.ref);\r\n      \r\n      // Save metadata to Firestore\r\n      await addDoc(collection(db, 'documents'), {\r\n        fileName: file.name,\r\n        fileType: file.type,\r\n        fileSize: file.size,\r\n        url: downloadURL,\r\n        storagePath: fileName,\r\n        clientEmail: user.email,\r\n        clientId: user.uid,\r\n        uploadedAt: new Date(),\r\n        category: determineCategory(file.name)\r\n      });\r\n\r\n      setUploading(false);\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      alert('Failed to upload file. Please try again.');\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const determineCategory = (fileName) => {\r\n    const lower = fileName.toLowerCase();\r\n    if (lower.includes('report') || lower.includes('credit')) return 'Credit Report';\r\n    if (lower.includes('id') || lower.includes('driver') || lower.includes('passport')) return 'ID';\r\n    if (lower.includes('dispute') || lower.includes('letter')) return 'Dispute';\r\n    return 'Other';\r\n  };\r\n\r\n  const deleteDocument = async (doc) => {\r\n    if (!window.confirm('Are you sure you want to delete this document?')) return;\r\n    \r\n    try {\r\n      // Delete from Storage\r\n      const storageRef = ref(storage, `documents/${doc.storagePath}`);\r\n      await deleteObject(storageRef);\r\n      \r\n      // Delete from Firestore\r\n      await deleteDoc(doc(db, 'documents', doc.id));\r\n    } catch (error) {\r\n      console.error('Error deleting document:', error);\r\n      alert('Failed to delete document');\r\n    }\r\n  };\r\n\r\n  const formatFileSize = (bytes) => {\r\n    if (bytes < 1024) return bytes + ' B';\r\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\r\n    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\r\n  };\r\n\r\n  const getCategoryColor = (category) => {\r\n    const colors = {\r\n      'Credit Report': 'bg-blue-100 text-blue-800',\r\n      'ID': 'bg-green-100 text-green-800',\r\n      'Dispute': 'bg-yellow-100 text-yellow-800',\r\n      'Other': 'bg-gray-100 text-gray-800'\r\n    };\r\n    return colors[category] || colors['Other'];\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto px-4 py-8\">\r\n      <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n        My Documents\r\n      </h1>\r\n      <p className=\"text-gray-600 dark:text-gray-400 mb-8\">\r\n        Upload and manage your credit repair documents\r\n      </p>\r\n      \r\n      {/* Upload Zone */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-8 shadow-lg mb-8\">\r\n        <form onDragEnter={handleDrag} onSubmit={(e) => e.preventDefault()}>\r\n          <input\r\n            type=\"file\"\r\n            id=\"file-upload\"\r\n            className=\"hidden\"\r\n            accept=\".pdf,.jpg,.jpeg,.png\"\r\n            onChange={handleChange}\r\n          />\r\n          <label\r\n            htmlFor=\"file-upload\"\r\n            className={`border-2 border-dashed rounded-lg p-12 text-center cursor-pointer transition-colors ${\r\n              dragActive \r\n                ? 'border-blue-400 bg-blue-50 dark:bg-blue-900/20' \r\n                : 'border-gray-300 dark:border-gray-600 hover:border-gray-400'\r\n            }`}\r\n            onDragEnter={handleDrag}\r\n            onDragLeave={handleDrag}\r\n            onDragOver={handleDrag}\r\n            onDrop={handleDrop}\r\n          >\r\n            <CloudArrowUpIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n            {uploading ? (\r\n              <>\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n                <p className=\"text-gray-600 dark:text-gray-400\">Uploading...</p>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <p className=\"text-gray-600 dark:text-gray-400 mb-2\">\r\n                  Drag and drop files here, or click to browse\r\n                </p>\r\n                <p className=\"text-sm text-gray-500\">\r\n                  PDF, JPG, PNG up to 10MB\r\n                </p>\r\n              </>\r\n            )}\r\n          </label>\r\n        </form>\r\n      </div>\r\n      \r\n      {/* Documents List */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Uploaded Documents ({documents.length})</h2>\r\n        \r\n        {loading ? (\r\n          <div className=\"flex justify-center py-8\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n          </div>\r\n        ) : documents.length === 0 ? (\r\n          <div className=\"text-center py-8 text-gray-500\">\r\n            <FolderIcon className=\"h-12 w-12 mx-auto mb-2 text-gray-400\" />\r\n            <p>No documents uploaded yet</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"grid gap-4\">\r\n            {documents.map((doc) => (\r\n              <div key={doc.id} className=\"flex items-center justify-between p-4 border rounded-lg dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <DocumentIcon className=\"h-10 w-10 text-gray-400\" />\r\n                  <div>\r\n                    <p className=\"font-medium text-gray-900 dark:text-white\">{doc.fileName}</p>\r\n                    <div className=\"flex items-center gap-3 mt-1\">\r\n                      <span className={`text-xs px-2 py-1 rounded-full ${getCategoryColor(doc.category)}`}>\r\n                        {doc.category}\r\n                      </span>\r\n                      <span className=\"text-xs text-gray-500\">{formatFileSize(doc.fileSize)}</span>\r\n                      <span className=\"text-xs text-gray-500\">\r\n                        {new Date(doc.uploadedAt.toDate ? doc.uploadedAt.toDate() : doc.uploadedAt).toLocaleDateString()}\r\n                      </span>\r\n                      {doc.parsed && (\r\n                        <span className=\"text-xs text-green-600\">\r\n                          ✓ Parsed ({doc.scoresFound || 0} scores)\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <a\r\n                    href={doc.url}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"p-2 text-blue-600 hover:bg-blue-50 rounded-lg\"\r\n                  >\r\n                    <EyeIcon className=\"h-5 w-5\" />\r\n                  </a>\r\n                  <button\r\n                    onClick={() => parseDocument(doc)}\r\n                    disabled={parsing[doc.id] || doc.parsed}\r\n                    className={`p-2 rounded-lg ${\r\n                      doc.parsed \r\n                        ? 'text-gray-400 cursor-not-allowed' \r\n                        : parsing[doc.id]\r\n                          ? 'text-yellow-600 animate-spin'\r\n                          : 'text-green-600 hover:bg-green-50'\r\n                    }`}\r\n                    title={doc.parsed ? 'Already parsed' : 'Extract credit scores'}\r\n                  >\r\n                    <ChartBarIcon className=\"h-5 w-5\" />\r\n                  </button>\r\n                  <button\r\n                    onClick={() => deleteDocument(doc)}\r\n                    className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg\"\r\n                  >\r\n                    <TrashIcon className=\"h-5 w-5\" />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientDocuments;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientPortal\\ClientLayout.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":19,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport { \r\n  HomeIcon, \r\n  ChartBarIcon, \r\n  DocumentTextIcon,\r\n  FolderIcon,\r\n  ChatBubbleLeftRightIcon,\r\n  Bars3Icon,\r\n  XMarkIcon,\r\n  ArrowRightOnRectangleIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\nconst ClientLayout = ({ children }) => {\r\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\r\n  const location = useLocation();\r\n  const { user, logout } = useAuth();\r\n  \r\n  const navigation = [\r\n    { name: 'Dashboard', href: '/client-portal', icon: HomeIcon },\r\n    { name: 'My Credit Scores', href: '/client-portal/scores', icon: ChartBarIcon },\r\n    { name: 'Dispute Status', href: '/client-portal/disputes', icon: DocumentTextIcon },\r\n    { name: 'Documents', href: '/client-portal/documents', icon: FolderIcon },\r\n    { name: 'Messages', href: '/client-portal/messages', icon: ChatBubbleLeftRightIcon },\r\n  ];\r\n  \r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 dark:from-gray-900 dark:to-gray-800\">\r\n      {/* Mobile Header */}\r\n      <div className=\"lg:hidden\">\r\n        <div className=\"fixed top-0 left-0 right-0 z-50 bg-white/90 dark:bg-gray-900/90 backdrop-blur-md border-b border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between px-4 py-3\">\r\n            <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n              SpeedyCRM\r\n            </h1>\r\n            <button\r\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\r\n              className=\"p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800\"\r\n            >\r\n              {mobileMenuOpen ? (\r\n                <XMarkIcon className=\"h-6 w-6\" />\r\n              ) : (\r\n                <Bars3Icon className=\"h-6 w-6\" />\r\n              )}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Mobile Menu Overlay */}\r\n        {mobileMenuOpen && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: -20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"fixed inset-0 z-40 bg-white dark:bg-gray-900 pt-16\"\r\n          >\r\n            <nav className=\"px-4 py-6 space-y-2\">\r\n              {navigation.map((item) => {\r\n                const Icon = item.icon;\r\n                const isActive = location.pathname === item.href;\r\n                return (\r\n                  <Link\r\n                    key={item.name}\r\n                    to={item.href}\r\n                    onClick={() => setMobileMenuOpen(false)}\r\n                    className={`flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${\r\n                      isActive\r\n                        ? 'bg-blue-100 text-blue-600 dark:bg-blue-900/50 dark:text-blue-400'\r\n                        : 'hover:bg-gray-100 dark:hover:bg-gray-800'\r\n                    }`}\r\n                  >\r\n                    <Icon className=\"h-5 w-5\" />\r\n                    <span className=\"font-medium\">{item.name}</span>\r\n                  </Link>\r\n                );\r\n              })}\r\n              <button\r\n                onClick={logout}\r\n                className=\"flex items-center space-x-3 px-4 py-3 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 text-red-600 dark:text-red-400 w-full\"\r\n              >\r\n                <ArrowRightOnRectangleIcon className=\"h-5 w-5\" />\r\n                <span className=\"font-medium\">Sign Out</span>\r\n              </button>\r\n            </nav>\r\n          </motion.div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Desktop Sidebar */}\r\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:flex lg:w-64 lg:flex-col\">\r\n        <div className=\"flex flex-col flex-1 bg-white/90 dark:bg-gray-900/90 backdrop-blur-md border-r border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center h-16 px-6 border-b border-gray-200 dark:border-gray-700\">\r\n            <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n              SpeedyCRM Client\r\n            </h1>\r\n          </div>\r\n          <nav className=\"flex-1 px-4 py-6 space-y-2\">\r\n            {navigation.map((item) => {\r\n              const Icon = item.icon;\r\n              const isActive = location.pathname === item.href;\r\n              return (\r\n                <Link\r\n                  key={item.name}\r\n                  to={item.href}\r\n                  className={`flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${\r\n                    isActive\r\n                      ? 'bg-blue-100 text-blue-600 dark:bg-blue-900/50 dark:text-blue-400'\r\n                      : 'hover:bg-gray-100 dark:hover:bg-gray-800'\r\n                  }`}\r\n                >\r\n                  <Icon className=\"h-5 w-5\" />\r\n                  <span className=\"font-medium\">{item.name}</span>\r\n                </Link>\r\n              );\r\n            })}\r\n          </nav>\r\n          <div className=\"px-4 py-4 border-t border-gray-200 dark:border-gray-700\">\r\n            <button\r\n              onClick={logout}\r\n              className=\"flex items-center space-x-3 px-4 py-3 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 text-red-600 dark:text-red-400 w-full\"\r\n            >\r\n              <ArrowRightOnRectangleIcon className=\"h-5 w-5\" />\r\n              <span className=\"font-medium\">Sign Out</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Main Content */}\r\n      <div className=\"lg:pl-64\">\r\n        <main className=\"px-4 py-20 lg:py-8 lg:px-8\">\r\n          {children}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientLayout;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientPortal\\ClientMessages.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientPortal\\ClientScores.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowTrendingUpIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowTrendingDownIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'InformationCircleIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'ExclamationTriangleIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'selectedBureau' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'setSelectedBureau' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { collection, query, where, orderBy, onSnapshot } from 'firebase/firestore';\r\nimport { db } from '@/lib/firebase';\r\nimport {\r\n  ChartBarIcon,\r\n  ArrowTrendingUpIcon,\r\n  ArrowTrendingDownIcon,\r\n  InformationCircleIcon,\r\n  AcademicCapIcon,\r\n  SparklesIcon,\r\n  LockClosedIcon,\r\n  BeakerIcon,\r\n  DocumentChartBarIcon,\r\n  ExclamationTriangleIcon\r\n} from '@heroicons/react/24/outline';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n);\r\n\r\nconst ClientScores = () => {\r\n  const { user } = useAuth();\r\n  const [scores, setScores] = useState([]);\r\n  const [selectedView, setSelectedView] = useState('overview'); // overview, details, simulator\r\n  const [selectedBureau, setSelectedBureau] = useState('all');\r\n  const [loading, setLoading] = useState(true);\r\n  const [simulatorEnabled, setSimulatorEnabled] = useState(false); // Admin controlled\r\n  const [showEducation, setShowEducation] = useState(true);\r\n\r\n  // Score model definitions\r\n  const scoreModels = {\r\n    'FICO8': { name: 'FICO® Score 8', range: '300-850', usage: 'Most common for credit cards & loans' },\r\n    'VantageScore3': { name: 'VantageScore® 3.0', range: '300-850', usage: 'Used by many free credit monitoring services' },\r\n    'FICOAuto': { name: 'FICO® Auto Score', range: '250-900', usage: 'Used for auto loan applications' },\r\n    'FICOMortgage': { name: 'FICO® Mortgage Score', range: '300-850', usage: 'Used for home loan applications' },\r\n    'FICOBankcard': { name: 'FICO® Bankcard Score', range: '250-900', usage: 'Used for credit card applications' }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const scoresQuery = query(\r\n      collection(db, 'creditScores'),\r\n      where('clientEmail', '==', user.email),\r\n      orderBy('date', 'desc')\r\n    );\r\n\r\n    const unsubscribe = onSnapshot(scoresQuery, (snapshot) => {\r\n      const scoresData = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n        date: doc.data().date?.toDate ? doc.data().date.toDate() : new Date(doc.data().date)\r\n      }));\r\n      setScores(scoresData);\r\n      setLoading(false);\r\n      checkSimulatorAccess();\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [user]);\r\n\r\n  const checkSimulatorAccess = async () => {\r\n    setSimulatorEnabled(false);\r\n  };\r\n\r\n  // Get scores organized by model and bureau\r\n  const getScoresByModel = () => {\r\n    const organized = {};\r\n    const bureaus = ['Equifax', 'Experian', 'TransUnion'];\r\n    Object.keys(scoreModels).forEach(model => {\r\n      organized[model] = {};\r\n      bureaus.forEach(bureau => {\r\n        const modelScores = scores.filter(s => \r\n          s.bureau === bureau && (s.model === model || (!s.model && model === 'FICO8'))\r\n        );\r\n        organized[model][bureau] = {\r\n          current: modelScores[0]?.score || null,\r\n          previous: modelScores[1]?.score || null,\r\n          change: modelScores[0] && modelScores[1] \r\n            ? modelScores[0].score - modelScores[1].score \r\n            : 0,\r\n          date: modelScores[0]?.date || null\r\n        };\r\n      });\r\n    });\r\n    return organized;\r\n  };\r\n\r\n  // Educational banner component\r\n  const EducationalBanner = () => (\r\n    <AnimatePresence>\r\n      {showEducation && (\r\n        <motion.div\r\n          initial={{ opacity: 0, height: 0 }}\r\n          animate={{ opacity: 1, height: 'auto' }}\r\n          exit={{ opacity: 0, height: 0 }}\r\n          className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl p-6 mb-8 border border-blue-200 dark:border-blue-800\"\r\n        >\r\n          <div className=\"flex items-start gap-4\">\r\n            <AcademicCapIcon className=\"h-8 w-8 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-1\" />\r\n            <div className=\"flex-1\">\r\n              <h3 className=\"font-semibold text-gray-900 dark:text-white mb-2 text-lg\">\r\n                Did You Know? You Don&apos;t Have Just One Credit Score!\r\n              </h3>\r\n              <p className=\"text-gray-700 dark:text-gray-300 mb-3\">\r\n                You actually have dozens of different credit scores. Each lender may use a different scoring model \r\n                depending on what you&apos;re applying for. Your auto lender sees different scores than your credit card company!\r\n              </p>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 mb-4\">\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3\">\r\n                  <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">FICO® Score 8</span>\r\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">Most common for general credit</p>\r\n                </div>\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3\">\r\n                  <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">Auto Scores</span>\r\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">Range 250-900 for car loans</p>\r\n                </div>\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3\">\r\n                  <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">Mortgage Scores</span>\r\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">Specific models for home loans</p>\r\n                </div>\r\n              </div>\r\n              <button\r\n                onClick={() => setShowEducation(false)}\r\n                className=\"text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400\"\r\n              >\r\n                Got it, thanks!\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n\r\n  // ScoreView™ Header\r\n  const ScoreViewHeader = () => (\r\n    <div className=\"mb-8\">\r\n      <div className=\"flex items-center gap-3 mb-2\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\r\n          ScoreView™\r\n        </h1>\r\n        <span className=\"px-3 py-1 bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900/30 dark:to-purple-900/30 text-blue-700 dark:text-blue-300 rounded-full text-sm font-semibold\">\r\n          Credit Intelligence\r\n        </span>\r\n      </div>\r\n      <p className=\"text-gray-600 dark:text-gray-400\">\r\n        Your complete credit score analysis across all bureaus and scoring models\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  // View tabs\r\n  const ViewTabs = () => (\r\n    <div className=\"flex gap-2 mb-8\">\r\n      <button\r\n        onClick={() => setSelectedView('overview')}\r\n        className={`px-6 py-3 rounded-lg font-medium transition-all ${\r\n          selectedView === 'overview'\r\n            ? 'bg-blue-600 text-white shadow-lg'\r\n            : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\r\n        }`}\r\n      >\r\n        <DocumentChartBarIcon className=\"h-5 w-5 inline mr-2\" />\r\n        Overview\r\n      </button>\r\n      <button\r\n        onClick={() => setSelectedView('details')}\r\n        className={`px-6 py-3 rounded-lg font-medium transition-all ${\r\n          selectedView === 'details'\r\n            ? 'bg-blue-600 text-white shadow-lg'\r\n            : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\r\n        }`}\r\n      >\r\n        <ChartBarIcon className=\"h-5 w-5 inline mr-2\" />\r\n        All Scores\r\n      </button>\r\n      <button\r\n        onClick={() => setSelectedView('simulator')}\r\n        className={`px-6 py-3 rounded-lg font-medium transition-all relative ${\r\n          selectedView === 'simulator'\r\n            ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'\r\n            : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\r\n        }`}\r\n      >\r\n        <BeakerIcon className=\"h-5 w-5 inline mr-2\" />\r\n        SmartSim™\r\n        {!simulatorEnabled && (\r\n          <span className=\"absolute -top-2 -right-2 px-2 py-1 bg-yellow-500 text-white text-xs rounded-full\">\r\n            Coming Soon\r\n          </span>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  // Overview cards with all score models\r\n  const ScoreModelCards = () => {\r\n    const scoreData = getScoresByModel();\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        {Object.entries(scoreModels).map(([modelKey, modelInfo]) => {\r\n          const modelScores = scoreData[modelKey];\r\n          const hasData = Object.values(modelScores).some(bureau => bureau.current !== null);\r\n          return (\r\n            <motion.div\r\n              key={modelKey}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              className={`bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg ${\r\n                !hasData ? 'opacity-60' : ''\r\n              }`}\r\n            >\r\n              <div className=\"flex justify-between items-start mb-4\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                    {modelInfo.name}\r\n                  </h3>\r\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    {modelInfo.usage}\r\n                  </p>\r\n                  <span className=\"text-xs text-gray-500\">\r\n                    Range: {modelInfo.range}\r\n                  </span>\r\n                </div>\r\n                {!hasData && (\r\n                  <span className=\"px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded-full text-sm\">\r\n                    Data not available\r\n                  </span>\r\n                )}\r\n              </div>\r\n              <div className=\"grid grid-cols-3 gap-4\">\r\n                {['Equifax', 'Experian', 'TransUnion'].map(bureau => {\r\n                  const bureauScore = modelScores[bureau];\r\n                  return (\r\n                    <div key={bureau} className=\"text-center\">\r\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\r\n                        {bureau}\r\n                      </p>\r\n                      <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                        {bureauScore.current || '---'}\r\n                      </p>\r\n                      {bureauScore.change !== 0 && (\r\n                        <div className={`text-xs mt-1 ${\r\n                          bureauScore.change > 0 ? 'text-green-600' : 'text-red-600'\r\n                        }`}>\r\n                          {bureauScore.change > 0 ? '+' : ''}{bureauScore.change}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </motion.div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // SmartSim™ Simulator placeholder\r\n  const SmartSimulator = () => (\r\n    <motion.div\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-8 text-center\"\r\n    >\r\n      <BeakerIcon className=\"h-16 w-16 text-purple-600 dark:text-purple-400 mx-auto mb-4\" />\r\n      <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\r\n        SmartSim™ Credit Score Simulator\r\n      </h2>\r\n      <p className=\"text-gray-700 dark:text-gray-300 mb-6 max-w-2xl mx-auto\">\r\n        Coming soon! Test &quot;what-if&quot; scenarios to see how different actions could impact your credit scores. \r\n        Pay down debt, remove collections, or add new accounts to see projected score changes.\r\n      </p>\r\n      {!simulatorEnabled ? (\r\n        <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-300 rounded-lg\">\r\n          <LockClosedIcon className=\"h-5 w-5\" />\r\n          <span>Available in Premium Plans</span>\r\n        </div>\r\n      ) : (\r\n        <button className=\"px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:shadow-lg transition-shadow\">\r\n          <SparklesIcon className=\"h-5 w-5 inline mr-2\" />\r\n          Launch Simulator\r\n        </button>\r\n      )}\r\n    </motion.div>\r\n  );\r\n\r\n  // Monthly AI Report placeholder\r\n  const AIReportSection = () => (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      className=\"mt-8 bg-gradient-to-r from-blue-50 to-green-50 dark:from-blue-900/20 dark:to-green-900/20 rounded-xl p-6\"\r\n    >\r\n      <div className=\"flex items-center gap-3 mb-4\">\r\n        <SparklesIcon className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          AI Monthly Intelligence Report\r\n        </h3>\r\n        <span className=\"px-2 py-1 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-full text-xs\">\r\n          New Feature\r\n        </span>\r\n      </div>\r\n      <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\r\n        Your personalized credit analysis will appear here each month, explaining changes and providing actionable recommendations.\r\n      </p>\r\n      <button className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 text-sm font-medium\">\r\n        Learn More →\r\n      </button>\r\n    </motion.div>\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[400px]\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto px-4 py-8\">\r\n      <ScoreViewHeader />\r\n      <EducationalBanner />\r\n      <ViewTabs />\r\n      {selectedView === 'overview' && (\r\n        <>\r\n          <ScoreModelCards />\r\n          <AIReportSection />\r\n        </>\r\n      )}\r\n      {selectedView === 'details' && (\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\r\n            Detailed Score History\r\n          </h2>\r\n          {/* Add detailed charts and history here */}\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Full score history and trending analysis coming soon...\r\n          </p>\r\n        </div>\r\n      )}\r\n      {selectedView === 'simulator' && <SmartSimulator />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientScores;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientPortal\\index.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ClientProfile.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Clients.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ContactReports.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'contacts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":29,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { db } from '@/lib/firebase';\r\nimport { collection, onSnapshot } from 'firebase/firestore';\r\nimport { Bar, Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst ContactReports = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const unsub = onSnapshot(collection(db, 'contacts'), (snap) => {\r\n      setContacts(snap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  // Example chart data\r\n  const weeklyData = {\r\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n    datasets: [{ label: 'Contacts Added', data: [5, 8, 6, 10, 7, 4, 3], backgroundColor: 'rgba(59,130,246,0.5)' }]\r\n  };\r\n  const conversionData = {\r\n    labels: ['Lead', 'Prospect', 'Client'],\r\n    datasets: [{ label: 'Conversions', data: [30, 15, 8], backgroundColor: ['#fbbf24', '#34d399', '#3b82f6'] }]\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-8\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">Contact Reports & Analytics</h1>\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"text-lg font-semibold mb-2\">Weekly Contact Summary</h2>\r\n        <Bar data={weeklyData} />\r\n      </div>\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"text-lg font-semibold mb-2\">Conversion Analysis</h2>\r\n        <Bar data={conversionData} />\r\n      </div>\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"text-lg font-semibold mb-2\">Contact Trends</h2>\r\n        <Line data={weeklyData} />\r\n      </div>\r\n      {/* ...more charts and metrics... */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactReports;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Contacts.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\CreditScores.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Dashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'BellIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'setDocuments' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":36,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'logoDark' is not defined.","line":168,"column":78,"nodeType":"Identifier","messageId":"undef","endLine":168,"endColumn":86},{"ruleId":"no-undef","severity":2,"message":"'logoLight' is not defined.","line":168,"column":89,"nodeType":"Identifier","messageId":"undef","endLine":168,"endColumn":98}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { useAuth } from '@/auth/AuthProvider';\r\nimport { doc, getDoc, collection, query, where, orderBy, onSnapshot, getDocs } from 'firebase/firestore';\r\nimport { db } from '../lib/firebase';\r\nimport { \r\n  ChartBarIcon, \r\n  DocumentTextIcon,\r\n  FolderIcon,\r\n  BellIcon,\r\n  ArrowTrendingUpIcon\r\n} from '@heroicons/react/24/outline';\r\nimport BrandLogo from \"@/components/BrandLogo\";\r\nimport { useTheme } from '@/theme/ThemeProvider';\r\n\r\n// --- ON-SCREEN BEACON ---\r\nconst Beacon = () => (\r\n  <div style={{background:'#e0e7ff',color:'#3730a3',padding:'4px 0',textAlign:'center',fontWeight:'bold',letterSpacing:1,marginBottom:12,zIndex:9999}}>\r\n    [BEACON: Dashboard.jsx]\r\n  </div>\r\n);\r\n\r\nconst quickActions = [\r\n  { label: 'Credit Scores', href: '/client/reports', color: 'bg-blue-600' },\r\n  { label: 'Dispute Letters', href: '/client/disputes', color: 'bg-yellow-500' },\r\n  { label: 'Client Management', href: '/contacts', color: 'bg-green-600' },\r\n  { label: 'Client Portal', href: '/client', color: 'bg-purple-600' },\r\n];\r\n\r\nexport default function Dashboard() {\r\n  const { user } = useAuth();\r\n  const { theme, setTheme } = useTheme();\r\n  const [clientData, setClientData] = useState(null);\r\n  const [creditScores, setCreditScores] = useState([]);\r\n  const [disputes, setDisputes] = useState([]);\r\n  const [documents, setDocuments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [score, setScore] = useState(null);\r\n  const [activity, setActivity] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const loadClientData = async () => {\r\n      try {\r\n        const clientDoc = await getDoc(doc(db, 'clients', user.uid));\r\n        if (clientDoc.exists()) {\r\n          setClientData(clientDoc.data());\r\n        } else {\r\n          const q = query(collection(db, 'contacts'), where('email', '==', user.email));\r\n          const snapshot = await getDocs(q);\r\n          if (!snapshot.empty) {\r\n            setClientData(snapshot.docs[0].data());\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading client data:', error);\r\n      }\r\n    };\r\n\r\n    const scoresQuery = query(\r\n      collection(db, 'creditScores'),\r\n      where('clientEmail', '==', user.email),\r\n      orderBy('date', 'desc')\r\n    );\r\n    const unsubscribeScores = onSnapshot(scoresQuery, (snapshot) => {\r\n      const scoresData = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      setCreditScores(scoresData);\r\n    });\r\n\r\n    const disputesQuery = query(\r\n      collection(db, 'disputeLetters'),\r\n      where('recipientEmail', '==', user.email),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n    const unsubscribeDisputes = onSnapshot(disputesQuery, (snapshot) => {\r\n      const disputesData = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      setDisputes(disputesData);\r\n    });\r\n\r\n    loadClientData();\r\n    setLoading(false);\r\n\r\n    return () => {\r\n      unsubscribeScores();\r\n      unsubscribeDisputes();\r\n    };\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (creditScores.length > 0) {\r\n      setScore(creditScores[0]?.score);\r\n    }\r\n  }, [creditScores]);\r\n\r\n  useEffect(() => {\r\n    if (disputes.length > 0) {\r\n      const recentActivity = disputes.map(dispute => ({\r\n        type: 'dispute',\r\n        status: dispute.status,\r\n        bureau: dispute.bureau\r\n      }));\r\n      setActivity(recentActivity);\r\n    }\r\n  }, [disputes]);\r\n\r\n  const getScoreImprovement = () => {\r\n    if (creditScores.length < 2) return 0;\r\n    const latest = creditScores[0]?.score || 0;\r\n    const previous = creditScores[1]?.score || 0;\r\n    return latest - previous;\r\n  };\r\n\r\n  const stats = [\r\n    {\r\n      title: 'Current Credit Score',\r\n      value: creditScores[0]?.score || '---',\r\n      change: getScoreImprovement(),\r\n      icon: ChartBarIcon,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      title: 'Active Disputes',\r\n      value: disputes.filter(d => d.status !== 'resolved').length,\r\n      icon: DocumentTextIcon,\r\n      color: 'green'\r\n    },\r\n    {\r\n      title: 'Documents',\r\n      value: documents.length,\r\n      icon: FolderIcon,\r\n      color: 'purple'\r\n    }\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n      {import.meta.env.DEV && <Beacon />}\r\n      <header className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 shadow mb-6\">\r\n        <BrandLogo portalType=\"admin\" theme={theme === 'dark' ? 'dark' : 'default'} style={{height:48}} />\r\n        <button\r\n          className=\"ml-4 px-2 py-1 rounded bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200\"\r\n          onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\r\n          aria-label=\"Toggle theme\"\r\n        >\r\n          {theme === 'dark' ? '🌙' : '☀️'}\r\n        </button>\r\n      </header>\r\n\r\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\r\n        {/* Header with logo and theme toggle */}\r\n        <div className=\"flex items-center justify-between mb-8\">\r\n          <img\r\n            src={window.matchMedia('(prefers-color-scheme: dark)').matches ? logoDark : logoLight}\r\n            alt=\"Speedy Credit Repair Logo\"\r\n            className=\"h-10 md:h-10\"\r\n            style={{ maxHeight: 40 }}\r\n          />\r\n        </div>\r\n\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          className=\"bg-gradient-to-r from-blue-600 to-green-600 rounded-xl p-8 mb-8 text-white\"\r\n        >\r\n          <h1 className=\"text-3xl font-bold mb-2\">\r\n            Welcome back, {clientData?.firstName || user?.displayName || user?.email?.split('@')[0] || 'Client'}!\r\n          </h1>\r\n          <p className=\"text-xl opacity-90\">\r\n            Track your credit repair journey and monitor your progress\r\n          </p>\r\n          {getScoreImprovement() > 0 && (\r\n            <div className=\"mt-4 inline-flex items-center bg-white/20 backdrop-blur rounded-lg px-4 py-2\">\r\n              <ArrowTrendingUpIcon className=\"h-5 w-5 mr-2\" />\r\n              <span>Your score improved by {getScoreImprovement()} points!</span>\r\n            </div>\r\n          )}\r\n        </motion.div>\r\n\r\n        {/* Quick Actions */}\r\n        <div className=\"grid grid-cols-2 gap-4 mb-8\">\r\n          {quickActions.map((action) => (\r\n            <a\r\n              key={action.label}\r\n              href={action.href}\r\n              className={`rounded-lg p-4 text-white font-semibold text-center shadow transition-colors ${action.color} hover:opacity-90 dark:bg-opacity-80`}\r\n            >\r\n              {action.label}\r\n            </a>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\r\n          {stats.map((stat, index) => (\r\n            <motion.div\r\n              key={stat.title}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: index * 0.1 }}\r\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n            >\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className={`p-3 rounded-lg bg-${stat.color}-100 dark:bg-${stat.color}-900/30`}>\r\n                  <stat.icon className={`h-6 w-6 text-${stat.color}-600 dark:text-${stat.color}-400`} />\r\n                </div>\r\n                {stat.change > 0 && (\r\n                  <span className=\"text-green-600 text-sm font-semibold\">\r\n                    +{stat.change}\r\n                  </span>\r\n                )}\r\n              </div>\r\n              <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\r\n                {stat.value}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                {stat.title}\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Credit Score Card */}\r\n        <div className=\"mb-6 bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <span className=\"font-semibold text-gray-700 dark:text-gray-200\">Credit Score:</span> <span className=\"text-xl font-bold text-blue-700 dark:text-blue-300\">{score ?? 'N/A'}</span>\r\n        </div>\r\n\r\n        {/* Recent Activity */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <h2 className=\"text-lg font-semibold mb-2 text-gray-800 dark:text-gray-100\">Recent Activity</h2>\r\n          {activity.length === 0 ? <div className=\"text-gray-500 dark:text-gray-400\">No recent activity.</div> : (\r\n            <ul>\r\n              {activity.map((item, i) => (\r\n                <li key={i} className=\"mb-1 text-gray-700 dark:text-gray-200\">\r\n                  {item.type === 'dispute' ? `Dispute: ${item.status}` : `Document: ${item.name}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\DisputeCenter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\DisputeLetters.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Disputes.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Documents.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\DripCampaign.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\EContracts.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'addDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'updateDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":48},{"ruleId":"no-unused-vars","severity":1,"message":"'doc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"../lib/firebase\";\r\nimport { collection, addDoc, getDocs, updateDoc, doc } from \"firebase/firestore\";\r\nimport ContractEditor from \"../components/ContractEditor\";\r\n\r\nconst EContracts = () => {\r\n  const [contracts, setContracts] = useState([]);\r\n  const [showEditor, setShowEditor] = useState(false);\r\n  const [selectedContract, setSelectedContract] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchContracts = async () => {\r\n      const querySnapshot = await getDocs(collection(db, \"contracts\"));\r\n      setContracts(querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n    };\r\n    fetchContracts();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto py-8 px-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">E-Contracts & Document Completion</h1>\r\n      <button className=\"mb-4 px-4 py-2 bg-blue-600 text-white rounded\" onClick={() => { setShowEditor(true); setSelectedContract(null); }}>New Contract</button>\r\n      <div className=\"space-y-4\">\r\n        {contracts.map(contract => (\r\n          <div key={contract.id} className=\"p-4 bg-white rounded shadow flex justify-between items-center\">\r\n            <div>\r\n              <div className=\"font-semibold\">{contract.title}</div>\r\n              <div className=\"text-xs text-gray-500\">Status: {contract.status}</div>\r\n            </div>\r\n            <button className=\"text-blue-600 underline\" onClick={() => { setShowEditor(true); setSelectedContract(contract); }}>View/Edit</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {showEditor && (\r\n        <ContractEditor contract={selectedContract} onClose={() => setShowEditor(false)} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EContracts;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\EditClient.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\FeaturesTutorials.jsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":10,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[396,534],"text":"Browse all CleverCRM features below. Click &quot;Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[396,534],"text":"Browse all CleverCRM features below. Click &ldquo;Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[396,534],"text":"Browse all CleverCRM features below. Click &#34;Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[396,534],"text":"Browse all CleverCRM features below. Click &rdquo;Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":10,"column":98,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[396,534],"text":"Browse all CleverCRM features below. Click \"Show Tutorial&quot; to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[396,534],"text":"Browse all CleverCRM features below. Click \"Show Tutorial&ldquo; to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[396,534],"text":"Browse all CleverCRM features below. Click \"Show Tutorial&#34; to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[396,534],"text":"Browse all CleverCRM features below. Click \"Show Tutorial&rdquo; to revisit or reset the onboarding/tutorial for any feature you have access to."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"usePermission\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":13,"column":33,"nodeType":"Identifier","endLine":13,"endColumn":46}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { FEATURES } from \"../features\";\r\nimport FeatureTutorial from \"../components/FeatureTutorial\";\r\nimport { usePermission } from \"../usePermission\";\r\n\r\nconst FeaturesTutorials = () => {\r\n  return (\r\n    <div className=\"max-w-3xl mx-auto py-10 px-4\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Features & Tutorials</h1>\r\n      <p className=\"mb-8 text-gray-600\">Browse all CleverCRM features below. Click \"Show Tutorial\" to revisit or reset the onboarding/tutorial for any feature you have access to.</p>\r\n      <div className=\"space-y-6\">\r\n        {FEATURES.map((feature) => {\r\n          const hasPermission = usePermission(feature.id);\r\n          return (\r\n            <div key={feature.id} className=\"bg-white rounded-lg shadow p-5 flex flex-col md:flex-row md:items-center md:justify-between opacity-100\">\r\n              <div>\r\n                <div className=\"text-xl font-semibold\">{feature.label}</div>\r\n                {/* Optionally add a description here if available */}\r\n              </div>\r\n              <div className=\"mt-3 md:mt-0\">\r\n                {hasPermission ? (\r\n                  <FeatureTutorial featureId={feature.id} steps={feature.tutorialSteps || []} showResetButton />\r\n                ) : (\r\n                  <span className=\"text-gray-400 italic\">No access</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeaturesTutorials;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Help.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Home.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ImportCSV.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Leads.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Location.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Login.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'k' is defined but never used. Allowed unused args must match /^_/u.","line":38,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":15},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":150,"column":30,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5642,5692],"text":"\r\n              This domain isn&apos;t authorized. Add "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5642,5692],"text":"\r\n              This domain isn&lsquo;t authorized. Add "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5642,5692],"text":"\r\n              This domain isn&#39;t authorized. Add "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5642,5692],"text":"\r\n              This domain isn&rsquo;t authorized. Add "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { useAuth } from \"../auth/AuthProvider\";\r\nimport { auth, googleProvider } from \"@/lib/firebase\";\r\nimport { \r\n  signInWithEmailAndPassword, \r\n  signInWithRedirect, \r\n  getRedirectResult, \r\n  signInWithPopup,\r\n  onAuthStateChanged \r\n} from \"firebase/auth\";\r\nimport BrandLogo from \"@/components/BrandLogo\";\r\nimport { useTheme } from '@/theme/ThemeProvider';\r\n\r\n// --- ON-SCREEN BEACON ---\r\nconst Beacon = () => (\r\n  <div style={{background:'#fef9c3',color:'#92400e',padding:'4px 0',textAlign:'center',fontWeight:'bold',letterSpacing:1,marginBottom:12,zIndex:9999}}>\r\n    [BEACON: Login.jsx]\r\n  </div>\r\n);\r\n\r\nconst env = import.meta.env || {};\r\nconst fbEnv = {\r\n  API_KEY: env.VITE_FIREBASE_API_KEY,\r\n  AUTH_DOMAIN: env.VITE_FIREBASE_AUTH_DOMAIN,\r\n  PROJECT_ID: env.VITE_FIREBASE_PROJECT_ID,\r\n  STORAGE_BUCKET: env.VITE_FIREBASE_STORAGE_BUCKET,\r\n  MSG_SENDER_ID: env.VITE_FIREBASE_MESSAGING_SENDER_ID,\r\n  APP_ID: env.VITE_FIREBASE_APP_ID,\r\n};\r\n\r\nconst mask = (v) => {\r\n  if (!v) return \"(missing)\";\r\n  if (v.length <= 7) return v;\r\n  return `${v.slice(0,3)}…${v.slice(-3)}`;\r\n};\r\n\r\nconst allPresent = Object.entries(fbEnv).every(([k, v]) => !!v);\r\nconst isLocalhost = window.location.hostname === \"localhost\";\r\n\r\nexport default function Login() {\r\n  const { user, loading, claims } = useAuth();\r\n  const lastAuthError = claims?._lastAuthError;\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const from = location.state?.from?.pathname || \"/dashboard\";\r\n  const [busy, setBusy] = useState(false);\r\n  const [showEnv, setShowEnv] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [pw, setPw] = useState(\"\");\r\n  const [status, setStatus] = useState(\"Idle\");\r\n  const [unauthDomain, setUnauthDomain] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const { theme, setTheme } = useTheme();\r\n\r\n  // If already signed in (including after Google redirect), leave /login immediately\r\n  useEffect(() => {\r\n    const unsub = onAuthStateChanged(auth, (u) => {\r\n      if (u) navigate(\"/dashboard\", { replace: true });\r\n    });\r\n    return () => unsub();\r\n  }, [navigate]);\r\n\r\n  // Handle Google redirect result\r\n  useEffect(() => {\r\n    getRedirectResult(auth)\r\n      .then((result) => {\r\n        if (result) {\r\n          setStatus(`Google OK: ${result.user.uid}`);\r\n          navigate('/dashboard');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Redirect sign-in error:', error);\r\n        setError('Failed to complete Google sign-in');\r\n        setStatus(`Google redirect error: ${error?.code || error?.message}`);\r\n      });\r\n  }, [navigate]);\r\n\r\n  const handleGoogle = async () => {\r\n    try {\r\n      console.log(\"[Login] Google button clicked\");\r\n      setBusy(true);\r\n      setError(\"\");\r\n      \r\n      if (isLocalhost) {\r\n        setStatus(\"Opening Google popup…\");\r\n        const { user } = await signInWithPopup(auth, googleProvider);\r\n        setStatus(`Google OK (popup): ${user.uid}`);\r\n        navigate(from, { replace: true });\r\n      } else {\r\n        setStatus(\"Redirecting to Google…\");\r\n        await signInWithRedirect(auth, googleProvider);\r\n      }\r\n    } catch (e) {\r\n      console.error(\"[Login] Google sign-in error:\", e);\r\n      setStatus(`Google error: ${e?.code || e?.message}`);\r\n      setError('Failed to start Google sign-in');\r\n      if (e?.code === \"auth/unauthorized-domain\" || (typeof e?.message === \"string\" && e.message.includes(\"UNAUTHORIZED_DOMAIN\"))) {\r\n        setUnauthDomain(true);\r\n      }\r\n    } finally {\r\n      setBusy(false);\r\n    }\r\n  };\r\n\r\n  const doEmail = async () => {\r\n    setStatus(\"Signing in with email…\");\r\n    setError(\"\");\r\n    try {\r\n      const { user } = await signInWithEmailAndPassword(auth, email, pw);\r\n      setStatus(`Email OK: ${user.uid}`);\r\n      navigate(from, { replace: true });\r\n    } catch (e) {\r\n      console.error(\"[Auth] Email error:\", e);\r\n      setStatus(`Email error: ${e?.code || e?.message}`);\r\n      setError('Failed to sign in with email');\r\n      if (e?.code === \"auth/unauthorized-domain\" || (typeof e?.message === \"string\" && e.message.includes(\"UNAUTHORIZED_DOMAIN\"))) {\r\n        setUnauthDomain(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) return <div style={{ padding: 24 }}>Checking session…</div>;\r\n\r\n  // Show already signed in hint\r\n  const alreadySignedIn = auth.currentUser;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"min-h-screen flex flex-col items-center justify-center bg-gray-50 dark:bg-gray-900\">\r\n        {import.meta.env.DEV && <Beacon />}\r\n        <div className=\"w-full max-w-md bg-white dark:bg-gray-800 rounded shadow p-8 flex flex-col items-center\">\r\n          <BrandLogo variant=\"client\" theme={theme === 'dark' ? 'dark' : 'light'} style={{height:48, marginBottom:16}} />\r\n          <button\r\n            className=\"mb-4 px-2 py-1 rounded bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200\"\r\n            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\r\n            aria-label=\"Toggle theme\"\r\n          >\r\n            {theme === 'dark' ? '🌙' : '☀️'}\r\n          </button>\r\n          {error && <div className=\"text-red-500 text-sm mt-2\">{error}</div>}\r\n          {status && (\r\n            <div className=\"mt-3 text-sm rounded-md border border-amber-200 bg-amber-50 px-3 py-2 text-amber-800\">\r\n              {status}\r\n            </div>\r\n          )}\r\n          {unauthDomain && (\r\n            <div className=\"mt-3 text-sm rounded-md border-2 border-amber-400 bg-amber-50 px-3 py-2 text-amber-900 font-semibold\">\r\n              This domain isn't authorized. Add <code className=\"px-1 py-0.5 bg-amber-100 rounded\">{window.location.host}</code> in\r\n              <span className=\"font-semibold\"> Firebase → Authentication → Settings → Authorized domains</span>.\r\n            </div>\r\n          )}\r\n          {lastAuthError && (\r\n            <div className=\"mt-3 text-sm rounded-md border border-red-200 bg-red-50 px-3 py-2 text-red-800\">\r\n              <strong>Sign-in error:</strong> <code>{lastAuthError.code}</code>\r\n              <div className=\"mt-1\">{lastAuthError.message}</div>\r\n            </div>\r\n          )}\r\n          {alreadySignedIn && (\r\n            <div className=\"mt-3 text-xs text-green-700 text-center\">\r\n              Already signed in as <span className=\"font-semibold\">{alreadySignedIn.email}</span> &rarr; <span className=\"underline\">Continue</span>\r\n            </div>\r\n          )}\r\n          <button\r\n            onClick={handleGoogle}\r\n            disabled={busy}\r\n            className=\"mt-5 w-full inline-flex items-center justify-center gap-2 rounded-lg border border-slate-200 bg-white hover:bg-slate-50 px-4 py-2.5 text-slate-800 shadow-sm disabled:opacity-60\"\r\n          >\r\n            <svg className=\"h-5 w-5\" viewBox=\"0 0 533.5 544.3\" aria-hidden=\"true\">\r\n              <g><path fill=\"#4285F4\" d=\"M533.5 278.4c0-17.4-1.6-34.1-4.6-50.2H272v95h146.9c-6.3 34.1-25.1 62.9-53.6 82.2l87 67.7c50.7-46.8 80.2-115.7 80.2-194.7z\"/><path fill=\"#34A853\" d=\"M272 544.3c72.6 0 133.7-24.1 178.3-65.5l-87-67.7c-24.2 16.2-55.1 25.8-91.3 25.8-70.2 0-129.7-47.4-151-111.1l-89.5 69.2c44.7 88.1 137.2 149.3 240.5 149.3z\"/><path fill=\"#FBBC05\" d=\"M121 325.8c-10.2-30.1-10.2-62.7 0-92.8l-89.5-69.2C7.1 210.1 0 242.5 0 278.4c0 35.9 7.1 68.3 31.5 114.6l89.5-69.2z\"/><path fill=\"#EA4335\" d=\"M272 107.7c39.6 0 75.1 13.6 103.1 40.2l77.4-77.4C405.7 24.1 344.6 0 272 0 168.7 0 76.2 61.2 31.5 163.8l89.5 69.2C142.3 155.1 201.8 107.7 272 107.7z\"/></g>\r\n            </svg>\r\n            Continue with Google\r\n          </button>\r\n          <div className=\"relative my-5\">\r\n            <div className=\"absolute inset-0 flex items-center\"><div className=\"w-full border-t border-slate-200\"/></div>\r\n            <div className=\"relative flex justify-center\">\r\n              <span className=\"bg-white px-3 text-xs uppercase tracking-wide text-slate-400\">or</span>\r\n            </div>\r\n          </div>\r\n          <label className=\"block text-sm font-medium text-slate-700\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            className=\"mt-1 w-full rounded-lg border-slate-300 focus:border-indigo-500 focus:ring-indigo-500\"\r\n            placeholder=\"name@company.com\"\r\n            autoComplete=\"email\"\r\n          />\r\n          <label className=\"mt-3 block text-sm font-medium text-slate-700\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            value={pw}\r\n            onChange={(e) => setPw(e.target.value)}\r\n            className=\"mt-1 w-full rounded-lg border-slate-300 focus:border-indigo-500 focus:ring-indigo-500\"\r\n            placeholder=\"••••••••\"\r\n            autoComplete=\"current-password\"\r\n          />\r\n          <button\r\n            onClick={doEmail}\r\n            disabled={busy}\r\n            className=\"mt-5 w-full rounded-lg bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2.5 shadow-sm disabled:opacity-60\"\r\n          >\r\n            Sign in with Email\r\n          </button>\r\n          <p className=\"mt-4 text-center text-xs text-slate-500\">\r\n            Trouble signing in? Clear site data (Application → Storage) and try again.\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Env Debug Toggle and Panel (unchanged, keep at root for dev) */}\r\n      <button\r\n        onClick={() => setShowEnv(s => !s)}\r\n        className=\"fixed right-3 bottom-3 px-2.5 py-1.5 rounded-md z-[9999] shadow bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-100\"\r\n      >\r\n        Env\r\n      </button>\r\n      {showEnv && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            right: 12,\r\n            bottom: 52,\r\n            width: 360,\r\n            maxWidth: \"90vw\",\r\n            padding: 12,\r\n            borderRadius: 8,\r\n            border: \"1px solid #e5e5e5\",\r\n            background: \"#fafafa\",\r\n            boxShadow: \"0 2px 14px rgba(0,0,0,0.18)\",\r\n            fontFamily: \"ui-monospace, SFMono-Regular, Menlo, monospace\",\r\n            fontSize: 12,\r\n            color: \"#222\",\r\n            zIndex: 9999\r\n          }}\r\n        >\r\n          <div style={{marginBottom: 8, fontWeight: 600}}>\r\n            Firebase Env Status: {allPresent ? \"✅ Configured\" : \"❌ Missing keys\"}\r\n          </div>\r\n          <div>PROJECT_ID: <code>{fbEnv.PROJECT_ID || \"(missing)\"}</code></div>\r\n          <div>AUTH_DOMAIN: <code>{fbEnv.AUTH_DOMAIN || \"(missing)\"}</code></div>\r\n          <div>API_KEY: <code>{mask(fbEnv.API_KEY)}</code></div>\r\n          <div>STORAGE_BUCKET: <code>{fbEnv.STORAGE_BUCKET || \"(missing)\"}</code></div>\r\n          <div>MSG_SENDER_ID: <code>{mask(fbEnv.MSG_SENDER_ID || \"\")}</code></div>\r\n          <div>APP_ID: <code>{mask(fbEnv.APP_ID || \"\")}</code></div>\r\n          <div style={{marginTop:8, opacity:0.8}}>\r\n            Tip: Values come from <code>.env</code>. After edits, run a fresh build & deploy.\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\LoginTest.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ManageRoles.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\NotFound.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\OpenAI.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Permissions.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Reports.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Settings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\Setup.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\ThemeSamples.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'setNumber' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport Card from \"../components/ui/card\";\r\nimport Button from \"../components/ui/button\";\r\nimport { heroicons } from '../components/SampleIconsHeroicons';\r\nimport { materialIcons } from '../components/SampleIconsMaterial';\r\nimport { fontAwesomeIcons } from '../components/SampleIconsFontAwesome';\r\nimport { remixIcons } from '../components/SampleIconsRemix';\r\n\r\nconst iconSets = [\r\n  { name: 'Heroicons', icons: heroicons },\r\n  { name: 'Material Icons', icons: materialIcons },\r\n  { name: 'Font Awesome', icons: fontAwesomeIcons },\r\n  { name: 'Remix Icon', icons: remixIcons },\r\n];\r\n\r\nfunction SampleStatsWidget({ color, icon, title, value, dark, font }) {\r\n  return (\r\n    <div className={`flex items-center p-4 rounded-2xl shadow-lg ${color} mb-4 ${dark ? 'text-white' : 'text-blue-900'}`}\r\n      style={dark ? {background: 'rgba(30,41,59,0.85)', border: '1px solid #38bdf8', fontFamily: font} : {fontFamily: font}}>\r\n      <div className=\"text-3xl mr-4 cursor-pointer hover:scale-110 transition-transform\" title={title}>{icon}</div>\r\n      <div>\r\n        <div className=\"text-lg font-semibold\" style={{fontFamily: font}}>{title}</div>\r\n        <div className=\"text-2xl font-bold\" style={{fontFamily: font}}>{value}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SampleWidgetSet({ setNumber, mode, logoSrc, dark, bgClass, font, iconSet }) {\r\n  return (\r\n    <div className={`rounded-3xl p-8 shadow-2xl border-2 border-cyan-200/60 relative overflow-hidden animate-fade-in flex flex-col items-center ${bgClass}`} style={{minWidth:320}}>\r\n      {logoSrc && <img src={logoSrc} alt=\"Logo\" style={{width:64, height:64, marginBottom:16, opacity:0.85, background:'none'}} />}\r\n      <h2 className={`text-2xl font-extrabold mb-2 ${dark ? 'text-cyan-200' : 'text-cyan-700'}`} style={{fontFamily: font}}>{iconSet.name} - {mode.charAt(0).toUpperCase() + mode.slice(1)} Mode</h2>\r\n      <div className=\"grid grid-cols-1 gap-3 w-full mb-4\">\r\n        {iconSet.icons.map((item, i) => (\r\n          <SampleStatsWidget key={i} color={dark ? 'bg-cyan-900 bg-opacity-60' : 'bg-cyan-100'} icon={item.icon} title={item.label} value={128 + i*7} dark={dark} font={font} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Dynamically select logo based on mode\r\nconst getLogoSrc = (mode) => {\r\n  if (mode === 'dark' || mode === 'medium') return '/logo-dark.png';\r\n  return '/logo.png';\r\n};\r\n\r\nconst themeSamples = [];\r\nconst modes = [\r\n  { mode: 'light', dark: false, bgClass: 'imagineer-tomorrowland-light', font: 'Inter, Arial, sans-serif' },\r\n  { mode: 'medium', dark: true, bgClass: 'imagineer-tomorrowland-medium', font: 'Nunito, Arial, sans-serif' },\r\n  { mode: 'dark', dark: true, bgClass: 'imagineer-tomorrowland-dark', font: 'Orbitron, Arial, sans-serif' },\r\n];\r\niconSets.forEach(iconSet => {\r\n  modes.forEach(({ mode, dark, bgClass, font }, idx) => {\r\n    // Only show Font Awesome as the main icon set\r\n    if (iconSet.name !== 'Font Awesome') return;\r\n    themeSamples.push({\r\n      name: `${iconSet.name} - ${mode.charAt(0).toUpperCase() + mode.slice(1)} Mode`,\r\n      sample: <SampleWidgetSet setNumber={idx+1} mode={mode} logoSrc={getLogoSrc(mode)} dark={dark} bgClass={bgClass} font={font} iconSet={iconSet} />,\r\n      previewClass: `${iconSet.name.replace(/\\s/g,'').toLowerCase()}-${mode}`,\r\n    });\r\n  });\r\n});\r\n\r\nexport default function ThemeSamples() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const filteredSamples = themeSamples.filter(t => t.name.toLowerCase().includes(mode));\r\n  return (\r\n    <div className=\"max-w-5xl scr-mx-auto py-10 px-4\">\r\n      <h1 className=\"text-3xl font-bold scr-heading scr-mb-6\">Theme Samples (Font Awesome Only)</h1>\r\n      <div className=\"flex gap-4 scr-mb-6\">\r\n        <Button onClick={() => setMode(\"light\")} className={mode === \"light\" ? \"scr-btn bg-blue-500 text-white\" : \"scr-btn\"}>Light Mode</Button>\r\n        <Button onClick={() => setMode(\"medium\")} className={mode === \"medium\" ? \"scr-btn bg-cyan-700 text-white\" : \"scr-btn\"}>Medium Mode</Button>\r\n        <Button onClick={() => setMode(\"dark\")} className={mode === \"dark\" ? \"scr-btn bg-gray-900 text-white\" : \"scr-btn\"}>Dark Mode</Button>\r\n      </div>\r\n      <div className={mode === \"dark\" ? \"dark\" : \"\"}>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-10\">\r\n          {filteredSamples.map((theme, i) => (\r\n            <Card key={i} className={`p-0 overflow-hidden ${theme.previewClass} relative`}>\r\n              <div className=\"p-6\">\r\n                <h2 className=\"text-xl font-bold mb-2\">{theme.name}</h2>\r\n              </div>\r\n              <div className=\"p-6 pt-0\">{theme.sample}</div>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {/* Sample theme CSS (temporary, for preview only) */}\r\n      <style>{`\r\n        .imagineer-tomorrowland-light { background: linear-gradient(120deg, #f8fafc 0%, #e0f7fa 100%); }\r\n        .imagineer-tomorrowland-dark { background: linear-gradient(120deg, #232526 0%, #334155 100%); }\r\n        .imagineer-tomorrowland-medium { background: linear-gradient(120deg, #374151 0%, #64748b 100%); }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\pages\\UserManagement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\routes\\AdminRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\routes\\Logout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\routes\\PermissionRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\routes\\PrivateRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\routes\\ProtectedRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\services\\aiLeadScoring.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\services\\authService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\services\\clientService.js","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":25,"column":3,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":30,"endColumn":4},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":34,"column":3,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":39,"endColumn":4},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":43,"column":3,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":49,"endColumn":4},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":53,"column":3,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":58,"endColumn":4},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":62,"column":3,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":67,"endColumn":4}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/clientService.js\r\nimport { db } from \"@/lib/firebase\";\r\nimport {\r\n  collection,\r\n  doc,\r\n  getDocs,\r\n  getDoc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  onSnapshot,\r\n  query\r\n} from 'firebase/firestore';\r\n\r\nconst clientsCollection = collection(db, 'clients');\r\n// Real-time subscription for clients\r\nexport function subscribeClients(callback, errorCallback) {\r\n  const q = query(clientsCollection);\r\n  return onSnapshot(q, (snapshot) => {\r\n    callback(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n  }, errorCallback);\r\n}\r\n\r\nexport async function createClient(data) {\r\n  try {\r\n    const docRef = await addDoc(clientsCollection, data);\r\n    return docRef.id;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getClients() {\r\n  try {\r\n    const snapshot = await getDocs(clientsCollection);\r\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getClient(id) {\r\n  try {\r\n    const docRef = doc(db, 'clients', id);\r\n    const snapshot = await getDoc(docRef);\r\n    return { id: snapshot.id, ...snapshot.data() };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateClient(id, data) {\r\n  try {\r\n    const docRef = doc(db, 'clients', id);\r\n    await updateDoc(docRef, data);\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function deleteClient(id) {\r\n  try {\r\n    const docRef = doc(db, 'clients', id);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\services\\contactService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\services\\disputeService.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'disputes' is defined but never used. Allowed unused args must match /^_/u.","line":98,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":98,"endColumn":52},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":103,"column":19,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":105,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { db } from \"@/lib/firebase\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  onSnapshot,\r\n  query,\r\n  where\r\n} from 'firebase/firestore';\r\n\r\nconst DISPUTE_STATUSES = [\r\n  'New',\r\n  'In Progress',\r\n  'Letter Sent',\r\n  'Response Received',\r\n  'Investigating',\r\n  'Resolved',\r\n  'Escalated',\r\n];\r\n\r\nconst disputesRef = collection(db, 'disputes');\r\n\r\nexport async function createDispute(data) {\r\n  try {\r\n    const docRef = await addDoc(disputesRef, data);\r\n    return docRef.id;\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Failed to create dispute');\r\n  }\r\n}\r\n\r\nexport async function getDisputes() {\r\n  try {\r\n    const snapshot = await getDocs(disputesRef);\r\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Failed to fetch disputes');\r\n  }\r\n}\r\n\r\nexport async function getDispute(disputeId) {\r\n  try {\r\n    const docSnap = await getDoc(doc(disputesRef, disputeId));\r\n    if (!docSnap.exists()) throw new Error('Dispute not found');\r\n    return { id: docSnap.id, ...docSnap.data() };\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Failed to fetch dispute');\r\n  }\r\n}\r\n\r\nexport async function updateDispute(disputeId, data) {\r\n  try {\r\n    await updateDoc(doc(disputesRef, disputeId), data);\r\n    return true;\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Failed to update dispute');\r\n  }\r\n}\r\n\r\nexport async function deleteDispute(disputeId) {\r\n  try {\r\n    await deleteDoc(doc(disputesRef, disputeId));\r\n    return true;\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Failed to delete dispute');\r\n  }\r\n}\r\n\r\nexport async function getDisputesByClient(clientId) {\r\n  try {\r\n    const q = query(disputesRef, where('clientId', '==', clientId));\r\n    const snapshot = await getDocs(q);\r\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Failed to fetch client disputes');\r\n  }\r\n}\r\n\r\nexport function subscribeToDisputes(onUpdate, onError) {\r\n  try {\r\n    return onSnapshot(disputesRef, snapshot => {\r\n      const disputes = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      onUpdate(disputes);\r\n    }, onError);\r\n  } catch (error) {\r\n    if (onError) onError(error);\r\n  }\r\n}\r\n\r\nexport function getStatusOptions() {\r\n  return DISPUTE_STATUSES;\r\n}\r\n\r\nexport async function exportDisputeReports(disputes) {\r\n  // Stub: implement actual export logic (CSV, PDF, etc.)\r\n  try {\r\n    // ...export logic...\r\n    return true;\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Failed to export dispute reports');\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\services\\firestoreService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\services\\idiqService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\services\\roleService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\services\\userService.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'addDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'deleteDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'where' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \r\n  collection, \r\n  doc, \r\n  getDocs, \r\n  getDoc, \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  where, \r\n  orderBy,\r\n  serverTimestamp,\r\n  writeBatch\r\n} from 'firebase/firestore';\r\nimport { createUserWithEmailAndPassword, sendPasswordResetEmail } from 'firebase/auth';\r\n\r\nexport class UserService {\r\n  constructor(db, auth) {\r\n    this.db = db;\r\n    this.auth = auth;\r\n  }\r\n\r\n  async createUser(userData, createdBy) {\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(\r\n        this.auth, \r\n        userData.email, \r\n        userData.password\r\n      );\r\n      const userProfile = {\r\n        uid: userCredential.user.uid,\r\n        email: userData.email,\r\n        displayName: userData.displayName,\r\n        role: userData.role || 'user',\r\n        status: 'active',\r\n        allowedFeatures: userData.allowedFeatures || [],\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp(),\r\n        createdBy,\r\n        lastLogin: null\r\n      };\r\n      await this.updateUserProfile(userCredential.user.uid, userProfile);\r\n      await sendPasswordResetEmail(this.auth, userData.email);\r\n      return userCredential.user;\r\n    } catch (error) {\r\n      console.error('Error creating user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getUsers() {\r\n    try {\r\n      const usersRef = collection(this.db, 'users');\r\n      const q = query(usersRef, orderBy('createdAt', 'desc'));\r\n      const snapshot = await getDocs(q);\r\n      return snapshot.docs.map(doc => ({ uid: doc.id, ...doc.data() }));\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getUser(uid) {\r\n    try {\r\n      const userDoc = await getDoc(doc(this.db, 'users', uid));\r\n      return userDoc.exists() ? { uid: userDoc.id, ...userDoc.data() } : null;\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateUserProfile(uid, updates) {\r\n    try {\r\n      const userRef = doc(this.db, 'users', uid);\r\n      await updateDoc(userRef, {\r\n        ...updates,\r\n        updatedAt: serverTimestamp()\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateUserPermissions(uid, allowedFeatures) {\r\n    try {\r\n      await this.updateUserProfile(uid, { allowedFeatures });\r\n    } catch (error) {\r\n      console.error('Error updating permissions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async changeUserStatus(uid, status) {\r\n    try {\r\n      await this.updateUserProfile(uid, { status });\r\n    } catch (error) {\r\n      console.error('Error changing user status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteUser(uid) {\r\n    try {\r\n      await this.updateUserProfile(uid, { \r\n        status: 'deleted',\r\n        deletedAt: serverTimestamp() \r\n      });\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async syncFeatures(features) {\r\n    try {\r\n      const batch = writeBatch(this.db);\r\n      features.forEach(feature => {\r\n        const featureRef = doc(this.db, 'features', feature.id);\r\n        batch.set(featureRef, {\r\n          id: feature.id,\r\n          label: feature.label,\r\n          category: feature.category || 'core',\r\n          description: feature.description || '',\r\n          isActive: true,\r\n          requiredRole: feature.requiredRole || 'user',\r\n          updatedAt: serverTimestamp()\r\n        }, { merge: true });\r\n      });\r\n      await batch.commit();\r\n    } catch (error) {\r\n      console.error('Error syncing features:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\skins\\SkinContext.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'allowed' logical expression could make the dependencies of useMemo Hook (at line 26) change on every render. To fix this, wrap the initialization of 'allowed' in its own useMemo() Hook.","line":12,"column":9,"nodeType":"VariableDeclarator","endLine":12,"endColumn":54},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'allowed' and 'skin'. Either include them or remove the dependency array.","line":16,"column":6,"nodeType":"ArrayExpression","endLine":16,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [allowed, role, skin]","fix":{"range":[724,730],"text":"[allowed, role, skin]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { getInitialSkin, persistSkin, SKINS, ROLE_ALLOWLIST } from \"./skinRegistry\";\r\nimport { applyTheme } from \"./applyTheme\";\r\n\r\nfunction getCurrentRole() { return localStorage.getItem(\"mcc_role\") || \"agent\"; }\r\n\r\nconst SkinCtx = createContext({ skin:\"generic\", role:\"agent\", allowed:[\"generic\"], setSkin:()=>{} });\r\n\r\nexport function SkinProvider({ children }) {\r\n  const role = getCurrentRole();\r\n  const [skin, setSkinState] = useState(getInitialSkin());\r\n  const allowed = ROLE_ALLOWLIST[role] || [\"generic\"];\r\n\r\n  useEffect(() => {\r\n    if (!allowed.includes(skin)) { setSkinState(allowed[0]); persistSkin(allowed[0]); }\r\n  }, [role]); // enforce when role changes\r\n\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute(\"data-skin\", skin);\r\n    applyTheme(skin);\r\n  }, [skin]);\r\n\r\n  const api = useMemo(() => ({\r\n    skin, role, allowed,\r\n    setSkin: (id) => { if (!SKINS[id]) return; if (!allowed.includes(id)) return; setSkinState(id); persistSkin(id); }\r\n  }), [skin, role, allowed]);\r\n\r\n  return <SkinCtx.Provider value={api}>{children}</SkinCtx.Provider>;\r\n}\r\nexport const useSkin = () => useContext(SkinCtx);\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\skins\\SkinSwitcher.jsx","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":17,"column":11,"nodeType":"BlockStatement","messageId":"unexpected","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[550,550],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":27,"column":11,"nodeType":"BlockStatement","messageId":"unexpected","endLine":27,"endColumn":13,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[856,856],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":43,"column":27,"nodeType":"Identifier","endLine":43,"endColumn":35},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":44,"column":29,"nodeType":"Identifier","endLine":44,"endColumn":37},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":45,"column":20,"nodeType":"Identifier","endLine":45,"endColumn":26},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":46,"column":18,"nodeType":"Identifier","endLine":46,"endColumn":24},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":48,"column":3,"nodeType":"Identifier","endLine":48,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":53,"column":3,"nodeType":"Identifier","endLine":53,"endColumn":12}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'theme'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [theme]","fix":{"range":[1435,1437],"text":"[theme]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n/**\r\n * Self-contained Skin Switcher:\r\n * - No imports from SkinContext (avoids casing error 1149)\r\n * - Admin-only via localStorage(\"scr.role\") — default \"admin\" so you can test\r\n * - Persists theme in localStorage(\"speedycrm.theme\")\r\n * - Toggles Tailwind \"dark\" class on <html>\r\n */\r\n\r\nfunction getUserRole() {\r\n  try {\r\n    if (typeof window !== \"undefined\") {\r\n      const r = window.__SCR_USER_ROLE__ || localStorage.getItem(\"scr.role\");\r\n      if (r) return r;\r\n    }\r\n  } catch {}\r\n  return \"admin\"; // default so FAB shows for testing\r\n}\r\n\r\nfunction applyTheme(theme) {\r\n  try {\r\n    localStorage.setItem(\"speedycrm.theme\", theme);\r\n    const root = document.documentElement;\r\n    if (theme === \"dark\") root.classList.add(\"dark\");\r\n    else root.classList.remove(\"dark\");\r\n  } catch {}\r\n}\r\n\r\nfunction getInitialTheme() {\r\n  try {\r\n    const saved = localStorage.getItem(\"speedycrm.theme\");\r\n    return saved === \"dark\" ? \"dark\" : \"light\";\r\n  } catch {\r\n    return \"light\";\r\n  }\r\n}\r\n\r\nfunction SkinSwitcher() {\r\n  const role = getUserRole();\r\n  if (role !== \"admin\") return null;\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [theme, setTheme] = useState(getInitialTheme());\r\n  const panelRef = useRef(null);\r\n  const btnRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    applyTheme(theme);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onKey(e) {\r\n      if (e.key === \"Escape\") setOpen(false);\r\n    }\r\n    function onClick(e) {\r\n      if (!open) return;\r\n      const t = e.target;\r\n      if (\r\n        panelRef.current &&\r\n        !panelRef.current.contains(t) &&\r\n        btnRef.current &&\r\n        !btnRef.current.contains(t)\r\n      ) {\r\n        setOpen(false);\r\n      }\r\n    }\r\n    window.addEventListener(\"keydown\", onKey);\r\n    window.addEventListener(\"mousedown\", onClick);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", onKey);\r\n      window.removeEventListener(\"mousedown\", onClick);\r\n    };\r\n  }, [open]);\r\n\r\n  const choose = (next) => {\r\n    setTheme(next);\r\n    applyTheme(next);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Floating FAB */}\r\n      <button\r\n        ref={btnRef}\r\n        type=\"button\"\r\n        onClick={() => setOpen((v) => !v)}\r\n        aria-haspopup=\"dialog\"\r\n        aria-expanded={open}\r\n        className=\"fixed bottom-6 right-6 z-50 inline-flex h-12 w-12 items-center justify-center rounded-full border border-gray-200 bg-white shadow-lg transition hover:shadow-xl focus:outline-none focus-visible:ring dark:border-gray-800 dark:bg-gray-900\"\r\n      >\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\"\r\n             viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n             strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n          <path d=\"M12 22a10 10 0 1 1 10-10c0 1.657-1.343 3-3 3h-1a2 2 0 0 0-2 2v1c0 1.657-1.343 3-3 3z\"/>\r\n          <circle cx=\"7.5\" cy=\"10.5\" r=\"1.5\"/>\r\n          <circle cx=\"12\" cy=\"7.5\" r=\"1.5\"/>\r\n          <circle cx=\"16.5\" cy=\"10.5\" r=\"1.5\"/>\r\n        </svg>\r\n        <span className=\"sr-only\">Open theme switcher</span>\r\n      </button>\r\n\r\n      {/* Panel */}\r\n      {open && (\r\n        <div\r\n          ref={panelRef}\r\n          role=\"dialog\"\r\n          aria-label=\"Theme Switcher\"\r\n          className=\"fixed bottom-24 right-6 z-50 w-56 rounded-xl border border-gray-200 bg-white p-2 shadow-xl dark:border-gray-800 dark:bg-gray-900\"\r\n        >\r\n          <ul className=\"space-y-1\">\r\n            <li>\r\n              <button\r\n                onClick={() => choose(\"light\")}\r\n                className=\"w-full rounded-lg px-3 py-2 text-left text-sm text-gray-800 hover:bg-gray-100 focus:outline-none focus-visible:ring dark:text-gray-200 dark:hover:bg-gray-800\"\r\n              >\r\n                Light\r\n              </button>\r\n            </li>\r\n            <li>\r\n              <button\r\n                onClick={() => choose(\"dark\")}\r\n                className=\"w-full rounded-lg px-3 py-2 text-left text-sm text-gray-800 hover:bg-gray-100 focus:outline-none focus-visible:ring dark:text-gray-200 dark:hover:bg-gray-800\"\r\n              >\r\n                Dark\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SkinSwitcher;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\skins\\applyTheme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\skins\\generic\\GenericDashboard.jsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../BrandLogo'.","line":2,"column":23,"nodeType":"Literal","endLine":2,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport BrandLogo from \"../BrandLogo\";\r\n\r\nexport default function GenericDashboard() {\r\n  return (\r\n    <div style={{ background: \"#f5f5f5\", minHeight: \"100vh\", color: \"#222\" }}>\r\n      <header style={{ background: \"#3f51b5\", color: \"#fff\", padding: \"1.5rem 2rem\", display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\r\n        {/* BrandLogo wired for generic skin, mode dark for header */}\r\n        <BrandLogo mode=\"dark\" className=\"h-10 w-auto\" />\r\n        <h1 style={{ fontSize: \"2rem\", fontWeight: 600 }}>Generic CRM Dashboard</h1>\r\n      </header>\r\n      <main style={{ padding: \"2rem\" }}>\r\n        <section style={{ background: \"#fff\", borderRadius: 16, boxShadow: \"0 2px 8px rgba(0,0,0,0.04)\", padding: \"2rem\", marginBottom: \"2rem\" }}>\r\n          <h2 style={{ color: \"#3f51b5\", fontWeight: 500 }}>Welcome</h2>\r\n          <p style={{ color: \"#555\" }}>This is the generic, white-label dashboard. All branding is neutral and suitable for resellers or partners.</p>\r\n        </section>\r\n        <section style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(220px, 1fr))\", gap: \"1.5rem\" }}>\r\n          <div style={{ background: \"#fff\", borderRadius: 12, boxShadow: \"0 1px 4px rgba(0,0,0,0.03)\", padding: \"1.5rem\" }}>\r\n            <div style={{ color: \"#3f51b5\", fontWeight: 600 }}>Active Clients</div>\r\n            <div style={{ fontSize: \"1.5rem\", fontWeight: 700, marginTop: 8 }}>98</div>\r\n          </div>\r\n          <div style={{ background: \"#fff\", borderRadius: 12, boxShadow: \"0 1px 4px rgba(0,0,0,0.03)\", padding: \"1.5rem\" }}>\r\n            <div style={{ color: \"#3f51b5\", fontWeight: 600 }}>Revenue (This Month)</div>\r\n            <div style={{ fontSize: \"1.5rem\", fontWeight: 700, marginTop: 8 }}>$8,200</div>\r\n          </div>\r\n          <div style={{ background: \"#fff\", borderRadius: 12, boxShadow: \"0 1px 4px rgba(0,0,0,0.03)\", padding: \"1.5rem\" }}>\r\n            <div style={{ color: \"#3f51b5\", fontWeight: 600 }}>Leads Generated</div>\r\n            <div style={{ fontSize: \"1.5rem\", fontWeight: 700, marginTop: 8 }}>34</div>\r\n          </div>\r\n          <div style={{ background: \"#fff\", borderRadius: 12, boxShadow: \"0 1px 4px rgba(0,0,0,0.03)\", padding: \"1.5rem\" }}>\r\n            <div style={{ color: \"#3f51b5\", fontWeight: 600 }}>Tasks Pending</div>\r\n            <div style={{ fontSize: \"1.5rem\", fontWeight: 700, marginTop: 8 }}>7</div>\r\n          </div>\r\n        </section>\r\n        <section style={{ marginTop: \"2rem\", background: \"#fff\", borderRadius: 16, boxShadow: \"0 2px 8px rgba(0,0,0,0.04)\", padding: \"2rem\" }}>\r\n          <h2 style={{ color: \"#ff9800\", fontWeight: 500 }}>Recent Activity</h2>\r\n          <ul style={{ color: \"#555\", marginTop: 12 }}>\r\n            <li>New lead added (1h ago)</li>\r\n            <li>Client file updated (3h ago)</li>\r\n            <li>Monthly report generated (1d ago)</li>\r\n          </ul>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\skins\\skinRegistry.js","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":24,"column":105,"nodeType":"BlockStatement","messageId":"unexpected","endLine":24,"endColumn":107,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[865,865],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":27,"column":80,"nodeType":"BlockStatement","messageId":"unexpected","endLine":27,"endColumn":82,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[975,975],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import GenericDashboard from './generic/GenericDashboard';\r\n\r\nexport const SKINS = {\r\n  speedy:  { label: \"Speedy (Branded)\",  type: \"brand\"   },\r\n  generic: { label: \"Generic (White-label)\", type: \"brand\", component: GenericDashboard },\r\n  alt1:    { label: \"Alt 1\",             type: \"alt\"     },\r\n  alt2:    { label: \"Alt 2\",             type: \"alt\"     },\r\n};\r\n\r\nexport const DEFAULT_SKIN = \"speedy\";\r\nconst STORE_KEY = \"mcc_skin\";\r\n\r\nexport const ROLE_ALLOWLIST = {\r\n  admin:  [\"speedy\",\"generic\",\"alt1\",\"alt2\"],\r\n  agent:  [\"generic\"],\r\n  viewer: [\"generic\"],\r\n};\r\n\r\nexport function getInitialSkin() {\r\n  if (typeof window !== \"undefined\") {\r\n    const q = new URLSearchParams(window.location.search).get(\"skin\");\r\n    if (q && SKINS[q]) return q;\r\n  }\r\n  try { const saved = localStorage.getItem(STORE_KEY); if (saved && SKINS[saved]) return saved; } catch {}\r\n  return DEFAULT_SKIN;\r\n}\r\nexport function persistSkin(id){ try{ localStorage.setItem(STORE_KEY,id);}catch{} }\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\skins\\speedy\\MosaicDashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\skins\\tokens.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\themeContext.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\theme\\ThemeProvider.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\theme\\initTheme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\usePermission.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'adminEmails'. Either include it or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":79,"suggestions":[{"desc":"Update the dependencies array to be: [user, loading, adminEmails, normalizedUserEmail, normalizedProfileEmail, userProfile?.role, userProfile?.allowedFeatures, userProfile?.status]","fix":{"range":[1012,1085],"text":"[user, loading, adminEmails, normalizedUserEmail, normalizedProfileEmail, userProfile?.role, userProfile?.allowedFeatures, userProfile?.status]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuth } from './contexts/AuthContext';\r\nimport { useMemo } from 'react';\r\n\r\nexport const usePermission = () => {\r\n  const { user, userProfile, loading } = useAuth();\r\n\r\n  // Admin email detection\r\n  const adminEmails = ['chris@speedycreditrepair.com', 'clahage@gmail.com'];\r\n  const normalizedUserEmail = (user?.email || '').toLowerCase();\r\n  const normalizedProfileEmail = (userProfile?.email || '').toLowerCase();\r\n\r\n  const authState = useMemo(() => {\r\n    const isAuthenticated = !!(user && !loading);\r\n    \r\n    const isMasterAdmin = (\r\n      adminEmails.includes(normalizedUserEmail) ||\r\n      adminEmails.includes(normalizedProfileEmail) ||\r\n      userProfile?.role === 'master_admin' ||\r\n      userProfile?.role === 'admin' ||\r\n      userProfile?.allowedFeatures?.includes('*')\r\n    );\r\n\r\n    return {\r\n      isAuthenticated,\r\n      isMasterAdmin,\r\n      isAdmin: isMasterAdmin,\r\n      userRole: userProfile?.role || 'guest',\r\n      userStatus: userProfile?.status || 'inactive'\r\n    };\r\n  }, [user, userProfile, loading, normalizedUserEmail, normalizedProfileEmail]);\r\n\r\n  // Feature access function\r\n  const hasFeatureAccess = (featureName) => {\r\n    // Always allow access if not authenticated (for login page)\r\n    if (!authState.isAuthenticated) {\r\n      return false;\r\n    }\r\n\r\n    // Master admin has access to everything\r\n    if (authState.isMasterAdmin) {\r\n      return true;\r\n    }\r\n\r\n    // Check if user status is active\r\n    if (authState.userStatus !== 'active') {\r\n      return false;\r\n    }\r\n\r\n    // Check if user has wildcard access\r\n    if (userProfile?.allowedFeatures?.includes('*')) {\r\n      return true;\r\n    }\r\n\r\n    // Check if user has specific feature access\r\n    if (userProfile?.allowedFeatures?.includes(featureName)) {\r\n      return true;\r\n    }\r\n\r\n    // Default features for regular users\r\n    const defaultUserFeatures = [\r\n      'dispute_center',\r\n      'progress_portal',\r\n      'page_contacts',\r\n      'page_clients'\r\n    ];\r\n    \r\n    if (defaultUserFeatures.includes(featureName) && authState.userRole === 'user') {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // Role-based permission check\r\n  const hasRolePermission = (permission) => {\r\n    if (authState.isMasterAdmin) {\r\n      return true;\r\n    }\r\n\r\n    // Default admin permissions\r\n    const adminPermissions = {\r\n      canCreateUsers: true,\r\n      canEditUsers: true,\r\n      canDeleteUsers: false,\r\n      canManageRoles: true\r\n    };\r\n\r\n    if (authState.userRole === 'admin' && adminPermissions[permission]) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  return {\r\n    ...authState,\r\n    userProfile,\r\n    user,\r\n    loading,\r\n    hasFeatureAccess,\r\n    hasRolePermission,\r\n    canManageUsers: () => hasRolePermission('canCreateUsers') || hasRolePermission('canEditUsers'),\r\n    canManageRoles: () => hasRolePermission('canManageRoles'),\r\n    getUserRole: () => authState.userRole,\r\n    getAvailableFeatures: () => {\r\n      if (authState.isMasterAdmin) {\r\n        return ['*', 'admin_panel', 'user_management', 'dispute_center', 'progress_portal'];\r\n      }\r\n      const userFeatures = userProfile?.allowedFeatures || [];\r\n      const defaultFeatures = ['dispute_center', 'progress_portal'];\r\n      return [...new Set([...userFeatures, ...defaultFeatures])];\r\n    },\r\n    // Legacy compatibility\r\n    roles: [],\r\n    features: []\r\n  };\r\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\CacheManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\NetworkErrorHandler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\PerformanceOptimizer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\RevenuePredictionEngine.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\activityLogger.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'getFirestore' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getFirestore, collection, addDoc, serverTimestamp } from \"firebase/firestore\";\r\n\r\nexport async function logActivity({ db, userId, action, targetType, targetId, details }) {\r\n  if (!db || !userId || !action) return;\r\n  try {\r\n    await addDoc(collection(db, \"activityLogs\"), {\r\n      userId,\r\n      action,\r\n      targetType,\r\n      targetId,\r\n      details,\r\n      timestamp: serverTimestamp(),\r\n    });\r\n  } catch (err) {\r\n    // Optionally handle/log error\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\aiCreditReportParser.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'rawReport' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// aiCreditReportParser.js\r\n// Enhanced AI-assisted parsing and dispute suggestion\r\n\r\n// In production, replace this with a call to OpenAI, Azure OpenAI, or similar LLM API\r\nexport async function parseCreditReport(rawReport) {\r\n  // Simulate advanced parsing: extract more fields, flag more dispute types, and suggest letter templates\r\n  // In real use, send rawReport to an LLM with a detailed prompt\r\n  return {\r\n    tradelines: [\r\n      {\r\n        account: 'ABC Bank',\r\n        type: 'Credit Card',\r\n        status: 'Negative',\r\n        balance: 1200,\r\n        opened: '2021-03-15',\r\n        lastReported: '2025-07-01',\r\n        remarks: '30 days late',\r\n        suggestedDispute: 'Late Payment',\r\n        letterTemplate: 'Late Payment Challenge',\r\n        aiNotes: 'Pattern of late payments detected. Recommend challenging most recent late mark.'\r\n      },\r\n      {\r\n        account: 'XYZ Loan',\r\n        type: 'Auto Loan',\r\n        status: 'Negative',\r\n        balance: 8000,\r\n        opened: '2019-11-10',\r\n        lastReported: '2025-06-15',\r\n        remarks: 'Charged off',\r\n        suggestedDispute: 'Charge-Off',\r\n        letterTemplate: 'Charge-Off Challenge',\r\n        aiNotes: 'Account charged off. Recommend requesting validation and removal.'\r\n      },\r\n      {\r\n        account: 'QRS Credit',\r\n        type: 'Credit Card',\r\n        status: 'Positive',\r\n        balance: 0,\r\n        opened: '2022-01-01',\r\n        lastReported: '2025-07-01',\r\n        remarks: 'Paid as agreed',\r\n        aiNotes: 'No dispute needed.'\r\n      }\r\n    ],\r\n    summary: '3 tradelines found, 2 negative. 2 disputes recommended.',\r\n    recommendations: [\r\n      'Challenge late payment on ABC Bank using Late Payment Challenge letter.',\r\n      'Dispute charge-off on XYZ Loan with Charge-Off Challenge letter.'\r\n    ],\r\n    aiSummary: 'AI detected 2 negative tradelines. Suggested dispute categories and letter templates for each. No action needed for positive tradelines.'\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\createCollections.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\createTestUser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\disputeUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\eSignatureProviders.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'contract' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":48},{"ruleId":"no-unused-vars","severity":1,"message":"'contract' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// eSignatureProviders.js\r\n// Abstracts e-signature provider logic for contracts\r\n\r\nexport const SIGNATURE_PROVIDERS = [\r\n  { id: 'docusign', name: 'DocuSign' },\r\n  { id: 'builtin', name: 'Built-in Signature' },\r\n  // Add more providers as needed\r\n];\r\n\r\n// Example: Initiate DocuSign envelope (serverless function or backend required for real use)\r\nexport async function sendWithDocuSign(contract) {\r\n  // Placeholder: In production, call your backend to create envelope and get signing URL\r\n  // For demo, redirect to DocuSign homepage\r\n  window.open('https://demo.docusign.net', '_blank');\r\n  // You would also update contract status in Firestore here\r\n}\r\n\r\nexport async function sendWithBuiltin(contract) {\r\n  // Placeholder for built-in signature logic\r\n  alert('Built-in signature flow coming soon!');\r\n}\r\n\r\nexport function getProviderHandler(providerId) {\r\n  switch (providerId) {\r\n    case 'docusign':\r\n      return sendWithDocuSign;\r\n    case 'builtin':\r\n      return sendWithBuiltin;\r\n    default:\r\n      return () => alert('Provider not implemented');\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\emailNotification.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\exportUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\idiqProvider.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'client' is defined but never used. Allowed unused args must match /^_/u.","line":4,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// idiqProvider.js\r\n// Utility for fetching credit reports from IDIQ (expandable for other providers)\r\n\r\nexport async function fetchIDIQReport(client) {\r\n  // Placeholder: In production, call your backend to fetch from IDIQ API using client credentials\r\n  // Return a mock report for now\r\n  return {\r\n    provider: 'IDIQ',\r\n    pulledAt: new Date().toISOString(),\r\n    rawReport: '...raw report data... (replace with real API response)',\r\n    // Add more fields as needed\r\n  };\r\n}\r\n\r\n// Add more provider functions as needed\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\leadScoring.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\migrateLeads.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\pdfParser.js","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\*.","line":88,"column":42,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":88,"endColumn":43,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2800,2801],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2800,2800],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pdfParser.js - Fixed Firebase Storage imports\r\nimport { storage, db } from \"@/lib/firebase\"; // Import from your consolidated firebase.js\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\r\nimport { doc, setDoc, serverTimestamp } from 'firebase/firestore';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\n\r\n// Configure PDF.js worker\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\n/**\r\n * Parse PDF and extract credit report data\r\n * @param {File} file - PDF file to parse\r\n * @param {string} clientId - Client ID for storage\r\n * @returns {Object} Parsed credit report data\r\n */\r\nexport const parseCreditReportPDF = async (file, clientId) => {\r\n  try {\r\n    // Upload PDF to Firebase Storage\r\n    const storageRef = ref(storage, `credit-reports/${clientId}/${file.name}`);\r\n    const snapshot = await uploadBytes(storageRef, file);\r\n    const downloadURL = await getDownloadURL(snapshot.ref);\r\n\r\n    // Load PDF for parsing\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n    \r\n    // Extract text from all pages\r\n    let fullText = '';\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n      const page = await pdf.getPage(i);\r\n      const textContent = await page.getTextContent();\r\n      const pageText = textContent.items.map(item => item.str).join(' ');\r\n      fullText += pageText + '\\n';\r\n    }\r\n\r\n    // Parse credit report data\r\n    const reportData = extractCreditData(fullText);\r\n    \r\n    // Save to Firestore\r\n    await saveCreditReport(clientId, {\r\n      ...reportData,\r\n      pdfUrl: downloadURL,\r\n      fileName: file.name,\r\n      uploadedAt: serverTimestamp()\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      data: reportData,\r\n      pdfUrl: downloadURL\r\n    };\r\n  } catch (error) {\r\n    console.error('Error parsing PDF:', error);\r\n    throw new Error(`PDF parsing failed: ${error.message}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Extract credit data from text\r\n * @param {string} text - Full text from PDF\r\n * @returns {Object} Structured credit data\r\n */\r\nconst extractCreditData = (text) => {\r\n  const data = {\r\n    personalInfo: {},\r\n    creditScores: {},\r\n    accounts: [],\r\n    inquiries: [],\r\n    publicRecords: [],\r\n    collections: []\r\n  };\r\n\r\n  // Extract credit scores (common patterns)\r\n  const scorePatterns = {\r\n    experian: /Experian[:\\s]+(\\d{3})/i,\r\n    equifax: /Equifax[:\\s]+(\\d{3})/i,\r\n    transunion: /TransUnion[:\\s]+(\\d{3})/i\r\n  };\r\n\r\n  for (const [bureau, pattern] of Object.entries(scorePatterns)) {\r\n    const match = text.match(pattern);\r\n    if (match) {\r\n      data.creditScores[bureau] = parseInt(match[1]);\r\n    }\r\n  }\r\n\r\n  // Extract SSN (partial)\r\n  const ssnMatch = text.match(/SSN[:\\s]+[\\*X-]*(\\d{4})/i);\r\n  if (ssnMatch) {\r\n    data.personalInfo.ssnLast4 = ssnMatch[1];\r\n  }\r\n\r\n  // Extract accounts\r\n  const accountPattern = /Account[:\\s]+([^\\n]+)[\\s\\S]*?Balance[:\\s]+\\$?([\\d,]+)/gi;\r\n  let accountMatch;\r\n  while ((accountMatch = accountPattern.exec(text)) !== null) {\r\n    data.accounts.push({\r\n      name: accountMatch[1].trim(),\r\n      balance: parseFloat(accountMatch[2].replace(/,/g, ''))\r\n    });\r\n  }\r\n\r\n  // Extract collections\r\n  const collectionPattern = /Collection[:\\s]+([^\\n]+)[\\s\\S]*?Amount[:\\s]+\\$?([\\d,]+)/gi;\r\n  let collectionMatch;\r\n  while ((collectionMatch = collectionPattern.exec(text)) !== null) {\r\n    data.collections.push({\r\n      agency: collectionMatch[1].trim(),\r\n      amount: parseFloat(collectionMatch[2].replace(/,/g, ''))\r\n    });\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n/**\r\n * Save credit report to Firestore\r\n * @param {string} clientId - Client ID\r\n * @param {Object} reportData - Credit report data\r\n */\r\nconst saveCreditReport = async (clientId, reportData) => {\r\n  try {\r\n    const reportRef = doc(db, 'clients', clientId, 'creditReports', Date.now().toString());\r\n    await setDoc(reportRef, reportData);\r\n    console.log('Credit report saved successfully');\r\n  } catch (error) {\r\n    console.error('Error saving credit report:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Upload PDF without parsing (for manual review)\r\n * @param {File} file - PDF file\r\n * @param {string} clientId - Client ID\r\n * @returns {string} Download URL\r\n */\r\nexport const uploadPDFOnly = async (file, clientId) => {\r\n  try {\r\n    const storageRef = ref(storage, `credit-reports/${clientId}/${file.name}`);\r\n    const snapshot = await uploadBytes(storageRef, file);\r\n    const downloadURL = await getDownloadURL(snapshot.ref);\r\n    \r\n    return downloadURL;\r\n  } catch (error) {\r\n    console.error('Error uploading PDF:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default {\r\n  parseCreditReportPDF,\r\n  uploadPDFOnly,\r\n  extractCreditData\r\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\requestChange.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { collection, addDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { useAuth } from '@/authContext';\r\n\r\nexport async function requestChange({ db, userId, action, targetType, targetId, details }) {\r\n  if (!db || !userId || !action) return;\r\n  await addDoc(collection(db, 'changeRequests'), {\r\n    userId,\r\n    action,\r\n    targetType,\r\n    targetId,\r\n    details,\r\n    status: 'pending',\r\n    timestamp: serverTimestamp(),\r\n  });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\setMyClaims.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\showSampleLead.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\smsNotification.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\SCR Project\\my-clever-crm\\src\\utils\\testLeadUpdate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
