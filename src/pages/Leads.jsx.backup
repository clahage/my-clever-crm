// Leads.jsx - Complete, corrected file for SpeedyCRM
import React, { useState, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { useAuth } from '../contexts/AuthContext';
import { Users, Search, Plus, FileText, Mail, Phone, Calendar, ChevronDown, ChevronUp, Edit, Trash2 } from 'lucide-react';

const PAGE_SIZE = 25;

const statusColors = {
  New: 'bg-blue-100 text-blue-800',
  Contacted: 'bg-yellow-100 text-yellow-800',
  Qualified: 'bg-green-100 text-green-800',
  Converted: 'bg-purple-100 text-purple-800',
  Lost: 'bg-red-100 text-red-800',
};

const Leads = () => {
  const { user } = useAuth();
  const [leads, setLeads] = useState([]);
  const [filteredLeads, setFilteredLeads] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortField, setSortField] = useState('createdAt');
  const [sortAsc, setSortAsc] = useState(false);
  const [loading, setLoading] = useState(true);
  const [page, setPage] = useState(1);
  const [showAddModal, setShowAddModal] = useState(false);
  const [newLead, setNewLead] = useState({
    name: '',
    email: '',
    phone: '',
    status: 'New',
    notes: '',
  });

  // Fetch leads from Firestore
  useEffect(() => {
    if (!user?.uid) return;
    setLoading(true);
    db.collection('leads')
      .where('ownerId', '==', user.uid)
      .orderBy('createdAt', 'desc')
      .get()
      .then(snapshot => {
        const leadsData = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
        }));
        setLeads(leadsData);
        setLoading(false);
      })
      .catch(error => {
        console.error('Error fetching leads:', error);
        setLoading(false);
      });
  }, [user]);

  // Filter and sort leads
  useEffect(() => {
    let filtered = leads;
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(
        lead =>
          lead.name?.toLowerCase().includes(term) ||
          lead.email?.toLowerCase().includes(term) ||
          lead.phone?.toLowerCase().includes(term) ||
          lead.status?.toLowerCase().includes(term)
      );
    }
    filtered = [...filtered].sort((a, b) => {
      if (sortField === 'createdAt') {
        return sortAsc
          ? a.createdAt?.seconds - b.createdAt?.seconds
          : b.createdAt?.seconds - a.createdAt?.seconds;
      }
      if (sortField === 'name') {
        return sortAsc
          ? a.name.localeCompare(b.name)
          : b.name.localeCompare(a.name);
      }
      if (sortField === 'status') {
        return sortAsc
          ? a.status.localeCompare(b.status)
          : b.status.localeCompare(a.status);
      }
      return 0;
    });
    setFilteredLeads(filtered);
    setPage(1);
  }, [leads, searchTerm, sortField, sortAsc]);

  // Pagination
  const pagedLeads = filteredLeads.slice((page - 1) * PAGE_SIZE, page * PAGE_SIZE);
  const totalPages = Math.ceil(filteredLeads.length / PAGE_SIZE);

  // Add new lead
  const handleAddLead = async e => {
    e.preventDefault();
    if (!newLead.name || !newLead.email) return;
    setLoading(true);
    try {
      const docRef = await db.collection('leads').add({
        ...newLead,
        ownerId: user.uid,
        createdAt: new Date(),
      });
      setLeads([{ id: docRef.id, ...newLead, createdAt: { seconds: Date.now() / 1000 } }, ...leads]);
      setShowAddModal(false);
      setNewLead({ name: '', email: '', phone: '', status: 'New', notes: '' });
    } catch (error) {
      console.error('Error adding lead:', error);
    }
    setLoading(false);
  };

  // Edit lead
  const handleEditLead = async (id, updatedLead) => {
    setLoading(true);
    try {
      await db.collection('leads').doc(id).update(updatedLead);
      setLeads(leads.map(lead => (lead.id === id ? { ...lead, ...updatedLead } : lead)));
    } catch (error) {
      console.error('Error editing lead:', error);
    }
    setLoading(false);
  };

  // Delete lead
  const handleDeleteLead = async id => {
    if (!window.confirm('Delete this lead?')) return;
    setLoading(true);
    try {
      await db.collection('leads').doc(id).delete();
      setLeads(leads.filter(lead => lead.id !== id));
    } catch (error) {
      console.error('Error deleting lead:', error);
    }
    setLoading(false);
  };

  // Render
  return (
    <div className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold text-gray-800 dark:text-white flex items-center">
          <Users className="h-8 w-8 mr-2 text-blue-600" />
          Leads
        </h1>
        <button
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          onClick={() => setShowAddModal(true)}
        >
          <Plus className="mr-2" /> Add Lead
        </button>
      </div>
      <div className="mb-4 flex items-center">
        <Search className="h-5 w-5 text-gray-400 mr-2" />
        <input
          type="text"
          placeholder="Search leads..."
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          className="border rounded px-3 py-2 w-full"
        />
      </div>
      <div className="mb-4 flex items-center">
        <span className="mr-2 text-gray-700">Sort by:</span>
        <button
          className={`px-2 py-1 rounded ${sortField === 'createdAt' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-700'} mr-2`}
          onClick={() => setSortField('createdAt')}
        >
          Date
        </button>
        <button
          className={`px-2 py-1 rounded ${sortField === 'name' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-700'} mr-2`}
          onClick={() => setSortField('name')}
        >
          Name
        </button>
        <button
          className={`px-2 py-1 rounded ${sortField === 'status' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-700'}`}
          onClick={() => setSortField('status')}
        >
          Status
        </button>
        <button
          className="ml-4 px-2 py-1 rounded bg-gray-200 text-gray-700"
          onClick={() => setSortAsc(!sortAsc)}
        >
          {sortAsc ? <ChevronUp className="inline h-4 w-4" /> : <ChevronDown className="inline h-4 w-4" />}
        </button>
      </div>
      {loading ? (
        <div className="text-gray-500">Loading leads...</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white dark:bg-gray-800 rounded shadow">
            <thead>
              <tr>
                <th className="py-2 px-4 text-left">Name</th>
                <th className="py-2 px-4 text-left">Email</th>
                <th className="py-2 px-4 text-left">Phone</th>
                <th className="py-2 px-4 text-left">Status</th>
                <th className="py-2 px-4 text-left">Created</th>
                <th className="py-2 px-4 text-left">Actions</th>
              </tr>
            </thead>
            <tbody>
              {pagedLeads.length === 0 ? (
                <tr>
                  <td colSpan={6} className="py-4 text-center text-gray-500">No leads found.</td>
                </tr>
              ) : (
                pagedLeads.map(lead => (
                  <tr key={lead.id} className="border-t">
                    <td className="py-2 px-4 font-semibold">{lead.name}</td>
                    <td className="py-2 px-4">
                      <Mail className="inline h-4 w-4 mr-1 text-gray-400" />
                      {lead.email}
                    </td>
                    <td className="py-2 px-4">
                      <Phone className="inline h-4 w-4 mr-1 text-gray-400" />
                      {lead.phone}
                    </td>
                    <td className="py-2 px-4">
                      <span className={`px-2 py-1 rounded ${statusColors[lead.status] || 'bg-gray-100 text-gray-700'}`}>
                        {lead.status}
                      </span>
                    </td>
                    <td className="py-2 px-4">
                      <Calendar className="inline h-4 w-4 mr-1 text-gray-400" />
                      {lead.createdAt
                        ? new Date(lead.createdAt.seconds * 1000).toLocaleDateString()
                        : '--'}
                    </td>
                    <td className="py-2 px-4">
                      <button
                        className="text-blue-600 hover:underline mr-2"
                        onClick={() => alert(JSON.stringify(lead, null, 2))}
                        title="View"
                      >
                        <FileText className="inline h-4 w-4 mr-1" /> View
                      </button>
                      <button
                        className="text-green-600 hover:underline mr-2"
                        onClick={() => handleEditLead(lead.id, lead)}
                        title="Edit"
                      >
                        <Edit className="inline h-4 w-4 mr-1" /> Edit
                      </button>
                      <button
                        className="text-red-600 hover:underline"
                        onClick={() => handleDeleteLead(lead.id)}
                        title="Delete"
                      >
                        <Trash2 className="inline h-4 w-4 mr-1" /> Delete
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      )}
      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex justify-center items-center mt-6">
          <button
            className="px-3 py-1 rounded bg-gray-200 text-gray-700 mr-2"
            disabled={page === 1}
            onClick={() => setPage(page - 1)}
          >
            Prev
          </button>
          <span className="mx-2 text-gray-700">
            Page {page} of {totalPages}
          </span>
          <button
            className="px-3 py-1 rounded bg-gray-200 text-gray-700 ml-2"
            disabled={page === totalPages}
            onClick={() => setPage(page + 1)}
          >
            Next
          </button>
        </div>
      )}
      {/* Add Lead Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <form
            className="bg-white dark:bg-gray-900 rounded-lg shadow-lg p-8 w-full max-w-md"
            onSubmit={handleAddLead}
          >
            <h2 className="text-xl font-bold mb-4">Add New Lead</h2>
            <div className="mb-3">
              <label className="block mb-1 font-semibold">Name</label>
              <input
                type="text"
                className="border rounded px-3 py-2 w-full"
                value={newLead.name}
                onChange={e => setNewLead({ ...newLead, name: e.target.value })}
                required
              />
            </div>
            <div className="mb-3">
              <label className="block mb-1 font-semibold">Email</label>
              <input
                type="email"
                className="border rounded px-3 py-2 w-full"
                value={newLead.email}
                onChange={e => setNewLead({ ...newLead, email: e.target.value })}
                required
              />
            </div>
            <div className="mb-3">
              <label className="block mb-1 font-semibold">Phone</label>
              <input
                type="text"
                className="border rounded px-3 py-2 w-full"
                value={newLead.phone}
                onChange={e => setNewLead({ ...newLead, phone: e.target.value })}
              />
            </div>
            <div className="mb-3">
              <label className="block mb-1 font-semibold">Status</label>
              <select
                className="border rounded px-3 py-2 w-full"
                value={newLead.status}
                onChange={e => setNewLead({ ...newLead, status: e.target.value })}
              >
                <option value="New">New</option>
                <option value="Contacted">Contacted</option>
                <option value="Qualified">Qualified</option>
                <option value="Converted">Converted</option>
                <option value="Lost">Lost</option>
              </select>
            </div>
            <div className="mb-3">
              <label className="block mb-1 font-semibold">Notes</label>
              <textarea
                className="border rounded px-3 py-2 w-full"
                value={newLead.notes}
                onChange={e => setNewLead({ ...newLead, notes: e.target.value })}
              />
            </div>
            <div className="flex justify-end mt-6">
              <button
                type="button"
                className="px-4 py-2 mr-2 rounded bg-gray-200 text-gray-700"
                onClick={() => setShowAddModal(false)}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700"
              >
                Add Lead
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
};

export default Leads;