// DisputeLetters.jsx - Professional Dispute Letter Generator with PDF Export
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';

// Material-UI imports - KEEP ALL OF THESE!
import {
  Box,
  Paper,
  Typography,
  Grid,
  Card,
  CardContent,
  CardActions,
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Tabs,
  Tab,
  Chip,
  Alert,
  IconButton,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  ListItemButton,
  ListItemSecondaryAction,
  Badge,
  Divider,
  Stack,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  FormControlLabel,
  Checkbox,
  Radio,
  RadioGroup,
  InputAdornment,
  Container,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Avatar,
  AvatarGroup
} from '@mui/material';

// Date picker imports
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

// Lucide React Icons - Comprehensive list
import { 
  // Document & File Icons
  FileText,
  Download,
  Upload,
  Trash2,
  Copy,
  
  // Action Icons
  Plus,
  Send,
  Save,
  Edit3,
  Eye,
  X,
  
  // Status Icons
  CheckCircle,
  XCircle,
  AlertCircle,
  AlertTriangle,
  Clock,
  
  // UI Navigation Icons
  Search,
  Filter,
  ChevronRight,
  ChevronDown,
  ChevronUp,
  ArrowRight,
  ArrowLeft,
  MoreVertical,
  
  // Feature Icons
  Calendar,
  Shield,
  Building,
  DollarSign,
  Briefcase,
  Lock,
  Unlock,
  Star,
  Heart,
  BookOpen,
  
  // Communication Icons
  Mail,
  Phone,
  MessageSquare,
  
  // Data & Analytics Icons
  BarChart3,
  TrendingUp,
  Activity,
  Target,
  
  // User Icons
  User,
  Users,
  
  // Misc Icons
  Settings,
  HelpCircle,
  Info,
  RefreshCw,
  Zap,
  Tag,
  Hash,
  Sparkles,
  Brain,
  Wand2,
  Award
} from 'lucide-react';

// Context imports
import { useAuth } from '../contexts/AuthContext';
import { useTheme } from '../contexts/ThemeContext';

// Firebase imports
import { db } from '../lib/firebase';
import { 
  collection, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  doc, 
  query, 
  where, 
  getDocs, 
  orderBy, 
  serverTimestamp,
  onSnapshot,
  getDoc,
  setDoc
} from 'firebase/firestore';

// PDF Generation
import html2pdf from 'html2pdf.js';

// Add any other utility imports your file uses
// import { toast } from 'react-hot-toast';  // If using toast notifications
// import { format } from 'date-fns';  // If using date formatting

// Add any other utility imports your file uses
// import { toast } from 'react-hot-toast';  // If using toast notifications
// import { format } from 'date-fns';  // If using date formatting

const DisputeLetters = () => {
  const { currentUser } = useAuth();
  const [activeTab, setActiveTab] = useState(0);
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [editingLetter, setEditingLetter] = useState(false);
  const [letterContent, setLetterContent] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('all');
  const [activeStep, setActiveStep] = useState(0);
  const [openDialog, setOpenDialog] = useState(false);
  const [loading, setLoading] = useState(false);
  const [savedLetters, setSavedLetters] = useState([]);
  const [selectedClient, setSelectedClient] = useState(null);
  const [clients, setClients] = useState([]);
  
  // Form data for letter generation
  const [formData, setFormData] = useState({
    // Client Information
    fullName: '',
    address: '',
    city: '',
    state: '',
    zip: '',
    ssn: '',
    dob: '',
    phone: '',
    email: '',
    
    // Bureau Selection
    bureau: 'equifax',
    bureauAddress: '',
    
    // Dispute Details
    disputeType: '',
    accountName: '',
    accountNumber: '',
    disputeReason: '',
    customDispute: '',
    disputeItems: [],
    
    // Supporting Documents
    supportingDocs: [],
    includeIdentityDocs: true,
    includeFTCReport: false,
    includePoliceReport: false,
    
    // Additional Options
    certifiedMail: true,
    returnReceipt: true,
    urgentRequest: false,
    legalWarning: false,
    additionalNotes: ''
  });

  // Credit Bureau Information
  const creditBureaus = {
    equifax: {
      name: 'Equifax',
      address: 'P.O. Box 740256, Atlanta, GA 30374-0256',
      phone: '1-866-349-5191',
      website: 'www.equifax.com',
      color: '#EF4444'
    },
    experian: {
      name: 'Experian',
      address: 'P.O. Box 4500, Allen, TX 75013',
      phone: '1-888-397-3742',
      website: 'www.experian.com',
      color: '#3B82F6'
    },
    transunion: {
      name: 'TransUnion',
      address: 'P.O. Box 2000, Chester, PA 19016',
      phone: '1-800-916-8800',
      website: 'www.transunion.com',
      color: '#10B981'
    }
  };

  // Comprehensive Dispute Letter Templates
  const letterTemplates = [
    {
      id: '609',
      title: '609 Dispute Letter',
      category: 'verification',
      description: 'Request verification of debt under FCRA Section 609',
      law: 'FCRA Section 609',
      purpose: 'Forces credit bureaus to provide proof of verification',
      effectiveness: 'High',
      timeframe: '30 days response required',
      icon: <Shield />,
      color: '#3B82F6',
      popularity: 95,
      successRate: 78
    },
    {
      id: '611',
      title: '611 Method of Verification',
      category: 'verification',
      description: 'Request specific method used to verify disputed items',
      law: 'FCRA Section 611',
      purpose: 'Requests detailed verification methods',
      effectiveness: 'High',
      timeframe: '15 days after initial dispute',
      icon: <Search />,
      color: '#10B981',
      popularity: 88,
      successRate: 82
    },
    {
      id: '623',
      title: '623 Furnisher Dispute',
      category: 'furnisher',
      description: 'Direct dispute with information furnisher',
      law: 'FCRA Section 623',
      purpose: 'Disputes directly with creditor/furnisher',
      effectiveness: 'Very High',
      timeframe: '30 days response',
      icon: <Building />,
      color: '#F59E0B',
      popularity: 76,
      successRate: 85
    },
    {
      id: 'goodwill',
      title: 'Goodwill Letter',
      category: 'removal',
      description: 'Request removal of accurate negative item',
      law: 'N/A - Courtesy Request',
      purpose: 'Appeals to creditor for removal',
      effectiveness: 'Medium',
      timeframe: 'Varies',
      icon: <Heart />,
      color: '#EC4899',
      popularity: 65,
      successRate: 45
    },
    {
      id: 'pay-delete',
      title: 'Pay for Delete',
      category: 'negotiation',
      description: 'Offer payment in exchange for deletion',
      law: 'Contract Negotiation',
      purpose: 'Negotiates removal for payment',
      effectiveness: 'Medium-High',
      timeframe: 'Negotiable',
      icon: <DollarSign />,
      color: '#84CC16',
      popularity: 71,
      successRate: 62
    },
    {
      id: 'cease-desist',
      title: 'Cease and Desist',
      category: 'protection',
      description: 'Stop all collection communication',
      law: 'FDCPA Section 805(c)',
      purpose: 'Stops collection calls and letters',
      effectiveness: 'High',
      timeframe: 'Immediate',
      icon: <AlertTriangle />,
      color: '#DC2626',
      popularity: 82,
      successRate: 95
    },
    {
      id: 'identity-theft',
      title: 'Identity Theft Dispute',
      category: 'fraud',
      description: 'Dispute fraudulent accounts',
      law: 'FCRA Section 605B',
      purpose: 'Remove fraudulent accounts',
      effectiveness: 'Very High',
      timeframe: '5 business days',
      icon: <Lock />,
      color: '#7C3AED',
      popularity: 58,
      successRate: 92
    },
    {
      id: 'validation',
      title: 'Debt Validation',
      category: 'validation',
      description: 'Request debt validation from collector',
      law: 'FDCPA Section 809(b)',
      purpose: 'Validates debt legitimacy',
      effectiveness: 'High',
      timeframe: '30 days',
      icon: <CheckCircle />,
      color: '#0891B2',
      popularity: 90,
      successRate: 73
    },
    {
      id: 'estoppel',
      title: 'Estoppel by Silence',
      category: 'advanced',
      description: 'Legal doctrine for non-response',
      law: 'Legal Doctrine',
      purpose: 'Uses silence as agreement',
      effectiveness: 'Medium',
      timeframe: '30+ days',
      icon: <Briefcase />,
      color: '#525252',
      popularity: 42,
      successRate: 38
    },
    {
      id: 'intent-sue',
      title: 'Intent to Sue',
      category: 'escalation',
      description: 'Notice of intent to file lawsuit',
      law: 'Pre-litigation Notice',
      purpose: 'Final warning before legal action',
      effectiveness: 'High',
      timeframe: '15-30 days',
      icon: <AlertCircle />,
      color: '#B91C1C',
      popularity: 35,
      successRate: 68
    }
  ];

  // Dispute Reasons
  const disputeReasons = [
    { value: 'not-mine', label: 'This is not my account', category: 'identity' },
    { value: 'unauthorized', label: 'Unauthorized account', category: 'fraud' },
    { value: 'paid', label: 'Account was paid in full', category: 'payment' },
    { value: 'never-late', label: 'Never late on this account', category: 'accuracy' },
    { value: 'wrong-amount', label: 'Balance is incorrect', category: 'accuracy' },
    { value: 'wrong-dates', label: 'Dates are incorrect', category: 'accuracy' },
    { value: 'duplicate', label: 'Duplicate account', category: 'accuracy' },
    { value: 'settled', label: 'Account was settled', category: 'payment' },
    { value: 'bankruptcy', label: 'Included in bankruptcy', category: 'legal' },
    { value: 'too-old', label: 'Beyond statute of limitations', category: 'legal' },
    { value: 'no-contract', label: 'No signed contract exists', category: 'verification' },
    { value: 'identity-theft', label: 'Result of identity theft', category: 'fraud' }
  ];

  // Load clients and saved letters
  useEffect(() => {
    if (currentUser) {
      loadClients();
      loadSavedLetters();
    }
  }, [currentUser]);

  const loadClients = async () => {
    try {
      const q = query(
        collection(db, 'contacts'),
        where('userId', '==', currentUser.uid),
        orderBy('name')
      );
      const snapshot = await getDocs(q);
      const clientData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setClients(clientData);
    } catch (error) {
      console.error('Error loading clients:', error);
    }
  };

  const loadSavedLetters = async () => {
    try {
      setLoading(true);
      const q = query(
        collection(db, 'disputeLetters'),
        where('userId', '==', currentUser.uid),
        orderBy('createdAt', 'desc')
      );
      const snapshot = await getDocs(q);
      const letters = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setSavedLetters(letters);
    } catch (error) {
      console.error('Error loading letters:', error);
    } finally {
      setLoading(false);
    }
  };

  // Generate letter content based on template and form data
  const generateLetter = (templateId) => {
    const template = letterTemplates.find(t => t.id === templateId);
    const bureau = creditBureaus[formData.bureau];
    const today = new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });

    let content = '';

    // Header with client information
    content += `${formData.fullName}\n`;
    content += `${formData.address}\n`;
    content += `${formData.city}, ${formData.state} ${formData.zip}\n`;
    content += `${formData.phone}\n`;
    content += `${formData.email}\n\n`;
    content += `${today}\n\n`;
    
    // Bureau information
    content += `${bureau.name}\n`;
    content += `${bureau.address}\n\n`;

    // Template-specific content
    switch(templateId) {
      case '609':
        content += `RE: Request for Information Under FCRA Section 609\n`;
        if (formData.accountNumber) {
          content += `Account: ${formData.accountName} - ${formData.accountNumber}\n`;
        }
        content += `\nDear ${bureau.name},\n\n`;
        content += `I am writing to request information regarding items on my credit report pursuant to my rights under Section 609 of the Fair Credit Reporting Act (FCRA), 15 U.S.C. § 1681g.\n\n`;
        content += `Under Section 609, I have the right to request:\n`;
        content += `1. All information in my consumer file\n`;
        content += `2. The sources of information\n`;
        content += `3. Each person/company that has received my credit report\n`;
        content += `4. All information regarding inquiries\n\n`;
        
        if (formData.disputeItems.length > 0) {
          content += `Specifically, I am requesting verification of the following account(s):\n`;
          formData.disputeItems.forEach(item => {
            content += `• ${item}\n`;
          });
          content += `\n`;
        }
        
        content += `Please provide:\n`;
        content += `• Original contracts or agreements bearing my signature\n`;
        content += `• Proof of original creditor verification\n`;
        content += `• Method of verification used\n`;
        content += `• Name and address of any person contacted for verification\n`;
        content += `• Documentation that establishes the accuracy of this debt\n\n`;
        content += `If you cannot provide adequate documentation proving this debt is mine and accurately reported, I request that you immediately remove it from my credit report.\n\n`;
        break;

      case '611':
        content += `RE: Method of Verification Request - FCRA Section 611\n`;
        content += `Previous Dispute Date: [Enter Date]\n\n`;
        content += `Dear ${bureau.name},\n\n`;
        content += `I am writing regarding my previous dispute. I received your response stating the account(s) were "verified," however, you failed to provide the method of verification as required under Section 611 of the FCRA.\n\n`;
        content += `Under 15 U.S.C. § 1681i(a)(6)(B)(iii), upon request, you must promptly provide me with:\n`;
        content += `• A description of the procedure used to determine accuracy\n`;
        content += `• The business name, address, and telephone number of any furnisher contacted\n`;
        content += `• Detailed information about the verification\n\n`;
        
        if (formData.accountName) {
          content += `Disputed Account: ${formData.accountName}`;
          if (formData.accountNumber) {
            content += ` - Account #${formData.accountNumber}`;
          }
          content += `\n\n`;
        }
        
        content += `Your response of "verified" without providing the method of verification is insufficient and violates federal law. Please provide this information within 15 days.\n\n`;
        break;

      case '623':
        content += `RE: Direct Dispute Under FCRA Section 623(a)(8)\n`;
        if (formData.accountNumber) {
          content += `Account Number: ${formData.accountNumber}\n`;
        }
        content += `\nDear ${formData.accountName || 'Information Furnisher'},\n\n`;
        content += `I am writing to dispute inaccurate information you are reporting to the credit bureaus. Under Section 623(a)(8) of the FCRA, you have a duty to investigate and correct inaccurate information.\n\n`;
        content += `The following information is inaccurate:\n`;
        content += `${formData.customDispute || formData.disputeReason}\n\n`;
        content += `Please investigate this dispute and:\n`;
        content += `1. Correct the inaccurate information with all credit bureaus\n`;
        content += `2. Provide me with written confirmation of the correction\n`;
        content += `3. Send me a copy of the corrected information sent to the bureaus\n\n`;
        content += `Failure to properly investigate and correct this information constitutes a violation of the FCRA, subjecting you to actual damages, statutory damages up to $1,000, punitive damages, and attorney fees.\n\n`;
        break;

      case 'goodwill':
        content += `RE: Goodwill Request for Removal\n`;
        if (formData.accountNumber) {
          content += `Account Number: ${formData.accountNumber}\n`;
        }
        content += `\nTo Whom It May Concern,\n\n`;
        content += `I am writing to request a goodwill adjustment to my credit report regarding the above-referenced account.\n\n`;
        content += `I have been a customer for [X years] and have maintained a positive payment history except for [explain situation]. This was due to [explain circumstances - job loss, medical emergency, etc.].\n\n`;
        content += `Since then, I have:\n`;
        content += `• Brought the account current\n`;
        content += `• Maintained on-time payments\n`;
        content += `• Taken steps to ensure this won't happen again\n\n`;
        content += `I respectfully request that you remove the negative marks from my credit report as a gesture of goodwill. This would greatly help me [explain goal - buy home, refinance, etc.].\n\n`;
        content += `I value our relationship and hope you will consider this request.\n\n`;
        break;

      case 'pay-delete':
        content += `RE: Pay for Delete Agreement Proposal\n`;
        if (formData.accountNumber) {
          content += `Account Number: ${formData.accountNumber}\n`;
        }
        content += `\nDear Collections Department,\n\n`;
        content += `I am writing to propose a "pay for delete" agreement regarding the above account.\n\n`;
        content += `I am prepared to pay [amount or percentage] of the balance in exchange for complete removal of this account from all credit reporting agencies. This is not an admission of liability but rather an attempt to resolve this matter.\n\n`;
        content += `Terms of proposed agreement:\n`;
        content += `• I will pay $[amount] via certified funds\n`;
        content += `• Payment will be made within [X] days of written agreement\n`;
        content += `• You will request complete deletion from all credit bureaus\n`;
        content += `• You will provide written confirmation of deletion\n`;
        content += `• This will constitute payment in full\n\n`;
        content += `Please respond in writing if you accept this proposal. Upon agreement, I will require written confirmation on company letterhead before remitting payment.\n\n`;
        break;

      case 'cease-desist':
        content += `RE: CEASE AND DESIST NOTICE - FDCPA Section 805(c)\n`;
        if (formData.accountNumber) {
          content += `Account Number: ${formData.accountNumber}\n`;
        }
        content += `\nDear Debt Collector,\n\n`;
        content += `This letter serves as formal notice under Section 805(c) of the Fair Debt Collection Practices Act (15 USC 1692c) to CEASE AND DESIST all communication with me regarding the above-referenced account.\n\n`;
        content += `Under the FDCPA, you must now:\n`;
        content += `• Stop all phone calls to me, my family, and my employer\n`;
        content += `• Stop all letters and written communication\n`;
        content += `• Stop all other forms of contact\n\n`;
        content += `The only exceptions under the law are:\n`;
        content += `• To acknowledge receipt of this notice\n`;
        content += `• To notify me of specific actions (lawsuit, stopping collection)\n\n`;
        content += `Be advised that:\n`;
        content += `• All calls are being recorded\n`;
        content += `• All violations are being documented\n`;
        content += `• I am aware of my rights under federal and state law\n\n`;
        content += `Any further contact in violation of Section 805(c) will result in:\n`;
        content += `• Formal complaints to the CFPB and FTC\n`;
        content += `• Legal action seeking $1,000 statutory damages per violation\n`;
        content += `• Actual damages including emotional distress\n`;
        content += `• Attorney fees and costs\n\n`;
        break;

      case 'identity-theft':
        content += `RE: IDENTITY THEFT - Fraudulent Account Dispute\n`;
        if (formData.includePoliceReport) {
          content += `Police Report #: [Enter Number]\n`;
        }
        if (formData.includeFTCReport) {
          content += `FTC Identity Theft Report #: [Enter Number]\n`;
        }
        content += `\nDear ${bureau.name},\n\n`;
        content += `I am a victim of identity theft. The following accounts on my credit report are fraudulent and were opened without my knowledge or consent:\n\n`;
        
        if (formData.disputeItems.length > 0) {
          content += `Fraudulent Accounts:\n`;
          formData.disputeItems.forEach((item, index) => {
            content += `${index + 1}. ${item}\n`;
          });
          content += `\n`;
        }
        
        content += `Under Section 605B of the FCRA, I am requesting that you:\n`;
        content += `1. Block these fraudulent accounts within 4 business days\n`;
        content += `2. Notify the furnishers of the block\n`;
        content += `3. Provide me with written confirmation\n`;
        content += `4. Prevent re-reporting of these fraudulent items\n\n`;
        
        if (formData.includePoliceReport || formData.includeFTCReport) {
          content += `I have enclosed:\n`;
          if (formData.includePoliceReport) content += `• Copy of police report\n`;
          if (formData.includeFTCReport) content += `• FTC Identity Theft Report\n`;
          content += `• Proof of identity\n\n`;
        }
        break;

      case 'validation':
        content += `RE: DEBT VALIDATION REQUEST - FDCPA Section 809(b)\n`;
        if (formData.accountNumber) {
          content += `Account Number: ${formData.accountNumber}\n`;
        }
        content += `\nDear Debt Collector,\n\n`;
        content += `I am exercising my right under Section 809(b) of the Fair Debt Collection Practices Act to request validation of the alleged debt referenced above.\n\n`;
        content += `I dispute this debt and request that you provide:\n`;
        content += `• Proof that I am obligated to pay you\n`;
        content += `• Original signed contract or agreement\n`;
        content += `• Detailed accounting of the amount claimed\n`;
        content += `• Proof you are licensed to collect in my state\n`;
        content += `• Proof of assignment from original creditor\n`;
        content += `• Complete payment history\n\n`;
        content += `Until you provide proper validation:\n`;
        content += `• Cease all collection activities\n`;
        content += `• Remove any negative credit reporting\n`;
        content += `• Do not sell or transfer this alleged debt\n\n`;
        content += `This is not a refusal to pay but a notice of my rights under federal law.\n\n`;
        break;

      default:
        content += `[Custom letter content]\n\n`;
    }

    // Add legal warnings if selected
    if (formData.legalWarning) {
      content += `LEGAL WARNING: Any continued reporting of inaccurate information after receiving this notice constitutes willful non-compliance with the FCRA, subjecting you to liability for actual damages, statutory damages up to $1,000, punitive damages, and attorney fees under 15 U.S.C. §§ 1681n and 1681o.\n\n`;
    }

    // Add supporting documents section
    if (formData.includeIdentityDocs || formData.supportingDocs.length > 0) {
      content += `I have enclosed the following documentation:\n`;
      if (formData.includeIdentityDocs) {
        content += `• Copy of driver's license\n`;
        content += `• Copy of Social Security card\n`;
        content += `• Proof of address (utility bill)\n`;
      }
      formData.supportingDocs.forEach(doc => {
        content += `• ${doc}\n`;
      });
      content += `\n`;
    }

    // Add additional notes
    if (formData.additionalNotes) {
      content += `Additional Information:\n${formData.additionalNotes}\n\n`;
    }

    // Closing
    content += `Please investigate this matter and respond within the time required by law. `;
    
    if (formData.certifiedMail) {
      content += `This letter is being sent via certified mail with return receipt requested.\n\n`;
    }
    
    content += `Sincerely,\n\n\n`;
    content += `_________________________\n`;
    content += `${formData.fullName}\n`;
    
    if (formData.certifiedMail) {
      content += `\nSent via Certified Mail #_________________`;
    }

    setLetterContent(content);
    return content;
  };

  // Save letter to database
  const saveLetter = async () => {
    try {
      setLoading(true);
      const letterData = {
        userId: currentUser.uid,
        clientId: selectedClient?.id || null,
        clientName: formData.fullName,
        templateId: selectedTemplate?.id,
        templateName: selectedTemplate?.title,
        bureau: formData.bureau,
        content: letterContent,
        formData: formData,
        status: 'draft',
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      };

      const docRef = await addDoc(collection(db, 'disputeLetters'), letterData);
      
      await loadSavedLetters();
      setOpenDialog(false);
      
      // Reset form
      handleReset();
      
      alert('Letter saved successfully!');
    } catch (error) {
      console.error('Error saving letter:', error);
      alert('Error saving letter. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Export letter as PDF
  const exportPDF = () => {
    const element = document.createElement('div');
    element.innerHTML = `
      <div style="font-family: Arial, sans-serif; padding: 40px; max-width: 800px; margin: 0 auto;">
        <pre style="white-space: pre-wrap; font-family: 'Times New Roman', serif; font-size: 14px; line-height: 1.6;">
${letterContent}
        </pre>
      </div>
    `;

    const opt = {
      margin: 0.5,
      filename: `dispute-letter-${formData.fullName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    };

    html2pdf().set(opt).from(element).save();
  };

  // Handle client selection
  const handleClientSelect = (client) => {
    setSelectedClient(client);
    setFormData(prev => ({
      ...prev,
      fullName: client.name || '',
      email: client.email || '',
      phone: client.phone || '',
      address: client.address || '',
      city: client.city || '',
      state: client.state || '',
      zip: client.zip || ''
    }));
  };

  // Handle form reset
  const handleReset = () => {
    setFormData({
      fullName: '',
      address: '',
      city: '',
      state: '',
      zip: '',
      ssn: '',
      dob: '',
      phone: '',
      email: '',
      bureau: 'equifax',
      bureauAddress: '',
      disputeType: '',
      accountName: '',
      accountNumber: '',
      disputeReason: '',
      customDispute: '',
      disputeItems: [],
      supportingDocs: [],
      includeIdentityDocs: true,
      includeFTCReport: false,
      includePoliceReport: false,
      certifiedMail: true,
      returnReceipt: true,
      urgentRequest: false,
      legalWarning: false,
      additionalNotes: ''
    });
    setSelectedTemplate(null);
    setSelectedClient(null);
    setLetterContent('');
    setActiveStep(0);
  };

  // Filter templates based on search and category
  const filteredTemplates = useMemo(() => {
    return letterTemplates.filter(template => {
      const matchesSearch = searchTerm === '' || 
        template.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        template.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        template.law.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesCategory = filterCategory === 'all' || template.category === filterCategory;
      
      return matchesSearch && matchesCategory;
    });
  }, [searchTerm, filterCategory]);

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Container maxWidth="xl" sx={{ py: 3 }}>
        {/* Header */}
        <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Box>
            <Typography variant="h4" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <FileText /> Dispute Letter Generator
            </Typography>
            <Typography color="text.secondary">
              Professional dispute letters with legal citations and tracking
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', gap: 2 }}>
            <Button
              variant="outlined"
              startIcon={<Clock />}
              onClick={() => setActiveTab(2)}
            >
              Saved Letters ({savedLetters.length})
            </Button>
            <Button
              variant="contained"
              startIcon={<Plus />}
              onClick={() => {
                handleReset();
                setActiveTab(0);
              }}
            >
              New Letter
            </Button>
          </Box>
        </Box>

        {/* Stats Cards */}
        <Grid container spacing={3} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Box>
                    <Typography color="text.secondary" gutterBottom>
                      Templates Available
                    </Typography>
                    <Typography variant="h4">
                      {letterTemplates.length}
                    </Typography>
                  </Box>
                  <Avatar sx={{ bgcolor: 'primary.main' }}>
                    <BookOpen />
                  </Avatar>
                </Box>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Box>
                    <Typography color="text.secondary" gutterBottom>
                      Letters Sent
                    </Typography>
                    <Typography variant="h4">
                      {savedLetters.filter(l => l.status === 'sent').length}
                    </Typography>
                  </Box>
                  <Avatar sx={{ bgcolor: 'success.main' }}>
                    <Send />
                  </Avatar>
                </Box>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Box>
                    <Typography color="text.secondary" gutterBottom>
                      Pending Response
                    </Typography>
                    <Typography variant="h4">
                      {savedLetters.filter(l => l.status === 'pending').length}
                    </Typography>
                  </Box>
                  <Avatar sx={{ bgcolor: 'warning.main' }}>
                    <Clock />
                  </Avatar>
                </Box>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Box>
                    <Typography color="text.secondary" gutterBottom>
                      Success Rate
                    </Typography>
                    <Typography variant="h4">
                      78%
                    </Typography>
                  </Box>
                  <Avatar sx={{ bgcolor: 'info.main' }}>
                    <TrendingUp />
                  </Avatar>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        </Grid>

        {/* Tabs */}
        <Paper sx={{ mb: 3 }}>
          <Tabs value={activeTab} onChange={(e, v) => setActiveTab(v)}>
            <Tab label="Template Library" icon={<BookOpen size={20} />} />
            <Tab label="Create Letter" icon={<Edit3 size={20} />} />
            <Tab label="Saved Letters" icon={<Clock size={20} />} />
            <Tab label="Tracking" icon={<Target size={20} />} />
          </Tabs>
        </Paper>

        {/* Template Library Tab */}
        {activeTab === 0 && (
          <Box>
            {/* Search and Filter */}
            <Paper sx={{ p: 2, mb: 3 }}>
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    placeholder="Search templates..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <Search />
                        </InputAdornment>
                      )
                    }}
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel>Category</InputLabel>
                    <Select
                      value={filterCategory}
                      label="Category"
                      onChange={(e) => setFilterCategory(e.target.value)}
                      startAdornment={<Filter size={20} style={{ marginRight: 8 }} />}
                    >
                      <MenuItem value="all">All Categories</MenuItem>
                      <MenuItem value="verification">Verification</MenuItem>
                      <MenuItem value="validation">Validation</MenuItem>
                      <MenuItem value="removal">Removal</MenuItem>
                      <MenuItem value="negotiation">Negotiation</MenuItem>
                      <MenuItem value="protection">Protection</MenuItem>
                      <MenuItem value="fraud">Fraud/Identity Theft</MenuItem>
                      <MenuItem value="furnisher">Furnisher Disputes</MenuItem>
                      <MenuItem value="advanced">Advanced</MenuItem>
                      <MenuItem value="escalation">Escalation</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            </Paper>

            {/* Template Grid */}
            <Grid container spacing={3}>
              {filteredTemplates.map((template) => (
                <Grid item xs={12} md={6} lg={4} key={template.id}>
                  <Card 
                    sx={{ 
                      height: '100%',
                      cursor: 'pointer',
                      transition: 'transform 0.2s',
                      '&:hover': {
                        transform: 'translateY(-4px)',
                        boxShadow: 3
                      }
                    }}
                    onClick={() => {
                      setSelectedTemplate(template);
                      setActiveTab(1);
                    }}
                  >
                    <CardContent>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                        <Avatar sx={{ bgcolor: template.color, color: 'white' }}>
                          {template.icon}
                        </Avatar>
                        <Box sx={{ display: 'flex', gap: 1 }}>
                          <Chip 
                            label={`${template.successRate}%`}
                            size="small" 
                            color="success"
                            icon={<CheckCircle size={16} />}
                          />
                          <Chip 
                            label={template.popularity}
                            size="small"
                            icon={<Star size={16} />}
                          />
                        </Box>
                      </Box>
                      
                      <Typography variant="h6" gutterBottom>
                        {template.title}
                      </Typography>
                      
                      <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                        {template.description}
                      </Typography>
                      
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Shield size={16} />
                          <Typography variant="caption">
                            Law: {template.law}
                          </Typography>
                        </Box>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Clock size={16} />
                          <Typography variant="caption">
                            Timeline: {template.timeframe}
                          </Typography>
                        </Box>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Zap size={16} />
                          <Typography variant="caption">
                            Effectiveness: {template.effectiveness}
                          </Typography>
                        </Box>
                      </Box>
                    </CardContent>
                    <CardActions>
                      <Button 
                        fullWidth 
                        variant="contained"
                        startIcon={<ChevronRight />}
                      >
                        Use Template
                      </Button>
                    </CardActions>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </Box>
        )}

        {/* Create Letter Tab */}
        {activeTab === 1 && (
          <Grid container spacing={3}>
            <Grid item xs={12} lg={8}>
              <Paper sx={{ p: 3 }}>
                <Stepper activeStep={activeStep} orientation="vertical">
                  <Step>
                    <StepLabel>Select Client</StepLabel>
                    <StepContent>
                      <Box sx={{ mb: 3 }}>
                        <FormControl fullWidth sx={{ mb: 2 }}>
                          <InputLabel>Select Existing Client</InputLabel>
                          <Select
                            value={selectedClient?.id || ''}
                            label="Select Existing Client"
                            onChange={(e) => {
                              const client = clients.find(c => c.id === e.target.value);
                              handleClientSelect(client);
                            }}
                          >
                            <MenuItem value="">
                              <em>Manual Entry</em>
                            </MenuItem>
                            {clients.map(client => (
                              <MenuItem key={client.id} value={client.id}>
                                {client.name} - {client.email}
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>

                        <Grid container spacing={2}>
                          <Grid item xs={12} md={6}>
                            <TextField
                              fullWidth
                              label="Full Name"
                              value={formData.fullName}
                              onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}
                              required
                            />
                          </Grid>
                          <Grid item xs={12} md={6}>
                            <TextField
                              fullWidth
                              label="Email"
                              type="email"
                              value={formData.email}
                              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                              required
                            />
                          </Grid>
                          <Grid item xs={12}>
                            <TextField
                              fullWidth
                              label="Address"
                              value={formData.address}
                              onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
                              required
                            />
                          </Grid>
                          <Grid item xs={12} md={4}>
                            <TextField
                              fullWidth
                              label="City"
                              value={formData.city}
                              onChange={(e) => setFormData(prev => ({ ...prev, city: e.target.value }))}
                              required
                            />
                          </Grid>
                          <Grid item xs={12} md={4}>
                            <TextField
                              fullWidth
                              label="State"
                              value={formData.state}
                              onChange={(e) => setFormData(prev => ({ ...prev, state: e.target.value }))}
                              required
                            />
                          </Grid>
                          <Grid item xs={12} md={4}>
                            <TextField
                              fullWidth
                              label="ZIP Code"
                              value={formData.zip}
                              onChange={(e) => setFormData(prev => ({ ...prev, zip: e.target.value }))}
                              required
                            />
                          </Grid>
                          <Grid item xs={12} md={6}>
                            <TextField
                              fullWidth
                              label="Phone"
                              value={formData.phone}
                              onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                            />
                          </Grid>
                          <Grid item xs={12} md={6}>
                            <TextField
                              fullWidth
                              label="SSN (Last 4)"
                              value={formData.ssn}
                              onChange={(e) => setFormData(prev => ({ ...prev, ssn: e.target.value }))}
                              inputProps={{ maxLength: 4 }}
                            />
                          </Grid>
                        </Grid>
                      </Box>
                      <Box sx={{ mb: 2 }}>
                        <Button
                          variant="contained"
                          onClick={() => setActiveStep(1)}
                          disabled={!formData.fullName || !formData.email}
                        >
                          Continue
                        </Button>
                        <Button sx={{ ml: 1 }}>
                          Cancel
                        </Button>
                      </Box>
                    </StepContent>
                  </Step>

                  <Step>
                    <StepLabel>Select Bureau & Template</StepLabel>
                    <StepContent>
                      <Box sx={{ mb: 3 }}>
                        <Typography variant="h6" gutterBottom>
                          Select Credit Bureau
                        </Typography>
                        <RadioGroup
                          value={formData.bureau}
                          onChange={(e) => setFormData(prev => ({ ...prev, bureau: e.target.value }))}
                          row
                        >
                          {Object.entries(creditBureaus).map(([key, bureau]) => (
                            <FormControlLabel
                              key={key}
                              value={key}
                              control={<Radio />}
                              label={
                                <Chip
                                  label={bureau.name}
                                  sx={{ bgcolor: bureau.color, color: 'white' }}
                                />
                              }
                            />
                          ))}
                        </RadioGroup>

                        {selectedTemplate ? (
                          <Alert severity="info" sx={{ mt: 2 }}>
                            Selected Template: {selectedTemplate.title}
                          </Alert>
                        ) : (
                          <Alert severity="warning" sx={{ mt: 2 }}>
                            Please select a template from the Template Library
                          </Alert>
                        )}
                      </Box>
                      <Box sx={{ mb: 2 }}>
                        <Button
                          variant="contained"
                          onClick={() => setActiveStep(2)}
                          disabled={!selectedTemplate}
                        >
                          Continue
                        </Button>
                        <Button sx={{ ml: 1 }} onClick={() => setActiveStep(0)}>
                          Back
                        </Button>
                      </Box>
                    </StepContent>
                  </Step>

                  <Step>
                    <StepLabel>Dispute Details</StepLabel>
                    <StepContent>
                      <Box sx={{ mb: 3 }}>
                        <Grid container spacing={2}>
                          <Grid item xs={12} md={6}>
                            <TextField
                              fullWidth
                              label="Account/Creditor Name"
                              value={formData.accountName}
                              onChange={(e) => setFormData(prev => ({ ...prev, accountName: e.target.value }))}
                            />
                          </Grid>
                          <Grid item xs={12} md={6}>
                            <TextField
                              fullWidth
                              label="Account Number"
                              value={formData.accountNumber}
                              onChange={(e) => setFormData(prev => ({ ...prev, accountNumber: e.target.value }))}
                            />
                          </Grid>
                          <Grid item xs={12}>
                            <FormControl fullWidth>
                              <InputLabel>Dispute Reason</InputLabel>
                              <Select
                                value={formData.disputeReason}
                                label="Dispute Reason"
                                onChange={(e) => setFormData(prev => ({ ...prev, disputeReason: e.target.value }))}
                              >
                                {disputeReasons.map(reason => (
                                  <MenuItem key={reason.value} value={reason.value}>
                                    {reason.label}
                                  </MenuItem>
                                ))}
                              </Select>
                            </FormControl>
                          </Grid>
                          <Grid item xs={12}>
                            <TextField
                              fullWidth
                              multiline
                              rows={4}
                              label="Additional Details"
                              value={formData.customDispute}
                              onChange={(e) => setFormData(prev => ({ ...prev, customDispute: e.target.value }))}
                            />
                          </Grid>
                          <Grid item xs={12}>
                            <TextField
                              fullWidth
                              multiline
                              rows={3}
                              label="Disputed Items (one per line)"
                              value={formData.disputeItems.join('\n')}
                              onChange={(e) => setFormData(prev => ({ 
                                ...prev, 
                                disputeItems: e.target.value.split('\n').filter(item => item.trim())
                              }))}
                            />
                          </Grid>
                        </Grid>
                      </Box>
                      <Box sx={{ mb: 2 }}>
                        <Button
                          variant="contained"
                          onClick={() => setActiveStep(3)}
                        >
                          Continue
                        </Button>
                        <Button sx={{ ml: 1 }} onClick={() => setActiveStep(1)}>
                          Back
                        </Button>
                      </Box>
                    </StepContent>
                  </Step>

                  <Step>
                    <StepLabel>Additional Options</StepLabel>
                    <StepContent>
                      <Box sx={{ mb: 3 }}>
                        <Typography variant="h6" gutterBottom>
                          Supporting Documents
                        </Typography>
                        <Stack spacing={2}>
                          <FormControlLabel
                            control={
                              <Checkbox 
                                checked={formData.includeIdentityDocs}
                                onChange={(e) => setFormData(prev => ({ ...prev, includeIdentityDocs: e.target.checked }))}
                              />
                            }
                            label="Include identity verification documents"
                          />
                          <FormControlLabel
                            control={
                              <Checkbox 
                                checked={formData.includeFTCReport}
                                onChange={(e) => setFormData(prev => ({ ...prev, includeFTCReport: e.target.checked }))}
                              />
                            }
                            label="Include FTC Identity Theft Report"
                          />
                          <FormControlLabel
                            control={
                              <Checkbox 
                                checked={formData.includePoliceReport}
                                onChange={(e) => setFormData(prev => ({ ...prev, includePoliceReport: e.target.checked }))}
                              />
                            }
                            label="Include Police Report"
                          />
                        </Stack>

                        <Typography variant="h6" gutterBottom sx={{ mt: 3 }}>
                          Mailing Options
                        </Typography>
                        <Stack spacing={2}>
                          <FormControlLabel
                            control={
                              <Checkbox 
                                checked={formData.certifiedMail}
                                onChange={(e) => setFormData(prev => ({ ...prev, certifiedMail: e.target.checked }))}
                              />
                            }
                            label="Send via Certified Mail"
                          />
                          <FormControlLabel
                            control={
                              <Checkbox 
                                checked={formData.returnReceipt}
                                onChange={(e) => setFormData(prev => ({ ...prev, returnReceipt: e.target.checked }))}
                              />
                            }
                            label="Request Return Receipt"
                          />
                        </Stack>

                        <Typography variant="h6" gutterBottom sx={{ mt: 3 }}>
                          Letter Options
                        </Typography>
                        <Stack spacing={2}>
                          <FormControlLabel
                            control={
                              <Checkbox 
                                checked={formData.urgentRequest}
                                onChange={(e) => setFormData(prev => ({ ...prev, urgentRequest: e.target.checked }))}
                              />
                            }
                            label="Mark as Urgent Request"
                          />
                          <FormControlLabel
                            control={
                              <Checkbox 
                                checked={formData.legalWarning}
                                onChange={(e) => setFormData(prev => ({ ...prev, legalWarning: e.target.checked }))}
                              />
                            }
                            label="Include Legal Warning"
                          />
                        </Stack>

                        <TextField
                          fullWidth
                          multiline
                          rows={3}
                          label="Additional Notes"
                          value={formData.additionalNotes}
                          onChange={(e) => setFormData(prev => ({ ...prev, additionalNotes: e.target.value }))}
                          sx={{ mt: 3 }}
                        />
                      </Box>
                      <Box sx={{ mb: 2 }}>
                        <Button
                          variant="contained"
                          onClick={() => {
                            generateLetter(selectedTemplate.id);
                            setActiveStep(4);
                          }}
                          startIcon={<Zap />}
                        >
                          Generate Letter
                        </Button>
                        <Button sx={{ ml: 1 }} onClick={() => setActiveStep(2)}>
                          Back
                        </Button>
                      </Box>
                    </StepContent>
                  </Step>

                  <Step>
                    <StepLabel>Review & Send</StepLabel>
                    <StepContent>
                      <Alert severity="success" sx={{ mb: 2 }}>
                        Letter generated successfully! Review and make any necessary edits below.
                      </Alert>
                      <Box sx={{ mb: 2 }}>
                        <Button
                          variant="contained"
                          color="success"
                          onClick={saveLetter}
                          startIcon={<Save />}
                        >
                          Save Letter
                        </Button>
                        <Button
                          sx={{ ml: 1 }}
                          variant="contained"
                          onClick={exportPDF}
                          startIcon={<Download />}
                        >
                          Download PDF
                        </Button>
                        <Button
                          sx={{ ml: 1 }}
                          onClick={() => setEditingLetter(true)}
                          startIcon={<Edit3 />}
                        >
                          Edit
                        </Button>
                        <Button
                          sx={{ ml: 1 }}
                          onClick={() => setActiveStep(3)}
                        >
                          Back
                        </Button>
                      </Box>
                    </StepContent>
                  </Step>
                </Stepper>
              </Paper>
            </Grid>

            {/* Letter Preview */}
            <Grid item xs={12} lg={4}>
              <Paper sx={{ p: 3, position: 'sticky', top: 20 }}>
                <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Eye /> Letter Preview
                </Typography>
                <Divider sx={{ mb: 2 }} />
                
                {letterContent ? (
                  <Box>
                    {editingLetter ? (
                      <TextField
                        fullWidth
                        multiline
                        rows={20}
                        value={letterContent}
                        onChange={(e) => setLetterContent(e.target.value)}
                        sx={{ fontFamily: 'monospace' }}
                      />
                    ) : (
                      <Box 
                        sx={{ 
                          bgcolor: 'grey.50', 
                          p: 2, 
                          borderRadius: 1,
                          maxHeight: 600,
                          overflow: 'auto'
                        }}
                      >
                        <pre style={{ 
                          whiteSpace: 'pre-wrap', 
                          wordBreak: 'break-word',
                          fontFamily: 'monospace',
                          fontSize: '0.875rem'
                        }}>
                          {letterContent}
                        </pre>
                      </Box>
                    )}
                    
                    {editingLetter && (
                      <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>
                        <Button
                          variant="contained"
                          size="small"
                          onClick={() => setEditingLetter(false)}
                          startIcon={<CheckCircle />}
                        >
                          Done Editing
                        </Button>
                        <Button
                          size="small"
                          onClick={() => {
                            setEditingLetter(false);
                            generateLetter(selectedTemplate.id);
                          }}
                        >
                          Cancel
                        </Button>
                      </Box>
                    )}
                  </Box>
                ) : (
                  <Alert severity="info">
                    Complete the form to generate your dispute letter
                  </Alert>
                )}
              </Paper>
            </Grid>
          </Grid>
        )}

        {/* Saved Letters Tab */}
        {activeTab === 2 && (
          <Grid container spacing={3}>
            {savedLetters.length === 0 ? (
              <Grid item xs={12}>
                <Paper sx={{ p: 4, textAlign: 'center' }}>
                  <FileText size={48} style={{ opacity: 0.3, marginBottom: 16 }} />
                  <Typography variant="h6" gutterBottom>
                    No saved letters yet
                  </Typography>
                  <Typography color="text.secondary" paragraph>
                    Create your first dispute letter to get started
                  </Typography>
                  <Button
                    variant="contained"
                    startIcon={<Plus />}
                    onClick={() => {
                      handleReset();
                      setActiveTab(0);
                    }}
                  >
                    Create Letter
                  </Button>
                </Paper>
              </Grid>
            ) : (
              savedLetters.map((letter) => (
                <Grid item xs={12} md={6} lg={4} key={letter.id}>
                  <Card>
                    <CardContent>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                        <Chip 
                          label={letter.bureau}
                          size="small"
                          sx={{ 
                            bgcolor: creditBureaus[letter.bureau]?.color,
                            color: 'white'
                          }}
                        />
                        <Chip
                          label={letter.status || 'draft'}
                          size="small"
                          color={
                            letter.status === 'sent' ? 'success' :
                            letter.status === 'pending' ? 'warning' :
                            'default'
                          }
                        />
                      </Box>
                      
                      <Typography variant="h6" gutterBottom>
                        {letter.clientName}
                      </Typography>
                      
                      <Typography variant="body2" color="text.secondary" gutterBottom>
                        {letter.templateName}
                      </Typography>
                      
                      <Typography variant="caption" color="text.secondary">
                        Created: {letter.createdAt?.toDate?.()?.toLocaleDateString() || 'Unknown'}
                      </Typography>
                    </CardContent>
                    <CardActions>
                      <Button size="small" startIcon={<Eye />}>View</Button>
                      <Button size="small" startIcon={<Download />}>Download</Button>
                      <IconButton size="small">
                        <Trash2 size={16} />
                      </IconButton>
                    </CardActions>
                  </Card>
                </Grid>
              ))
            )}
          </Grid>
        )}

        {/* Tracking Tab */}
        {activeTab === 3 && (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom>
                  Dispute Letter Tracking
                </Typography>
                <Alert severity="info" sx={{ mb: 3 }}>
                  Track the status of your dispute letters and bureau responses
                </Alert>
                
                {/* Tracking timeline would go here */}
                <Box sx={{ textAlign: 'center', py: 4 }}>
                  <Target size={48} style={{ opacity: 0.3, marginBottom: 16 }} />
                  <Typography variant="h6" gutterBottom>
                    Tracking Coming Soon
                  </Typography>
                  <Typography color="text.secondary">
                    This feature will allow you to track letter delivery, bureau responses, and success rates
                  </Typography>
                </Box>
              </Paper>
            </Grid>
          </Grid>
        )}
      </Container>
    </LocalizationProvider>
  );
};

export default DisputeLetters;