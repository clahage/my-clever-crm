// Goals.jsx - Production-Ready Goal Management with OKRs
import React, { useState, useEffect, useMemo } from 'react';
import {
  Box,
  Paper,
  Typography,
  Grid,
  Card,
  CardContent,
  CardActions,
  Button,
  TextField,
  IconButton,
  Tabs,
  Tab,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Chip,
  Alert,
  Snackbar,
  Tooltip,
  Switch,
  FormControlLabel,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  InputAdornment,
  LinearProgress,
  Badge,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  ListItemIcon,
  ListItemButton,
  Avatar,
  AvatarGroup,
  Stack,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Menu,
  ToggleButton,
  ToggleButtonGroup
} from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import {
  Target,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Clock,
  Plus,
  Edit2,
  Trash2,
  Search,
  Filter,
  MoreVertical,
  ChevronDown,
  ChevronUp,
  Calendar,
  Users,
  User,
  BarChart3,
  PieChart,
  Activity,
  Zap,
  Trophy,
  Medal,
  Star,
  Flag,
  ArrowRight,
  ArrowUp,
  ArrowDown,
  Eye,
  EyeOff,
  Lock,
  Unlock,
  Share2,
  Download,
  Upload,
  Copy,
  CheckSquare,
  Square,
  XCircle,
  Minus,
  GitBranch,
  List as ListIcon,
  Briefcase,
  Heart,
  DollarSign,
  BookOpen,
  Home,
  MoreHorizontal
} from 'lucide-react';
import { collection, query, where, getDocs, addDoc, updateDoc, deleteDoc, doc, orderBy, onSnapshot, serverTimestamp } from 'firebase/firestore';
import { db } from '../lib/firebase';
import { useAuth } from '../contexts/AuthContext';
import { 
  PieChart as ReChartPie, 
  Pie, 
  Cell, 
  BarChart, 
  Bar, 
  LineChart, 
  Line, 
  RadarChart, 
  Radar, 
  PolarGrid, 
  PolarAngleAxis, 
  PolarRadiusAxis, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip as ChartTooltip, 
  ResponsiveContainer, 
  Legend, 
  AreaChart, 
  Area, 
  ComposedChart 
} from 'recharts';

// Goal categories with icons and colors
const goalCategories = [
  { value: 'business', label: 'Business', icon: Briefcase, color: '#3B82F6' },
  { value: 'personal', label: 'Personal', icon: User, color: '#10B981' },
  { value: 'health', label: 'Health', icon: Heart, color: '#EF4444' },
  { value: 'financial', label: 'Financial', icon: DollarSign, color: '#F59E0B' },
  { value: 'learning', label: 'Learning', icon: BookOpen, color: '#8B5CF6' },
  { value: 'team', label: 'Team', icon: Users, color: '#06B6D4' }
];

// Goal status levels
const statusLevels = {
  'not_started': { label: 'Not Started', color: 'default', icon: Minus },
  'in_progress': { label: 'In Progress', color: 'info', icon: Activity },
  'at_risk': { label: 'At Risk', color: 'warning', icon: AlertCircle },
  'on_track': { label: 'On Track', color: 'success', icon: TrendingUp },
  'completed': { label: 'Completed', color: 'success', icon: CheckCircle },
  'failed': { label: 'Failed', color: 'error', icon: XCircle }
};

// ============================================
// STOP HERE! 
// Your component starts on the NEXT line after this comment
// The next line should be: const Goals = () => {
// ============================================

const Goals = () => {
  const { user } = useAuth();
  const [goals, setGoals] = useState([]);
  const [keyResults, setKeyResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [tabValue, setTabValue] = useState(0);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [dialogType, setDialogType] = useState('create'); // create, edit, view
  const [selectedGoal, setSelectedGoal] = useState(null);
  const [selectedPeriod, setSelectedPeriod] = useState('Q1 2025');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [viewMode, setViewMode] = useState('grid'); // grid, list, timeline
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const [anchorEl, setAnchorEl] = useState(null);
  const [expandedGoal, setExpandedGoal] = useState(null);

  // Goal form state
  const [goalForm, setGoalForm] = useState({
    title: '',
    description: '',
    category: 'business',
    type: 'objective', // objective, key_result, milestone
    priority: 'medium', // low, medium, high, critical
    status: 'not_started',
    progress: 0,
    startDate: new Date(),
    endDate: new Date(new Date().setMonth(new Date().getMonth() + 3)), // 3 months default
    owner: '',
    team: [],
    parentGoalId: null,
    keyResults: [],
    milestones: [],
    metrics: {
      target: 100,
      current: 0,
      unit: '%'
    },
    tags: [],
    visibility: 'private', // private, team, public
    notifications: {
      enabled: true,
      frequency: 'weekly',
      recipients: []
    },
    attachments: [],
    comments: [],
    checkIns: [],
    dependencies: [],
    blockers: []
  });

  // Key result form state
  const [keyResultForm, setKeyResultForm] = useState({
    title: '',
    target: 100,
    current: 0,
    unit: '%',
    status: 'not_started',
    deadline: null
  });

  // Fetch goals and key results
  useEffect(() => {
    if (!user) return;

    const goalsQuery = query(
      collection(db, 'goals'),
      where('userId', '==', user.uid),
      orderBy('createdAt', 'desc')
    );

    const unsubscribe = onSnapshot(goalsQuery, (snapshot) => {
      const goalsData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setGoals(goalsData);
      
      // Extract all key results from goals
      const allKeyResults = goalsData.flatMap(goal => 
        (goal.keyResults || []).map(kr => ({
          ...kr,
          goalId: goal.id,
          goalTitle: goal.title
        }))
      );
      setKeyResults(allKeyResults);
      setLoading(false);
    });

    return () => unsubscribe();
  }, [user]);

  // Calculate statistics
  const statistics = useMemo(() => {
    const totalGoals = goals.length;
    const completedGoals = goals.filter(g => g.status === 'completed').length;
    const onTrackGoals = goals.filter(g => g.status === 'on_track').length;
    const atRiskGoals = goals.filter(g => g.status === 'at_risk').length;
    
    const avgProgress = goals.length > 0 
      ? goals.reduce((sum, g) => sum + (g.progress || 0), 0) / goals.length
      : 0;
    
    const totalKeyResults = keyResults.length;
    const completedKeyResults = keyResults.filter(kr => kr.status === 'completed').length;
    
    const completionRate = totalGoals > 0 
      ? (completedGoals / totalGoals) * 100
      : 0;

    // Calculate category distribution
    const categoryDist = goalCategories.map(cat => ({
      category: cat.label,
      count: goals.filter(g => g.category === cat.value).length,
      icon: cat.icon,
      color: cat.color
    }));

    return {
      totalGoals,
      completedGoals,
      onTrackGoals,
      atRiskGoals,
      avgProgress: avgProgress.toFixed(1),
      totalKeyResults,
      completedKeyResults,
      completionRate: completionRate.toFixed(1),
      categoryDistribution: categoryDist
    };
  }, [goals, keyResults]);

  // Progress data for charts
  const progressData = useMemo(() => {
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
    return months.map(month => ({
      month,
      goals: Math.floor(Math.random() * 20 + 5),
      completed: Math.floor(Math.random() * 15 + 2),
      progress: Math.floor(Math.random() * 30 + 50)
    }));
  }, []);

  // Category performance data for radar chart
  const categoryPerformance = useMemo(() => {
    return goalCategories.map(cat => ({
      category: cat.label,
      current: Math.floor(Math.random() * 100),
      target: 100
    }));
  }, []);

  // Handle goal creation
  const handleCreateGoal = async () => {
    if (!goalForm.title) {
      setSnackbar({ open: true, message: 'Goal title is required', severity: 'error' });
      return;
    }

    try {
      const newGoal = {
        ...goalForm,
        userId: user.uid,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
        createdBy: {
          id: user.uid,
          email: user.email,
          name: user.displayName || user.email
        }
      };

      await addDoc(collection(db, 'goals'), newGoal);
      setSnackbar({ open: true, message: 'Goal created successfully!', severity: 'success' });
      handleCloseDialog();
    } catch (error) {
      setSnackbar({ open: true, message: 'Error creating goal', severity: 'error' });
    }
  };

  // Handle goal update
  const handleUpdateGoal = async () => {
    try {
      const goalRef = doc(db, 'goals', selectedGoal.id);
      await updateDoc(goalRef, {
        ...goalForm,
        updatedAt: serverTimestamp()
      });
      
      setSnackbar({ open: true, message: 'Goal updated successfully!', severity: 'success' });
      handleCloseDialog();
    } catch (error) {
      setSnackbar({ open: true, message: 'Error updating goal', severity: 'error' });
    }
  };

  // Handle progress update
  const handleUpdateProgress = async (goalId, newProgress) => {
    try {
      const goalRef = doc(db, 'goals', goalId);
      const goal = goals.find(g => g.id === goalId);
      
      // Determine status based on progress and timeline
      let newStatus = 'in_progress';
      if (newProgress === 100) {
        newStatus = 'completed';
      } else if (newProgress >= 70) {
        newStatus = 'on_track';
      } else {
        const now = new Date();
        const endDate = new Date(goal.endDate);
        const timeRemaining = (endDate - now) / (1000 * 60 * 60 * 24); // days
        if (timeRemaining < 7 && newProgress < 50) {
          newStatus = 'at_risk';
        }
      }

      await updateDoc(goalRef, {
        progress: newProgress,
        status: newStatus,
        'metrics.current': newProgress,
        updatedAt: serverTimestamp()
      });
      
      // Add check-in record
      const checkIn = {
        date: new Date().toISOString(),
        progress: newProgress,
        notes: `Progress updated to ${newProgress}%`,
        userId: user.uid
      };
      
      await updateDoc(goalRef, {
        checkIns: [...(goal.checkIns || []), checkIn]
      });
      
      setSnackbar({ 
        open: true, 
        message: `Progress updated to ${newProgress}%`, 
        severity: 'success' 
      });
    } catch (error) {
      setSnackbar({ open: true, message: 'Error updating progress', severity: 'error' });
    }
  };

  // Handle adding key result
  const handleAddKeyResult = () => {
    if (!keyResultForm.title) {
      setSnackbar({ open: true, message: 'Key result title is required', severity: 'error' });
      return;
    }

    const newKeyResult = {
      ...keyResultForm,
      id: Date.now().toString(),
      createdAt: new Date().toISOString()
    };

    setGoalForm({
      ...goalForm,
      keyResults: [...goalForm.keyResults, newKeyResult]
    });

    setKeyResultForm({
      title: '',
      target: 100,
      current: 0,
      unit: '%',
      status: 'not_started',
      deadline: null
    });

    setSnackbar({ open: true, message: 'Key result added', severity: 'success' });
  };

  // Handle goal deletion
  const handleDeleteGoal = async (goalId) => {
    if (!window.confirm('Are you sure you want to delete this goal? This action cannot be undone.')) return;

    try {
      await deleteDoc(doc(db, 'goals', goalId));
      setSnackbar({ open: true, message: 'Goal deleted successfully!', severity: 'success' });
    } catch (error) {
      setSnackbar({ open: true, message: 'Error deleting goal', severity: 'error' });
    }
  };

  // Handle dialog close
  const handleCloseDialog = () => {
    setDialogOpen(false);
    setSelectedGoal(null);
    setGoalForm({
      title: '',
      description: '',
      category: 'business',
      type: 'objective',
      priority: 'medium',
      status: 'not_started',
      progress: 0,
      startDate: new Date(),
      endDate: new Date(new Date().setMonth(new Date().getMonth() + 3)),
      owner: '',
      team: [],
      parentGoalId: null,
      keyResults: [],
      milestones: [],
      metrics: {
        target: 100,
        current: 0,
        unit: '%'
      },
      tags: [],
      visibility: 'private',
      notifications: {
        enabled: true,
        frequency: 'weekly',
        recipients: []
      },
      attachments: [],
      comments: [],
      checkIns: [],
      dependencies: [],
      blockers: []
    });
  };

  // Filtered goals
  const filteredGoals = useMemo(() => {
    return goals.filter(goal => {
      const matchesSearch = goal.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           goal.description?.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = filterCategory === 'all' || goal.category === filterCategory;
      const matchesStatus = filterStatus === 'all' || goal.status === filterStatus;
      return matchesSearch && matchesCategory && matchesStatus;
    });
  }, [goals, searchTerm, filterCategory, filterStatus]);

  // Get category config
  const getCategoryConfig = (categoryValue) => {
    return goalCategories.find(cat => cat.value === categoryValue) || goalCategories[0];
  };

  // Get priority color
  const getPriorityColor = (priority) => {
    const colors = {
      low: '#9CA3AF',
      medium: '#3B82F6',
      high: '#F59E0B',
      critical: '#EF4444'
    };
    return colors[priority] || colors.medium;
  };

  // Calculate days remaining
  const getDaysRemaining = (endDate) => {
    const now = new Date();
    const end = new Date(endDate);
    const days = Math.ceil((end - now) / (1000 * 60 * 60 * 24));
    return days;
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h4" fontWeight={600}>
            Goals & OKRs
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Track objectives and key results across your organization
          </Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <FormControl size="small" sx={{ minWidth: 120 }}>
            <Select value={selectedPeriod} onChange={(e) => setSelectedPeriod(e.target.value)}>
              <MenuItem value="Q1 2025">Q1 2025</MenuItem>
              <MenuItem value="Q2 2025">Q2 2025</MenuItem>
              <MenuItem value="Q3 2025">Q3 2025</MenuItem>
              <MenuItem value="Q4 2025">Q4 2025</MenuItem>
              <MenuItem value="2025">Year 2025</MenuItem>
            </Select>
          </FormControl>
          <Button
            variant="outlined"
            startIcon={<Download size={20} />}
          >
            Export
          </Button>
          <Button
            variant="contained"
            startIcon={<Plus size={20} />}
            onClick={() => {
              setDialogType('create');
              setDialogOpen(true);
            }}
          >
            New Goal
          </Button>
        </Box>
      </Box>

      {/* Statistics Cards */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} md={2.4}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="body2" color="text.secondary">Total Goals</Typography>
                  <Typography variant="h4" fontWeight={600}>{statistics.totalGoals}</Typography>
                  <Typography variant="caption" color="text.secondary">
                    {statistics.totalKeyResults} key results
                  </Typography>
                </Box>
                <Target size={24} color="#3B82F6" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={2.4}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="body2" color="text.secondary">On Track</Typography>
                  <Typography variant="h4" fontWeight={600} color="success.main">
                    {statistics.onTrackGoals}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    {((statistics.onTrackGoals / (statistics.totalGoals || 1)) * 100).toFixed(0)}% healthy
                  </Typography>
                </Box>
                <TrendingUp size={24} color="#10B981" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={2.4}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="body2" color="text.secondary">At Risk</Typography>
                  <Typography variant="h4" fontWeight={600} color="warning.main">
                    {statistics.atRiskGoals}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    Need attention
                  </Typography>
                </Box>
                <AlertCircle size={24} color="#F59E0B" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={2.4}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="body2" color="text.secondary">Avg Progress</Typography>
                  <Typography variant="h4" fontWeight={600}>{statistics.avgProgress}%</Typography>
                  <CircularProgress
                    variant="determinate"
                    value={Number(statistics.avgProgress)}
                    size={20}
                    thickness={4}
                    sx={{ mt: 0.5 }}
                  />
                </Box>
                <Activity size={24} color="#8B5CF6" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={2.4}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="body2" color="text.secondary">Completed</Typography>
                  <Typography variant="h4" fontWeight={600}>{statistics.completedGoals}</Typography>
                  <Typography variant="caption" color="success.main">
                    {statistics.completionRate}% rate
                  </Typography>
                </Box>
                <Trophy size={24} color="#EF4444" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Tabs */}
      <Paper sx={{ mb: 3 }}>
        <Tabs value={tabValue} onChange={(e, v) => setTabValue(v)}>
          <Tab label="My Goals" />
          <Tab label="Team Goals" />
          <Tab label="Key Results" />
          <Tab label="Timeline" />
          <Tab label="Analytics" />
        </Tabs>
      </Paper>

      {/* Tab Content */}
      {tabValue === 0 && (
        <Box>
          {/* Filters and View Toggle */}
          <Paper sx={{ p: 2, mb: 2 }}>
            <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
              <TextField
                placeholder="Search goals..."
                size="small"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                InputProps={{
                  startAdornment: <Search size={20} style={{ marginRight: 8 }} />
                }}
                sx={{ flex: 1, maxWidth: 400 }}
              />
              <FormControl size="small" sx={{ minWidth: 150 }}>
                <InputLabel>Category</InputLabel>
                <Select
                  value={filterCategory}
                  onChange={(e) => setFilterCategory(e.target.value)}
                  label="Category"
                >
                  <MenuItem value="all">All Categories</MenuItem>
                  {goalCategories.map(cat => (
                    <MenuItem key={cat.value} value={cat.value}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        {cat.icon}
                        {cat.label}
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <FormControl size="small" sx={{ minWidth: 150 }}>
                <InputLabel>Status</InputLabel>
                <Select
                  value={filterStatus}
                  onChange={(e) => setFilterStatus(e.target.value)}
                  label="Status"
                >
                  <MenuItem value="all">All Status</MenuItem>
                  {Object.entries(statusLevels).map(([value, config]) => (
                    <MenuItem key={value} value={value}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        {config.icon}
                        {config.label}
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <ToggleButtonGroup
                value={viewMode}
                exclusive
                onChange={(e, v) => v && setViewMode(v)}
                size="small"
              >
                <ToggleButton value="grid">
                  <BarChart3 size={18} />
                </ToggleButton>
                <ToggleButton value="list">
                  <ListIcon size={18} />
                </ToggleButton>
                <ToggleButton value="timeline">
                  <GitBranch size={18} />
                </ToggleButton>
              </ToggleButtonGroup>
            </Box>
          </Paper>

          {/* Goals Display */}
          {viewMode === 'grid' ? (
            <Grid container spacing={3}>
              {filteredGoals.map(goal => {
                const category = getCategoryConfig(goal.category);
                const daysRemaining = getDaysRemaining(goal.endDate);
                const statusConfig = statusLevels[goal.status];
                
                return (
                  <Grid item xs={12} md={6} lg={4} key={goal.id}>
                    <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                      <CardContent sx={{ flex: 1 }}>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Avatar sx={{ bgcolor: category.color + '20', width: 32, height: 32 }}>
                              {React.cloneElement(category.icon, { size: 16, color: category.color })}
                            </Avatar>
                            <Box>
                              <Typography variant="h6">{goal.title}</Typography>
                              <Chip 
                                label={statusConfig.label} 
                                size="small"
                                color={statusConfig.color}
                                icon={statusConfig.icon}
                              />
                            </Box>
                          </Box>
                          <IconButton 
                            size="small"
                            onClick={(e) => {
                              setAnchorEl(e.currentTarget);
                              setSelectedGoal(goal);
                            }}
                          >
                            <MoreVertical size={16} />
                          </IconButton>
                        </Box>
                        
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                          {goal.description}
                        </Typography>
                        
                        {/* Progress */}
                        <Box sx={{ mb: 2 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
                            <Typography variant="body2">Progress</Typography>
                            <Typography variant="body2" fontWeight={500}>
                              {goal.progress || 0}%
                            </Typography>
                          </Box>
                          <LinearProgress 
                            variant="determinate" 
                            value={goal.progress || 0}
                            sx={{ height: 8, borderRadius: 4 }}
                            color={
                              goal.progress >= 70 ? 'success' :
                              goal.progress >= 40 ? 'warning' :
                              'error'
                            }
                          />
                        </Box>
                        
                        {/* Key Results */}
                        {goal.keyResults?.length > 0 && (
                          <Box sx={{ mb: 2 }}>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                              Key Results
                            </Typography>
                            {goal.keyResults.slice(0, 2).map((kr, index) => (
                              <Box key={index} sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
                                <CircularProgress
                                  variant="determinate"
                                  value={(kr.current / kr.target) * 100}
                                  size={16}
                                  thickness={6}
                                />
                                <Typography variant="caption" sx={{ flex: 1 }}>
                                  {kr.title}
                                </Typography>
                                <Typography variant="caption" fontWeight={500}>
                                  {kr.current}/{kr.target} {kr.unit}
                                </Typography>
                              </Box>
                            ))}
                            {goal.keyResults.length > 2 && (
                              <Typography variant="caption" color="primary" sx={{ cursor: 'pointer' }}>
                                +{goal.keyResults.length - 2} more
                              </Typography>
                            )}
                          </Box>
                        )}
                        
                        {/* Meta Info */}
                        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                            <Flag size={14} color={getPriorityColor(goal.priority)} />
                            <Typography variant="caption" sx={{ textTransform: 'capitalize' }}>
                              {goal.priority}
                            </Typography>
                          </Box>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                            <Calendar size={14} />
                            <Typography 
                              variant="caption" 
                              color={daysRemaining < 7 ? 'error.main' : 'text.secondary'}
                            >
                              {daysRemaining > 0 ? `${daysRemaining} days left` : 'Overdue'}
                            </Typography>
                          </Box>
                          {goal.team?.length > 0 && (
                            <AvatarGroup max={3} sx={{ '& .MuiAvatar-root': { width: 20, height: 20, fontSize: 10 } }}>
                              {goal.team.map((member, index) => (
                                <Avatar key={index}>{member[0]}</Avatar>
                              ))}
                            </AvatarGroup>
                          )}
                        </Box>
                      </CardContent>
                      <CardActions>
                        <Button 
                          size="small" 
                          onClick={() => {
                            setSelectedGoal(goal);
                            setGoalForm(goal);
                            setDialogType('view');
                            setDialogOpen(true);
                          }}
                        >
                          View Details
                        </Button>
                        <Button 
                          size="small"
                          onClick={() => {
                            const newProgress = Math.min(100, goal.progress + 10);
                            handleUpdateProgress(goal.id, newProgress);
                          }}
                        >
                          Update Progress
                        </Button>
                      </CardActions>
                    </Card>
                  </Grid>
                );
              })}
            </Grid>
          ) : viewMode === 'timeline' ? (
            <Paper sx={{ p: 3 }}>
              <Timeline position="alternate">
                {filteredGoals.map((goal, index) => {
                  const category = getCategoryConfig(goal.category);
                  return (
                    <TimelineItem key={goal.id}>
                      <TimelineOppositeContent color="text.secondary">
                        {new Date(goal.startDate).toLocaleDateString()}
                      </TimelineOppositeContent>
                      <TimelineSeparator>
                        <TimelineDot sx={{ bgcolor: category.color }}>
                          {React.cloneElement(category.icon, { size: 16 })}
                        </TimelineDot>
                        {index < filteredGoals.length - 1 && <TimelineConnector />}
                      </TimelineSeparator>
                      <TimelineContent>
                        <Paper sx={{ p: 2 }}>
                          <Typography variant="h6">{goal.title}</Typography>
                          <Typography variant="body2" color="text.secondary">
                            {goal.description}
                          </Typography>
                          <LinearProgress 
                            variant="determinate" 
                            value={goal.progress || 0}
                            sx={{ mt: 1, height: 4, borderRadius: 2 }}
                          />
                        </Paper>
                      </TimelineContent>
                    </TimelineItem>
                  );
                })}
              </Timeline>
            </Paper>
          ) : (
            <Paper sx={{ p: 2 }}>
              <List>
                {filteredGoals.map(goal => {
                  const category = getCategoryConfig(goal.category);
                  const isExpanded = expandedGoal === goal.id;
                  
                  return (
                    <React.Fragment key={goal.id}>
                      <ListItem
                        sx={{
                          border: 1,
                          borderColor: 'divider',
                          borderRadius: 1,
                          mb: 1
                        }}
                      >
                        <ListItemIcon>
                          <Avatar sx={{ bgcolor: category.color + '20' }}>
                            {React.cloneElement(category.icon, { size: 16, color: category.color })}
                          </Avatar>
                        </ListItemIcon>
                        <ListItemText
                          primary={
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              {goal.title}
                              <Chip 
                                label={statusLevels[goal.status].label}
                                size="small"
                                color={statusLevels[goal.status].color}
                              />
                            </Box>
                          }
                          secondary={
                            <Box>
                              <Typography variant="body2" color="text.secondary">
                                {goal.description}
                              </Typography>
                              <LinearProgress 
                                variant="determinate" 
                                value={goal.progress || 0}
                                sx={{ mt: 1, height: 6, borderRadius: 3 }}
                              />
                            </Box>
                          }
                        />
                        <ListItemSecondaryAction>
                          <IconButton
                            onClick={() => setExpandedGoal(isExpanded ? null : goal.id)}
                          >
                            {isExpanded ? <ChevronDown size={20} /> : <ChevronRight size={20} />}
                          </IconButton>
                        </ListItemSecondaryAction>
                      </ListItem>
                      
                      {isExpanded && goal.keyResults?.length > 0 && (
                        <Box sx={{ ml: 8, mb: 2 }}>
                          {goal.keyResults.map((kr, index) => (
                            <Paper key={index} sx={{ p: 2, mb: 1 }}>
                              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                <Typography variant="body2">{kr.title}</Typography>
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                  <Typography variant="body2">
                                    {kr.current}/{kr.target} {kr.unit}
                                  </Typography>
                                  <CircularProgress
                                    variant="determinate"
                                    value={(kr.current / kr.target) * 100}
                                    size={24}
                                  />
                                </Box>
                              </Box>
                            </Paper>
                          ))}
                        </Box>
                      )}
                    </React.Fragment>
                  );
                })}
              </List>
            </Paper>
          )}
        </Box>
      )}

      {tabValue === 4 && (
        <Grid container spacing={3}>
          <Grid item xs={12} md={8}>
            <Paper sx={{ p: 2 }}>
              <Typography variant="h6" gutterBottom>Goal Progress Trends</Typography>
              <ResponsiveContainer width="100%" height={300}>
                <ComposedChart data={progressData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis yAxisId="left" />
                  <YAxis yAxisId="right" orientation="right" />
                  <ChartTooltip />
                  <Legend />
                  <Bar yAxisId="left" dataKey="goals" fill="#3B82F6" name="Total Goals" />
                  <Bar yAxisId="left" dataKey="completed" fill="#10B981" name="Completed" />
                  <Line yAxisId="right" type="monotone" dataKey="progress" stroke="#F59E0B" name="Avg Progress %" />
                </ComposedChart>
              </ResponsiveContainer>
            </Paper>
            
            <Paper sx={{ p: 2, mt: 3 }}>
              <Typography variant="h6" gutterBottom>Category Performance</Typography>
              <ResponsiveContainer width="100%" height={300}>
                <RadarChart data={categoryPerformance}>
                  <PolarGrid />
                  <PolarAngleAxis dataKey="category" />
                  <PolarRadiusAxis angle={90} domain={[0, 100]} />
                  <Radar name="Current" dataKey="current" stroke="#3B82F6" fill="#3B82F6" fillOpacity={0.6} />
                  <Radar name="Target" dataKey="target" stroke="#10B981" fill="#10B981" fillOpacity={0.3} />
                  <Legend />
                </RadarChart>
              </ResponsiveContainer>
            </Paper>
          </Grid>
          <Grid item xs={12} md={4}>
            <Paper sx={{ p: 2 }}>
              <Typography variant="h6" gutterBottom>Category Distribution</Typography>
              <ResponsiveContainer width="100%" height={250}>
                <PieChart>
                  <Pie
                    data={statistics.categoryDistribution}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={(entry) => `${entry.category}: ${entry.count}`}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="count"
                  >
                    {statistics.categoryDistribution.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={goalCategories[index]?.color || '#8884d8'} />
                    ))}
                  </Pie>
                  <ChartTooltip />
                </PieChart>
              </ResponsiveContainer>
            </Paper>
            
            <Paper sx={{ p: 2, mt: 3 }}>
              <Typography variant="h6" gutterBottom>Achievement Board</Typography>
              <List>
                <ListItem>
                  <ListItemIcon>
                    <Trophy size={20} color="#FFD700" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Goal Crusher"
                    secondary="Complete 10 goals"
                  />
                  <Chip label="5/10" size="small" />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <Star size={20} color="#C0C0C0" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Consistent Performer"
                    secondary="Update progress weekly"
                  />
                  <Chip label="Earned" size="small" color="success" />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <Medal size={20} color="#CD7F32" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Team Player"
                    secondary="Collaborate on 5 team goals"
                  />
                  <Chip label="2/5" size="small" />
                </ListItem>
              </List>
            </Paper>
          </Grid>
        </Grid>
      )}

      {/* Create/Edit Goal Dialog */}
      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth="md" fullWidth>
        <DialogTitle>
          {dialogType === 'create' ? 'Create New Goal' :
           dialogType === 'edit' ? 'Edit Goal' :
           'Goal Details'}
        </DialogTitle>
        <DialogContent>
          {(dialogType === 'create' || dialogType === 'edit') ? (
            <Box sx={{ mt: 2 }}>
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Goal Title"
                    value={goalForm.title}
                    onChange={(e) => setGoalForm({ ...goalForm, title: e.target.value })}
                    required
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Description"
                    value={goalForm.description}
                    onChange={(e) => setGoalForm({ ...goalForm, description: e.target.value })}
                    multiline
                    rows={3}
                  />
                </Grid>
                <Grid item xs={12} md={4}>
                  <FormControl fullWidth>
                    <InputLabel>Category</InputLabel>
                    <Select
                      value={goalForm.category}
                      onChange={(e) => setGoalForm({ ...goalForm, category: e.target.value })}
                      label="Category"
                    >
                      {goalCategories.map(cat => (
                        <MenuItem key={cat.value} value={cat.value}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <cat.icon size={20} />
                            {cat.label}
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} md={4}>
                  <FormControl fullWidth>
                    <InputLabel>Priority</InputLabel>
                    <Select
                      value={goalForm.priority}
                      onChange={(e) => setGoalForm({ ...goalForm, priority: e.target.value })}
                      label="Priority"
                    >
                      <MenuItem value="low">Low</MenuItem>
                      <MenuItem value="medium">Medium</MenuItem>
                      <MenuItem value="high">High</MenuItem>
                      <MenuItem value="critical">Critical</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} md={4}>
                  <FormControl fullWidth>
                    <InputLabel>Visibility</InputLabel>
                    <Select
                      value={goalForm.visibility}
                      onChange={(e) => setGoalForm({ ...goalForm, visibility: e.target.value })}
                      label="Visibility"
                    >
                      <MenuItem value="private">Private</MenuItem>
                      <MenuItem value="team">Team</MenuItem>
                      <MenuItem value="public">Public</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} md={6}>
                  <LocalizationProvider dateAdapter={AdapterDateFns}>
                    <DatePicker
                      label="Start Date"
                      value={goalForm.startDate}
                      onChange={(date) => setGoalForm({ ...goalForm, startDate: date })}
                      renderInput={(params) => <TextField {...params} fullWidth />}
                    />
                  </LocalizationProvider>
                </Grid>
                <Grid item xs={12} md={6}>
                  <LocalizationProvider dateAdapter={AdapterDateFns}>
                    <DatePicker
                      label="End Date"
                      value={goalForm.endDate}
                      onChange={(date) => setGoalForm({ ...goalForm, endDate: date })}
                      renderInput={(params) => <TextField {...params} fullWidth />}
                    />
                  </LocalizationProvider>
                </Grid>
                
                {/* Key Results Section */}
                <Grid item xs={12}>
                  <Divider sx={{ my: 2 }} />
                  <Typography variant="h6" gutterBottom>Key Results</Typography>
                  
                  <Paper sx={{ p: 2, bgcolor: 'grey.50' }}>
                    <Grid container spacing={2}>
                      <Grid item xs={12} md={6}>
                        <TextField
                          fullWidth
                          size="small"
                          label="Key Result Title"
                          value={keyResultForm.title}
                          onChange={(e) => setKeyResultForm({ ...keyResultForm, title: e.target.value })}
                        />
                      </Grid>
                      <Grid item xs={6} md={2}>
                        <TextField
                          fullWidth
                          size="small"
                          label="Target"
                          type="number"
                          value={keyResultForm.target}
                          onChange={(e) => setKeyResultForm({ ...keyResultForm, target: Number(e.target.value) })}
                        />
                      </Grid>
                      <Grid item xs={6} md={2}>
                        <TextField
                          fullWidth
                          size="small"
                          label="Unit"
                          value={keyResultForm.unit}
                          onChange={(e) => setKeyResultForm({ ...keyResultForm, unit: e.target.value })}
                        />
                      </Grid>
                      <Grid item xs={12} md={2}>
                        <Button 
                          fullWidth 
                          variant="outlined" 
                          onClick={handleAddKeyResult}
                          sx={{ height: '40px' }}
                        >
                          Add
                        </Button>
                      </Grid>
                    </Grid>
                  </Paper>
                  
                  {goalForm.keyResults.length > 0 && (
                    <List sx={{ mt: 2 }}>
                      {goalForm.keyResults.map((kr, index) => (
                        <ListItem key={index} sx={{ bgcolor: 'background.paper', mb: 1, borderRadius: 1 }}>
                          <ListItemText
                            primary={kr.title}
                            secondary={`Target: ${kr.target} ${kr.unit}`}
                          />
                          <IconButton 
                            size="small"
                            onClick={() => {
                              setGoalForm({
                                ...goalForm,
                                keyResults: goalForm.keyResults.filter((_, i) => i !== index)
                              });
                            }}
                          >
                            <Trash2 size={16} />
                          </IconButton>
                        </ListItem>
                      ))}
                    </List>
                  )}
                </Grid>
              </Grid>
            </Box>
          ) : (
            <Box>
              {/* View Mode */}
              {selectedGoal && (
                <Box>
                  <Paper sx={{ p: 3, mb: 2 }}>
                    <Typography variant="h5" gutterBottom>{selectedGoal.title}</Typography>
                    <Typography variant="body1" color="text.secondary" paragraph>
                      {selectedGoal.description}
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                      <Chip 
                        label={getCategoryConfig(selectedGoal.category).label}
                        icon={getCategoryConfig(selectedGoal.category).icon}
                      />
                      <Chip 
                        label={statusLevels[selectedGoal.status].label}
                        color={statusLevels[selectedGoal.status].color}
                      />
                      <Chip 
                        label={`Priority: ${selectedGoal.priority}`}
                        color={
                          selectedGoal.priority === 'critical' ? 'error' :
                          selectedGoal.priority === 'high' ? 'warning' :
                          'default'
                        }
                      />
                    </Box>
                  </Paper>
                  
                  <Paper sx={{ p: 3 }}>
                    <Typography variant="h6" gutterBottom>Progress</Typography>
                    <Box sx={{ mb: 3 }}>
                      <Typography variant="h3" sx={{ mb: 1 }}>
                        {selectedGoal.progress || 0}%
                      </Typography>
                      <LinearProgress 
                        variant="determinate" 
                        value={selectedGoal.progress || 0}
                        sx={{ height: 10, borderRadius: 5 }}
                      />
                    </Box>
                    
                    {selectedGoal.keyResults?.length > 0 && (
                      <Box>
                        <Typography variant="h6" gutterBottom>Key Results</Typography>
                        {selectedGoal.keyResults.map((kr, index) => (
                          <Box key={index} sx={{ mb: 2 }}>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
                              <Typography variant="body2">{kr.title}</Typography>
                              <Typography variant="body2" fontWeight={500}>
                                {kr.current}/{kr.target} {kr.unit}
                              </Typography>
                            </Box>
                            <LinearProgress 
                              variant="determinate" 
                              value={(kr.current / kr.target) * 100}
                              sx={{ height: 6, borderRadius: 3 }}
                            />
                          </Box>
                        ))}
                      </Box>
                    )}
                  </Paper>
                </Box>
              )}
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          {(dialogType === 'create' || dialogType === 'edit') && (
            <Button 
              variant="contained"
              onClick={dialogType === 'create' ? handleCreateGoal : handleUpdateGoal}
            >
              {dialogType === 'create' ? 'Create Goal' : 'Update Goal'}
            </Button>
          )}
        </DialogActions>
      </Dialog>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert severity={snackbar.severity} onClose={() => setSnackbar({ ...snackbar, open: false })}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default Goals;