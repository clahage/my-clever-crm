import { useState, useEffect } from 'react';
import { Phone, Mail, MapPin, FileText, CreditCard, Users, Bell, Plus, X, ChevronDown, ChevronUp, Mic, Eye, EyeOff, Brain, Clock, Globe, MessageSquare, Activity } from 'lucide-react';

export default function UltimateClientForm({ initialData = {}, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    // Basic Information
    firstName: '',
    middleName: '',
    lastName: '',
    suffix: '',
    preferredName: '',
    namePronunciation: '',
    dateOfBirth: '',
    ssn: '', // FULL SSN - encrypted in database
    ssnLast4: '', // Auto-populated from full SSN
    
    // Contact Information
    phones: [{ type: 'mobile', number: '', isPrimary: true, canText: true, canCall: true, verified: false }],
    emails: [{ type: 'personal', address: '', isPrimary: true, verified: false, lastOpened: null }],
    addresses: [{ 
      type: 'home', 
      street: '', 
      unit: '', 
      city: '', 
      state: '', 
      zip: '', 
      isPrimary: true,
      verified: false,
      verifiedDate: null 
    }],
    
    // Communication Preferences
    preferredContactMethod: 'phone',
    preferredContactTime: 'anytime',
    language: 'english',
    timezone: 'America/Los_Angeles',
    doNotContact: false,
    communicationNotes: '',
    
    // Employment Information
    employment: {
      status: 'employed',
      employer: '',
      jobTitle: '',
      monthlyIncome: '',
      yearsAtJob: '',
      employerPhone: '',
      employerAddress: '',
      employmentHistory: []
    },
    
    // Credit Profile
    creditProfile: {
      approximateScore: '',
      scoreSource: 'self-reported',
      bureausToDispute: [],
      hasRecentBankruptcy: false,
      bankruptcyDate: '',
      hasForeclosure: false,
      foreclosureDate: '',
      primaryGoals: [],
      urgencyLevel: 'medium',
      targetScore: '',
      timeframe: '',
      creditKnowledge: 'beginner'
    },
    
    // Documents
    documents: {
      idReceived: false,
      idType: '',
      idNumber: '',
      idExpirationDate: '',
      idUploadDate: null,
      proofOfAddressReceived: false,
      proofOfAddressType: '',
      ssnCardReceived: false,
      ssnCardUploadDate: null,
      creditReportsReceived: false,
      creditReportsDate: null,
      additionalDocs: []
    },
    
    // Family/Household
    household: {
      maritalStatus: 'single',
      spouseName: '',
      spouseSSN: '',
      dependents: 0,
      dependentNames: [],
      householdIncome: '',
      otherResidents: []
    },
    
    // IDIQ Integration
    idiq: {
      membershipStatus: 'none',
      memberId: '',
      username: '',
      password: '', // Encrypted
      secretWord: '', // Auto-populated from SSN last 4, can be changed
      enrollmentDate: '',
      lastReportPull: '',
      lastLoginDate: null,
      dashboardAccess: false
    },
    
    // AI Activity Tracking
    aiTracking: {
      firstContact: new Date().toISOString(),
      lastActivity: new Date().toISOString(),
      totalInteractions: 0,
      emailsReceived: 0,
      emailsOpened: 0,
      emailsClicked: 0,
      textsSent: 0,
      textsReceived: 0,
      callsReceived: 0,
      callsMade: 0,
      websiteVisits: 0,
      pagesViewed: [],
      formsSubmitted: [],
      documentsDownloaded: [],
      aiInsights: [],
      behaviorPatterns: {},
      engagementScore: 0,
      responsiveness: 'unknown',
      preferredChannels: [],
      peakActivityTimes: []
    },
    
    // Timeline Events
    timeline: [],
    
    // Internal Notes & Tags
    notes: '',
    tags: [],
    assignedTo: '',
    leadSource: 'ai-receptionist',
    leadScore: 0,
    lifecycleStage: 'new',
    
    ...initialData
  });

  const [expandedSections, setExpandedSections] = useState({
    basic: true,
    contact: true,
    employment: false,
    credit: false,
    documents: false,
    household: false,
    idiq: false,
    preferences: false,
    aiInsights: false,
    timeline: false
  });

  const [showSSN, setShowSSN] = useState(false);
  const [aiAnalyzing, setAiAnalyzing] = useState(false);
  const [aiSuggestions, setAiSuggestions] = useState([]);

  // Auto-populate SSN last 4 and IDIQ secret word
  useEffect(() => {
    if (formData.ssn && formData.ssn.length >= 4) {
      const last4 = formData.ssn.slice(-4);
      setFormData(prev => ({
        ...prev,
        ssnLast4: last4,
        idiq: {
          ...prev.idiq,
          secretWord: prev.idiq.secretWord || last4 // Only auto-fill if empty
        }
      }));
    }
  }, [formData.ssn]);

  // AI Analysis on form changes
  useEffect(() => {
    const analyzeForm = async () => {
      // Simulate AI analysis
      const suggestions = [];
      
      // Check completeness
      if (!formData.firstName || !formData.lastName) {
        suggestions.push({ type: 'required', field: 'name', message: 'Basic name information needed' });
      }
      
      if (formData.phones.length === 0 || !formData.phones[0].number) {
        suggestions.push({ type: 'required', field: 'phone', message: 'At least one phone number required' });
      }
      
      // Check for patterns
      if (formData.creditProfile.approximateScore < 600) {
        suggestions.push({ 
          type: 'insight', 
          field: 'credit', 
          message: 'Low score - recommend comprehensive dispute strategy',
          action: 'Review dispute options'
        });
      }
      
      if (formData.creditProfile.urgencyLevel === 'urgent' && !formData.idiq.memberId) {
        suggestions.push({ 
          type: 'action', 
          field: 'idiq', 
          message: 'Urgent case - recommend immediate IDIQ enrollment',
          action: 'Enroll in IDIQ'
        });
      }
      
      // Engagement patterns
      if (formData.aiTracking.emailsReceived > 0 && formData.aiTracking.emailsOpened === 0) {
        suggestions.push({ 
          type: 'warning', 
          field: 'engagement', 
          message: 'Not opening emails - try SMS or phone',
          action: 'Switch communication method'
        });
      }
      
      setAiSuggestions(suggestions);
    };
    
    const debounce = setTimeout(analyzeForm, 500);
    return () => clearTimeout(debounce);
  }, [formData]);

  const toggleSection = (section) => {
    setExpandedSections(prev => ({ ...prev, [section]: !prev[section] }));
  };

  const updateField = (field, value) => {
    setFormData(prev => ({ 
      ...prev, 
      [field]: value,
      aiTracking: {
        ...prev.aiTracking,
        lastActivity: new Date().toISOString(),
        totalInteractions: prev.aiTracking.totalInteractions + 1
      }
    }));
  };

  const updateNestedField = (parent, field, value) => {
    setFormData(prev => ({
      ...prev,
      [parent]: { ...prev[parent], [field]: value },
      aiTracking: {
        ...prev.aiTracking,
        lastActivity: new Date().toISOString()
      }
    }));
  };

  const addArrayItem = (field, defaultItem) => {
    setFormData(prev => ({
      ...prev,
      [field]: [...prev[field], defaultItem]
    }));
  };

  const removeArrayItem = (field, index) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].filter((_, i) => i !== index)
    }));
  };

  const updateArrayItem = (field, index, updates) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].map((item, i) => i === index ? { ...item, ...updates } : item)
    }));
  };

  const handleZipCodeChange = async (zip, addressIndex) => {
    if (zip.length === 5) {
      // In production: call real ZIP API
      const zipData = {
        '90620': { city: 'Buena Park', state: 'CA' },
        '92647': { city: 'Huntington Beach', state: 'CA' },
        '92648': { city: 'Huntington Beach', state: 'CA' },
        '92649': { city: 'Huntington Beach', state: 'CA' }
      };
      const data = zipData[zip] || { city: '', state: '' };
      updateArrayItem('addresses', addressIndex, { 
        zip, 
        city: data.city, 
        state: data.state 
      });
      
      // Track AI activity
      addTimelineEvent('address_lookup', `ZIP code ${zip} auto-populated city/state`);
    } else {
      updateArrayItem('addresses', addressIndex, { zip });
    }
  };

  const addTimelineEvent = (type, description, metadata = {}) => {
    const event = {
      id: Date.now(),
      timestamp: new Date().toISOString(),
      type,
      description,
      metadata,
      source: 'system'
    };
    
    setFormData(prev => ({
      ...prev,
      timeline: [event, ...prev.timeline]
    }));
  };

  const formatSSN = (value) => {
    const numbers = value.replace(/\D/g, '');
    if (numbers.length <= 3) return numbers;
    if (numbers.length <= 5) return `${numbers.slice(0, 3)}-${numbers.slice(3)}`;
    return `${numbers.slice(0, 3)}-${numbers.slice(3, 5)}-${numbers.slice(5, 9)}`;
  };

  const handleSSNChange = (value) => {
    const formatted = formatSSN(value);
    updateField('ssn', formatted.replace(/-/g, ''));
  };

  const generateUsername = () => {
    const username = `${formData.firstName}.${formData.lastName}${Math.floor(Math.random() * 1000)}`.toLowerCase();
    updateNestedField('idiq', 'username', username);
    addTimelineEvent('username_generated', `IDIQ username generated: ${username}`);
  };

  const generatePassword = () => {
    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz23456789!@#$';
    let password = '';
    for (let i = 0; i < 12; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    updateNestedField('idiq', 'password', password);
    addTimelineEvent('password_generated', 'IDIQ password generated');
  };

  const handleSave = () => {
    addTimelineEvent('form_saved', 'Client information saved');
    onSave(formData);
  };

  const SectionHeader = ({ title, icon: Icon, section, badge, aiActive }) => (
    <div
      onClick={() => toggleSection(section)}
      className="w-full flex items-center justify-between p-4 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors cursor-pointer"
    >
      <div className="flex items-center gap-3">
        <Icon className="w-5 h-5 text-blue-600" />
        <span className="font-semibold text-gray-900">{title}</span>
        {badge && (
          <span className="px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded-full">
            {badge}
          </span>
        )}
        {aiActive && (
          <span className="px-2 py-1 text-xs bg-green-100 text-green-700 rounded-full flex items-center gap-1">
            <Brain className="w-3 h-3" /> AI Active
          </span>
        )}
      </div>
      {expandedSections[section] ? (
        <ChevronUp className="w-5 h-5 text-gray-400" />
      ) : (
        <ChevronDown className="w-5 h-5 text-gray-400" />
      )}
    </div>
  );

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-3xl font-bold text-gray-900">Complete Client Intelligence Profile</h2>
          <p className="text-gray-600 text-sm mt-1">AI-powered comprehensive client management</p>
        </div>
        <div className="flex gap-2">
          <button
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            onClick={handleSave}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2"
          >
            <Activity className="w-4 h-4" />
            Save Client
          </button>
        </div>
      </div>

      {/* AI Suggestions Panel */}
      {aiSuggestions.length > 0 && (
        <div className="p-4 bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-lg">
          <div className="flex items-center gap-2 mb-3">
            <Brain className="w-5 h-5 text-purple-600" />
            <h3 className="font-semibold text-purple-900">AI Insights & Suggestions</h3>
          </div>
          <div className="space-y-2">
            {aiSuggestions.map((suggestion, index) => (
              <div key={index} className={`p-3 rounded-lg border ${
                suggestion.type === 'required' ? 'bg-red-50 border-red-200' :
                suggestion.type === 'warning' ? 'bg-yellow-50 border-yellow-200' :
                suggestion.type === 'insight' ? 'bg-blue-50 border-blue-200' :
                'bg-green-50 border-green-200'
              }`}>
                <div className="flex items-start justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-900">{suggestion.message}</p>
                    {suggestion.action && (
                      <p className="text-xs text-gray-600 mt-1">Recommended: {suggestion.action}</p>
                    )}
                  </div>
                  <button className="text-xs text-blue-600 hover:text-blue-700 font-medium">
                    Take Action
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Activity Summary */}
      <div className="grid grid-cols-4 gap-4 mb-6">
        <div className="p-4 bg-white border border-gray-200 rounded-lg">
          <div className="flex items-center gap-2 text-gray-600 text-sm mb-1">
            <MessageSquare className="w-4 h-4" />
            Total Interactions
          </div>
          <p className="text-2xl font-bold text-gray-900">{formData.aiTracking.totalInteractions}</p>
        </div>
        <div className="p-4 bg-white border border-gray-200 rounded-lg">
          <div className="flex items-center gap-2 text-gray-600 text-sm mb-1">
            <Mail className="w-4 h-4" />
            Email Engagement
          </div>
          <p className="text-2xl font-bold text-gray-900">
            {formData.aiTracking.emailsReceived > 0 
              ? `${Math.round((formData.aiTracking.emailsOpened / formData.aiTracking.emailsReceived) * 100)}%`
              : '0%'}
          </p>
        </div>
        <div className="p-4 bg-white border border-gray-200 rounded-lg">
          <div className="flex items-center gap-2 text-gray-600 text-sm mb-1">
            <Globe className="w-4 h-4" />
            Website Visits
          </div>
          <p className="text-2xl font-bold text-gray-900">{formData.aiTracking.websiteVisits}</p>
        </div>
        <div className="p-4 bg-white border border-gray-200 rounded-lg">
          <div className="flex items-center gap-2 text-gray-600 text-sm mb-1">
            <Activity className="w-4 h-4" />
            Engagement Score
          </div>
          <p className="text-2xl font-bold text-gray-900">{formData.aiTracking.engagementScore}/100</p>
        </div>
      </div>

      {/* Basic Information */}
      <div className="space-y-2">
        <SectionHeader title="Basic Information" icon={Users} section="basic" badge="Required" aiActive={true} />
        {expandedSections.basic && (
          <div className="p-4 bg-white border border-gray-200 rounded-lg space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">First Name *</label>
                <input
                  type="text"
                  value={formData.firstName}
                  onChange={(e) => updateField('firstName', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Middle Name</label>
                <input
                  type="text"
                  value={formData.middleName}
                  onChange={(e) => updateField('middleName', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Last Name *</label>
                <input
                  type="text"
                  value={formData.lastName}
                  onChange={(e) => updateField('lastName', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Suffix</label>
                <select
                  value={formData.suffix}
                  onChange={(e) => updateField('suffix', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">None</option>
                  <option value="Jr">Jr.</option>
                  <option value="Sr">Sr.</option>
                  <option value="II">II</option>
                  <option value="III">III</option>
                </select>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Preferred Name</label>
                <input
                  type="text"
                  value={formData.preferredName}
                  onChange={(e) => updateField('preferredName', e.target.value)}
                  placeholder="What they like to be called"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center gap-2">
                  Name Pronunciation
                  <Mic className="w-4 h-4 text-blue-600 cursor-pointer" />
                </label>
                <input
                  type="text"
                  value={formData.namePronunciation}
                  onChange={(e) => updateField('namePronunciation', e.target.value)}
                  placeholder="e.g., La-HAH-gee"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Date of Birth *</label>
                <input
                  type="date"
                  value={formData.dateOfBirth}
                  onChange={(e) => updateField('dateOfBirth', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center justify-between">
                  <span>Social Security Number *</span>
                  <button
                    type="button"
                    onClick={() => setShowSSN(!showSSN)}
                    className="text-blue-600 hover:text-blue-700"
                  >
                    {showSSN ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                  </button>
                </label>
                <input
                  type={showSSN ? "text" : "password"}
                  value={formatSSN(formData.ssn)}
                  onChange={(e) => handleSSNChange(e.target.value)}
                  placeholder="XXX-XX-XXXX"
                  maxLength="11"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 font-mono"
                />
                {formData.ssnLast4 && (
                  <p className="text-xs text-gray-500 mt-1">Last 4: {formData.ssnLast4} (auto-populated)</p>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Contact Information - keeping previous implementation but adding verification tracking */}
      <div className="space-y-2">
        <SectionHeader title="Contact Information" icon={Phone} section="contact" badge="Required" aiActive={true} />
        {expandedSections.contact && (
          <div className="p-4 bg-white border border-gray-200 rounded-lg space-y-4">
            {/* Phones */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm font-medium text-gray-700">Phone Numbers</label>
                <button
                  onClick={() => addArrayItem('phones', { type: 'mobile', number: '', isPrimary: false, canText: true, canCall: true, verified: false })}
                  className="text-sm text-blue-600 hover:text-blue-700 flex items-center gap-1"
                >
                  <Plus className="w-4 h-4" /> Add Phone
                </button>
              </div>
              {formData.phones.map((phone, index) => (
                <div key={index} className="flex gap-2 mb-2 items-center">
                  <select
                    value={phone.type}
                    onChange={(e) => updateArrayItem('phones', index, { type: e.target.value })}
                    className="px-3 py-2 border border-gray-300 rounded-lg"
                  >
                    <option value="mobile">Mobile</option>
                    <option value="home">Home</option>
                    <option value="work">Work</option>
                  </select>
                  <input
                    type="tel"
                    value={phone.number}
                    onChange={(e) => updateArrayItem('phones', index, { number: e.target.value })}
                    placeholder="(555) 555-5555"
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg"
                  />
                  <label className="flex items-center gap-1">
                    <input
                      type="checkbox"
                      checked={phone.canText}
                      onChange={(e) => updateArrayItem('phones', index, { canText: e.target.checked })}
                    />
                    <span className="text-sm">Text</span>
                  </label>
                  <label className="flex items-center gap-1">
                    <input
                      type="checkbox"
                      checked={phone.canCall}
                      onChange={(e) => updateArrayItem('phones', index, { canCall: e.target.checked })}
                    />
                    <span className="text-sm">Call</span>
                  </label>
                  <label className="flex items-center gap-1">
                    <input
                      type="checkbox"
                      checked={phone.verified}
                      onChange={(e) => updateArrayItem('phones', index, { verified: e.target.checked })}
                    />
                    <span className="text-sm">✓</span>
                  </label>
                  {formData.phones.length > 1 && (
                    <button
                      onClick={() => removeArrayItem('phones', index)}
                      className="text-red-600 hover:text-red-700"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  )}
                </div>
              ))}
            </div>

            {/* Emails */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm font-medium text-gray-700">Email Addresses</label>
                <button
                  onClick={() => addArrayItem('emails', { type: 'personal', address: '', isPrimary: false, verified: false })}
                  className="text-sm text-blue-600 hover:text-blue-700 flex items-center gap-1"
                >
                  <Plus className="w-4 h-4" /> Add Email
                </button>
              </div>
              {formData.emails.map((email, index) => (
                <div key={index} className="flex gap-2 mb-2">
                  <select
                    value={email.type}
                    onChange={(e) => updateArrayItem('emails', index, { type: e.target.value })}
                    className="px-3 py-2 border border-gray-300 rounded-lg"
                  >
                    <option value="personal">Personal</option>
                    <option value="work">Work</option>
                  </select>
                  <input
                    type="email"
                    value={email.address}
                    onChange={(e) => updateArrayItem('emails', index, { address: e.target.value })}
                    placeholder="email@example.com"
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg"
                  />
                  <label className="flex items-center gap-1 px-2">
                    <input
                      type="checkbox"
                      checked={email.verified}
                      onChange={(e) => updateArrayItem('emails', index, { verified: e.target.checked })}
                    />
                    <span className="text-sm">Verified</span>
                  </label>
                  {formData.emails.length > 1 && (
                    <button
                      onClick={() => removeArrayItem('emails', index)}
                      className="text-red-600 hover:text-red-700"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  )}
                </div>
              ))}
            </div>

            {/* Addresses with AI lookup */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm font-medium text-gray-700">Addresses</label>
                <button
                  onClick={() => addArrayItem('addresses', { type: 'home', street: '', unit: '', city: '', state: '', zip: '', isPrimary: false, verified: false })}
                  className="text-sm text-blue-600 hover:text-blue-700 flex items-center gap-1"
                >
                  <Plus className="w-4 h-4" /> Add Address
                </button>
              </div>
              {formData.addresses.map((address, index) => (
                <div key={index} className="p-4 border border-gray-200 rounded-lg mb-2 space-y-2">
                  <div className="flex gap-2">
                    <select
                      value={address.type}
                      onChange={(e) => updateArrayItem('addresses', index, { type: e.target.value })}
                      className="px-3 py-2 border border-gray-300 rounded-lg"
                    >
                      <option value="home">Home</option>
                      <option value="work">Work</option>
                      <option value="mailing">Mailing</option>
                    </select>
                    <label className="flex items-center gap-2 ml-auto">
                      <input
                        type="checkbox"
                        checked={address.verified}
                        onChange={(e) => updateArrayItem('addresses', index, { verified: e.target.checked })}
                      />
                      <span className="text-sm">Verified</span>
                    </label>
                    {formData.addresses.length > 1 && (
                      <button
                        onClick={() => removeArrayItem('addresses', index)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <X className="w-5 h-5" />
                      </button>
                    )}
                  </div>
                  <input
                    type="text"
                    value={address.street}
                    onChange={(e) => updateArrayItem('addresses', index, { street: e.target.value })}
                    placeholder="Street Address"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  />
                  <input
                    type="text"
                    value={address.unit}
                    onChange={(e) => updateArrayItem('addresses', index, { unit: e.target.value })}
                    placeholder="Unit/Apt (optional)"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  />
                  <div className="grid grid-cols-3 gap-2">
                    <div className="relative">
                      <input
                        type="text"
                        value={address.zip}
                        onChange={(e) => handleZipCodeChange(e.target.value, index)}
                        placeholder="ZIP"
                        maxLength="5"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                      />
                      {address.zip.length === 5 && address.city && (
                        <span className="absolute right-2 top-2 text-green-600">
                          <Brain className="w-4 h-4" />
                        </span>
                      )}
                    </div>
                    <input
                      type="text"
                      value={address.city}
                      onChange={(e) => updateArrayItem('addresses', index, { city: e.target.value })}
                      placeholder="City"
                      className="px-3 py-2 border border-gray-300 rounded-lg"
                    />
                    <select
                      value={address.state}
                      onChange={(e) => updateArrayItem('addresses', index, { state: e.target.value })}
                      className="px-3 py-2 border border-gray-300 rounded-lg"
                    >
                      <option value="">State</option>
                      <option value="CA">CA</option>
                      <option value="NY">NY</option>
                      <option value="TX">TX</option>
                      <option value="FL">FL</option>
                    </select>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* IDIQ Section with Auto-populate */}
      <div className="space-y-2">
        <SectionHeader title="IDIQ Membership & Credentials" icon={CreditCard} section="idiq" aiActive={true} />
        {expandedSections.idiq && (
          <div className="p-4 bg-white border border-gray-200 rounded-lg space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Membership Status</label>
                <select
                  value={formData.idiq.membershipStatus}
                  onChange={(e) => updateNestedField('idiq', 'membershipStatus', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                >
                  <option value="none">Not Enrolled</option>
                  <option value="pending">Pending Enrollment</option>
                  <option value="active">Active Member</option>
                  <option value="inactive">Inactive</option>
                </select>
              </div>
              {formData.idiq.membershipStatus !== 'none' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Member ID</label>
                  <input
                    type="text"
                    value={formData.idiq.memberId}
                    onChange={(e) => updateNestedField('idiq', 'memberId', e.target.value)}
                    placeholder="IDIQ Member ID"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  />
                </div>
              )}
            </div>

            {formData.idiq.membershipStatus !== 'none' && (
              <>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center justify-between">
                      <span>Username</span>
                      <button
                        type="button"
                        onClick={generateUsername}
                        className="text-xs text-blue-600 hover:text-blue-700"
                      >
                        Generate
                      </button>
                    </label>
                    <input
                      type="text"
                      value={formData.idiq.username}
                      onChange={(e) => updateNestedField('idiq', 'username', e.target.value)}
                      placeholder="Username for IDIQ"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center justify-between">
                      <span>Password</span>
                      <button
                        type="button"
                        onClick={generatePassword}
                        className="text-xs text-blue-600 hover:text-blue-700"
                      >
                        Generate
                      </button>
                    </label>
                    <input
                      type="password"
                      value={formData.idiq.password}
                      onChange={(e) => updateNestedField('idiq', 'password', e.target.value)}
                      placeholder="Password for IDIQ"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Secret Word
                    <span className="text-xs text-gray-500 ml-2">(Auto-populated from SSN last 4, can be changed)</span>
                  </label>
                  <input
                    type="text"
                    value={formData.idiq.secretWord}
                    onChange={(e) => updateNestedField('idiq', 'secretWord', e.target.value)}
                    placeholder="Secret word for IDIQ"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  />
                  {formData.idiq.secretWord === formData.ssnLast4 && (
                    <p className="text-xs text-green-600 mt-1 flex items-center gap-1">
                      <Brain className="w-3 h-3" /> Using SSN last 4 (recommended by IDIQ)
                    </p>
                  )}
                </div>
              </>
            )}
          </div>
        )}
      </div>

      {/* Timeline Section */}
      <div className="space-y-2">
        <SectionHeader title="Activity Timeline" icon={Clock} section="timeline" badge={`${formData.timeline.length} events`} />
        {expandedSections.timeline && (
          <div className="p-4 bg-white border border-gray-200 rounded-lg">
            {formData.timeline.length === 0 ? (
              <p className="text-gray-500 text-center py-8">No activity recorded yet</p>
            ) : (
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {formData.timeline.map((event) => (
                  <div key={event.id} className="flex gap-3 pb-3 border-b border-gray-100 last:border-0">
                    <div className="flex-shrink-0 w-2 h-2 rounded-full bg-blue-500 mt-2"></div>
                    <div className="flex-1">
                      <p className="text-sm font-medium text-gray-900">{event.description}</p>
                      <p className="text-xs text-gray-500">{new Date(event.timestamp).toLocaleString()}</p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Credit Profile - Enhanced */}
      <div className="space-y-2">
        <SectionHeader title="Credit Profile & Goals" icon={CreditCard} section="credit" aiActive={true} />
        {expandedSections.credit && (
          <div className="p-4 bg-white border border-gray-200 rounded-lg space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Current Score</label>
                <input
                  type="number"
                  value={formData.creditProfile.approximateScore}
                  onChange={(e) => updateNestedField('creditProfile', 'approximateScore', e.target.value)}
                  placeholder="e.g., 650"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Target Score</label>
                <input
                  type="number"
                  value={formData.creditProfile.targetScore}
                  onChange={(e) => updateNestedField('creditProfile', 'targetScore', e.target.value)}
                  placeholder="e.g., 720"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Urgency</label>
                <select
                  value={formData.creditProfile.urgencyLevel}
                  onChange={(e) => updateNestedField('creditProfile', 'urgencyLevel', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                >
                  <option value="low">Low - Exploring</option>
                  <option value="medium">Medium - Planning</option>
                  <option value="high">High - Need Soon</option>
                  <option value="urgent">Urgent - Need Now</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Primary Goals</label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                {['Buy a home', 'Buy a car', 'Get credit card', 'Lower rates', 'Refinance', 'Remove negatives', 'Build credit', 'Debt consolidation'].map(goal => (
                  <label key={goal} className="flex items-center gap-2 p-2 border border-gray-200 rounded hover:bg-gray-50 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={formData.creditProfile.primaryGoals.includes(goal)}
                      onChange={(e) => {
                        const goals = e.target.checked
                          ? [...formData.creditProfile.primaryGoals, goal]
                          : formData.creditProfile.primaryGoals.filter(g => g !== goal);
                        updateNestedField('creditProfile', 'primaryGoals', goals);
                      }}
                      className="rounded border-gray-300"
                    />
                    <span className="text-sm">{goal}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Documents Checklist */}
      <div className="space-y-2">
        <SectionHeader title="Document Checklist" icon={FileText} section="documents" />
        {expandedSections.documents && (
          <div className="p-4 bg-white border border-gray-200 rounded-lg space-y-3">
            <label className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100">
              <input
                type="checkbox"
                checked={formData.documents.idReceived}
                onChange={(e) => {
                  updateNestedField('documents', 'idReceived', e.target.checked);
                  if (e.target.checked) {
                    addTimelineEvent('document_received', 'Photo ID received');
                  }
                }}
                className="rounded border-gray-300"
              />
              <FileText className="w-5 h-5 text-gray-600" />
              <span className="text-sm font-medium flex-1">Photo ID</span>
              {formData.documents.idReceived && (
                <span className="text-xs text-green-600">✓ Received</span>
              )}
            </label>

            {formData.documents.idReceived && (
              <div className="ml-11 grid grid-cols-2 gap-4 p-3 bg-gray-50 rounded-lg">
                <select
                  value={formData.documents.idType}
                  onChange={(e) => updateNestedField('documents', 'idType', e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
                >
                  <option value="">ID Type</option>
                  <option value="drivers-license">Driver's License</option>
                  <option value="passport">Passport</option>
                  <option value="state-id">State ID</option>
                </select>
                <input
                  type="date"
                  value={formData.documents.idExpirationDate}
                  onChange={(e) => updateNestedField('documents', 'idExpirationDate', e.target.value)}
                  placeholder="Expiration"
                  className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
                />
              </div>
            )}

            <label className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100">
              <input
                type="checkbox"
                checked={formData.documents.proofOfAddressReceived}
                onChange={(e) => {
                  updateNestedField('documents', 'proofOfAddressReceived', e.target.checked);
                  if (e.target.checked) {
                    addTimelineEvent('document_received', 'Proof of address received');
                  }
                }}
                className="rounded border-gray-300"
              />
              <MapPin className="w-5 h-5 text-gray-600" />
              <span className="text-sm font-medium flex-1">Proof of Address</span>
              {formData.documents.proofOfAddressReceived && (
                <span className="text-xs text-green-600">✓ Received</span>
              )}
            </label>

            <label className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100">
              <input
                type="checkbox"
                checked={formData.documents.ssnCardReceived}
                onChange={(e) => {
                  updateNestedField('documents', 'ssnCardReceived', e.target.checked);
                  if (e.target.checked) {
                    addTimelineEvent('document_received', 'SSN card received');
                  }
                }}
                className="rounded border-gray-300"
              />
              <CreditCard className="w-5 h-5 text-gray-600" />
              <span className="text-sm font-medium flex-1">SSN Card</span>
              {formData.documents.ssnCardReceived && (
                <span className="text-xs text-green-600">✓ Received</span>
              )}
            </label>

            <label className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100">
              <input
                type="checkbox"
                checked={formData.documents.creditReportsReceived}
                onChange={(e) => {
                  updateNestedField('documents', 'creditReportsReceived', e.target.checked);
                  if (e.target.checked) {
                    addTimelineEvent('document_received', 'Credit reports received');
                  }
                }}
                className="rounded border-gray-300"
              />
              <FileText className="w-5 h-5 text-gray-600" />
              <span className="text-sm font-medium flex-1">Credit Reports</span>
              {formData.documents.creditReportsReceived && (
                <span className="text-xs text-green-600">✓ Received</span>
              )}
            </label>
          </div>
        )}
      </div>

      {/* Internal Notes */}
      <div className="p-4 bg-white border border-gray-200 rounded-lg">
        <label className="block text-sm font-medium text-gray-700 mb-2">Internal Notes & Observations</label>
        <textarea
          value={formData.notes}
          onChange={(e) => updateField('notes', e.target.value)}
          rows="4"
          placeholder="AI will analyze all interactions and add insights here automatically. You can also add manual notes..."
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* Action Buttons */}
      <div className="flex justify-between items-center pt-4 border-t">
        <div className="text-sm text-gray-600">
          Last activity: {new Date(formData.aiTracking.lastActivity).toLocaleString()}
        </div>
        <div className="flex gap-3">
          <button
            onClick={onCancel}
            className="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium"
          >
            Cancel
          </button>
          <button
            onClick={handleSave}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium flex items-center gap-2"
          >
            <Brain className="w-4 h-4" />
            Save Client Profile
          </button>
        </div>
      </div>
    </div>
  );
}